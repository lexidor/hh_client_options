Files should end with a single trailing newline
  Linter: Facebook\HHAST\NewlineAtEndOfFileLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:2559:0
@@ -2557,3 +2557,4 @@
 }
 
 }
+
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:25:13
@@ -22,7 +22,7 @@
 function map(): \Facebook\AutoloadMap\AutoloadMap {
   /* HH_IGNORE_ERROR[4110] invalid return type */
   return dict[
-  'class' => 
+  'class' =>
   dict[
     'azjezz\\httpnormalizer\\filestructure' => 'vendor/azjezz/http-normalizer/src/HttpNormalizer/absolute.hack',
     'azjezz\\httpnormalizer\\_private\\filenormalizer' => 'vendor/azjezz/http-normalizer/src/HttpNormalizer/private.hack',
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:1708:16
@@ -1705,7 +1705,7 @@
     'usox\\sharesta\\routerinterface' => 'vendor/usox/sharesta/src/RouterInterface.hh',
     'usox\\sharesta\\requestbodyinterface' => 'vendor/usox/sharesta/src/RequestBodyInterface.hh',
   ],
-  'function' => 
+  'function' =>
   dict[
     'azjezz\\httpnormalizer\\parse' => 'vendor/azjezz/http-normalizer/src/HttpNormalizer/absolute.hack',
     'azjezz\\httpnormalizer\\normalize' => 'vendor/azjezz/http-normalizer/src/HttpNormalizer/absolute.hack',
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:2334:12
@@ -2331,7 +2331,7 @@
     'usox\\hackttp\\create_uri' => 'vendor/usox/hackttp/src/functions.hack',
     'usox\\hackttp\\create_response' => 'vendor/usox/hackttp/src/functions.hack',
   ],
-  'type' => 
+  'type' =>
   dict[
     'azjezz\\httpnormalizer\\filestructure' => 'vendor/azjezz/http-normalizer/src/HttpNormalizer/absolute.hack',
     'facebook\\definitionfinder\\consumercontext' => 'vendor/facebook/definition-finder/src/consumers/ConsumerContext.hack',
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:2475:16
@@ -2472,7 +2472,7 @@
     'nuxed\\http\\emitter\\_private\\contentrange' => 'vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/_Private/range.hack',
     'usox\\hackttp\\marshaler\\uploadedfiletype' => 'vendor/usox/hackttp/src/Marshaler/UploadedFileMarshaler.hack',
   ],
-  'constant' => 
+  'constant' =>
   dict[
     'Facebook\\Markdown\\_Private\\UNICODE_REPLACEMENT_CHARACTER' => 'vendor/facebook/fbmarkdown/src/_Private/decode_html_entity.php',
     'Facebook\\Markdown\\_Private\\ASCII_PUNCTUATION' => 'vendor/facebook/fbmarkdown/src/_Private/ASCII_PUNCTUATION.php',
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:2540:4
@@ -2537,7 +2537,7 @@
 
   function bootstrap(): void {
     require_once(__DIR__.'/../vendor/hhvm/hhvm-autoload/src/AutoloadMap.hack');
-    
+
   }
 }
 
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/autoload.hack:2556:2
@@ -2553,7 +2553,7 @@
 
   \HH\autoload_set_paths(/* HH_FIXME[4110] incorrect hhi */ $map, Generated\root());
 
-  
+
 }
 
 }
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hh_autoload.php:1:0
@@ -1,3 +1,3 @@
-<?hh // partial
+<?hh
 require_once(__DIR__.'/autoload.hack');
 Facebook\AutoloadMap\initialize();
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:14:15
@@ -11,7 +11,7 @@
     );
 
     public static $prefixLengthsPsr4 = array (
-        'U' => 
+        'U' =>
         array (
             'Usox\\Sharesta\\' => 14,
             'Usox\\HackTTP\\' => 13,
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:24:30
@@ -21,7 +21,7 @@
     );
 
     public static $prefixDirsPsr4 = array (
-        'Usox\\Sharesta\\' => 
+        'Usox\\Sharesta\\' =>
         array (
             0 => __DIR__ . '/..' . '/usox/sharesta/src',
         ),
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:28:29
@@ -25,7 +25,7 @@
         array (
             0 => __DIR__ . '/..' . '/usox/sharesta/src',
         ),
-        'Usox\\HackTTP\\' => 
+        'Usox\\HackTTP\\' =>
         array (
             0 => __DIR__ . '/..' . '/usox/hackttp/src',
         ),
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:32:30
@@ -29,7 +29,7 @@
         array (
             0 => __DIR__ . '/..' . '/usox/hackttp/src',
         ),
-        'Usox\\HackMock\\' => 
+        'Usox\\HackMock\\' =>
         array (
             0 => __DIR__ . '/..' . '/usox/hackmock/src',
         ),
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:36:37
@@ -33,7 +33,7 @@
         array (
             0 => __DIR__ . '/..' . '/usox/hackmock/src',
         ),
-        'Usox\\HackHttpFactory\\' => 
+        'Usox\\HackHttpFactory\\' =>
         array (
             0 => __DIR__ . '/..' . '/usox/hack-http-factory-interfaces/src',
         ),
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:9:27
@@ -6,6 +6,6 @@
 
 class ComposerStaticInit2250889d96e593f732199a84095648e2
 {
-    public static $files = array (
+    public static $files = dict [
         'ae83e4b650c501bc83baf82e0aeba018' => __DIR__ . '/..' . '/facebook/definition-finder/autoload_files.php',
-    );
+    ];
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:13:39
@@ -10,7 +10,7 @@
         'ae83e4b650c501bc83baf82e0aeba018' => __DIR__ . '/..' . '/facebook/definition-finder/autoload_files.php',
     );
 
-    public static $prefixLengthsPsr4 = array (
+    public static $prefixLengthsPsr4 = dict [
         'U' => 
         array (
             'Usox\\Sharesta\\' => 14,
@@ -18,7 +18,7 @@
             'Usox\\HackMock\\' => 14,
             'Usox\\HackHttpFactory\\' => 21,
         ),
-    );
+    ];
 
     public static $prefixDirsPsr4 = array (
         'Usox\\Sharesta\\' => 
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:15:8
@@ -12,7 +12,7 @@
 
     public static $prefixLengthsPsr4 = array (
         'U' => 
-        array (
+        dict [
             'Usox\\Sharesta\\' => 14,
             'Usox\\HackTTP\\' => 13,
             'Usox\\HackMock\\' => 14,
@@ -19,5 +19,5 @@
             'Usox\\HackHttpFactory\\' => 21,
-        ),
+        ],
     );
 
     public static $prefixDirsPsr4 = array (
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:23:36
@@ -20,7 +20,7 @@
         ),
     );
 
-    public static $prefixDirsPsr4 = array (
+    public static $prefixDirsPsr4 = dict [
         'Usox\\Sharesta\\' => 
         array (
             0 => __DIR__ . '/..' . '/usox/sharesta/src',
@@ -37,7 +37,7 @@
         array (
             0 => __DIR__ . '/..' . '/usox/hack-http-factory-interfaces/src',
         ),
-    );
+    ];
 
     public static $classMap = array (
         'Facebook\\AutoloadMap\\ComposerPlugin' => __DIR__ . '/..' . '/hhvm/hhvm-autoload/ComposerPlugin.php',
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:25:8
@@ -22,6 +22,6 @@
 
     public static $prefixDirsPsr4 = array (
         'Usox\\Sharesta\\' => 
-        array (
+        dict [
             0 => __DIR__ . '/..' . '/usox/sharesta/src',
-        ),
+        ],
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:29:8
@@ -26,6 +26,6 @@
             0 => __DIR__ . '/..' . '/usox/sharesta/src',
         ),
         'Usox\\HackTTP\\' => 
-        array (
+        dict [
             0 => __DIR__ . '/..' . '/usox/hackttp/src',
-        ),
+        ],
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:33:8
@@ -30,6 +30,6 @@
             0 => __DIR__ . '/..' . '/usox/hackttp/src',
         ),
         'Usox\\HackMock\\' => 
-        array (
+        dict [
             0 => __DIR__ . '/..' . '/usox/hackmock/src',
-        ),
+        ],
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:37:8
@@ -34,6 +34,6 @@
             0 => __DIR__ . '/..' . '/usox/hackmock/src',
         ),
         'Usox\\HackHttpFactory\\' => 
-        array (
+        dict [
             0 => __DIR__ . '/..' . '/usox/hack-http-factory-interfaces/src',
-        ),
+        ],
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_static.php:42:30
@@ -39,6 +39,6 @@
         ),
     );
 
-    public static $classMap = array (
+    public static $classMap = dict [
         'Facebook\\AutoloadMap\\ComposerPlugin' => __DIR__ . '/..' . '/hhvm/hhvm-autoload/ComposerPlugin.php',
-    );
+    ];
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_classmap.php:8:7
@@ -5,6 +5,6 @@
 $vendorDir = dirname(dirname(__FILE__));
 $baseDir = dirname($vendorDir);
 
-return array(
+return dict[
     'Facebook\\AutoloadMap\\ComposerPlugin' => $vendorDir . '/hhvm/hhvm-autoload/ComposerPlugin.php',
-);
+];
Function "includeFile()" does not match conventions; consider renaming to "include_file"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:442:0
@@ -439,7 +439,7 @@
  *
  * Prevents access to $this/self from included files.
  */
-function includeFile($file)
+function include_file($file)
 {
     include $file;
 }
Basic assignment is not allowed in function parameters because it is often
	1) unexpected that it sets a local variable in the containing scope
	2) wrongly assumed that the variables are named parameters
  Linter: Facebook\HHAST\NoBasicAssignmentFunctionParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:384:28
@@ -381,7 +381,7 @@
                 if (isset($this->prefixDirsPsr4[$search])) {
                     $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
                     foreach ($this->prefixDirsPsr4[$search] as $dir) {
-                        if (file_exists($file = $dir . $pathEnd)) {
+                        if (file_exists(/* $file = */ $dir . $pathEnd)) {
                             return $file;
                         }
                     }
Basic assignment is not allowed in function parameters because it is often
	1) unexpected that it sets a local variable in the containing scope
	2) wrongly assumed that the variables are named parameters
  Linter: Facebook\HHAST\NoBasicAssignmentFunctionParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:394:16
@@ -391,7 +391,7 @@
 
         // PSR-4 fallback dirs
         foreach ($this->fallbackDirsPsr4 as $dir) {
-            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
+            if (file_exists(/* $file = */ $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
                 return $file;
             }
         }
Basic assignment is not allowed in function parameters because it is often
	1) unexpected that it sets a local variable in the containing scope
	2) wrongly assumed that the variables are named parameters
  Linter: Facebook\HHAST\NoBasicAssignmentFunctionParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:413:28
@@ -410,7 +410,7 @@
             foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
                 if (0 === strpos($class, $prefix)) {
                     foreach ($dirs as $dir) {
-                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
+                        if (file_exists(/* $file = */ $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                             return $file;
                         }
                     }
Basic assignment is not allowed in function parameters because it is often
	1) unexpected that it sets a local variable in the containing scope
	2) wrongly assumed that the variables are named parameters
  Linter: Facebook\HHAST\NoBasicAssignmentFunctionParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:423:16
@@ -420,7 +420,7 @@
 
         // PSR-0 fallback dirs
         foreach ($this->fallbackDirsPsr0 as $dir) {
-            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
+            if (file_exists(/* $file = */ $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                 return $file;
             }
         }
Do not use "elseif", use "else if" instead.
  Linter: Facebook\HHAST\NoElseifLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:171:10
@@ -168,7 +168,7 @@
                     (array) $paths
                 );
             }
-        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
+        } else if (!isset($this->prefixDirsPsr4[$prefix])) {
             // Register directories for a new namespace.
             $length = strlen($prefix);
             if ('\\' !== $prefix[$length - 1]) {
Do not use "elseif", use "else if" instead.
  Linter: Facebook\HHAST\NoElseifLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:179:10
@@ -176,7 +176,7 @@
             }
             $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
             $this->prefixDirsPsr4[$prefix] = (array) $paths;
-        } elseif ($prepend) {
+        } else if ($prepend) {
             // Prepend directories for an already registered namespace.
             $this->prefixDirsPsr4[$prefix] = array_merge(
                 (array) $paths,
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:444:4
@@ -441,5 +441,5 @@
  */
 function includeFile($file)
 {
-    include $file;
+    require_once $file;
 }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:175:52
@@ -172,7 +172,7 @@
             // Register directories for a new namespace.
             $length = strlen($prefix);
             if ('\\' !== $prefix[$length - 1]) {
-                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
+                throw new \InvalidArgumentException('A non-empty PSR-4 prefix must end with a namespace separator.');
             }
             $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
             $this->prefixDirsPsr4[$prefix] = (array) $paths;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:226:52
@@ -223,7 +223,7 @@
         } else {
             $length = strlen($prefix);
             if ('\\' !== $prefix[$length - 1]) {
-                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
+                throw new \InvalidArgumentException('A non-empty PSR-4 prefix must end with a namespace separator.');
             }
             $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
             $this->prefixDirsPsr4[$prefix] = (array) $paths;
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:46:33
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:47:30
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:48:32
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:51:28
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:52:32
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:55:24
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:57:30
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:66:15
  Code:
  >array()
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:302:30
@@ -299,7 +299,7 @@
      */
     public function register($prepend = false)
     {
-        spl_autoload_register(array($this, 'loadClass'), true, $prepend);
+        spl_autoload_register(vec[$this, 'loadClass'], true, $prepend);
     }
 
     /**
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/ClassLoader.php:310:32
@@ -307,7 +307,7 @@
      */
     public function unregister()
     {
-        spl_autoload_unregister(array($this, 'loadClass'));
+        spl_autoload_unregister(vec[$this, 'loadClass']);
     }
 
     /**
Function "composerRequire2250889d96e593f732199a84095648e2()" does not match conventions; consider renaming to "composer_require_2250889_d_96_e_593_f_732199_a_84095648_e_2"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:63:0
@@ -60,7 +60,7 @@
     }
 }
 
-function composerRequire2250889d96e593f732199a84095648e2($fileIdentifier, $file)
+function composer_require_2250889_d_96_e_593_f_732199_a_84095648_e_2($fileIdentifier, $file)
 {
     if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
         require $file;
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:12:12
@@ -9,7 +9,7 @@
     public static function loadClassLoader($class)
     {
         if ('Composer\Autoload\ClassLoader' === $class) {
-            require __DIR__ . '/ClassLoader.php';
+            require_once __DIR__ . '/ClassLoader.php';
         }
     }
 
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:32:19
@@ -29,7 +29,7 @@
 
             call_user_func(\Composer\Autoload\ComposerStaticInit2250889d96e593f732199a84095648e2::getInitializer($loader));
         } else {
-            $map = require __DIR__ . '/autoload_namespaces.php';
+            $map = require_once __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
                 $loader->set($namespace, $path);
             }
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:37:19
@@ -34,7 +34,7 @@
                 $loader->set($namespace, $path);
             }
 
-            $map = require __DIR__ . '/autoload_psr4.php';
+            $map = require_once __DIR__ . '/autoload_psr4.php';
             foreach ($map as $namespace => $path) {
                 $loader->setPsr4($namespace, $path);
             }
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:42:24
@@ -39,7 +39,7 @@
                 $loader->setPsr4($namespace, $path);
             }
 
-            $classMap = require __DIR__ . '/autoload_classmap.php';
+            $classMap = require_once __DIR__ . '/autoload_classmap.php';
             if ($classMap) {
                 $loader->addClassMap($classMap);
             }
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:53:28
@@ -50,7 +50,7 @@
         if ($useStaticLoader) {
             $includeFiles = Composer\Autoload\ComposerStaticInit2250889d96e593f732199a84095648e2::$files;
         } else {
-            $includeFiles = require __DIR__ . '/autoload_files.php';
+            $includeFiles = require_once __DIR__ . '/autoload_files.php';
         }
         foreach ($includeFiles as $fileIdentifier => $file) {
             composerRequire2250889d96e593f732199a84095648e2($fileIdentifier, $file);
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:66:8
@@ -63,7 +63,7 @@
 function composerRequire2250889d96e593f732199a84095648e2($fileIdentifier, $file)
 {
     if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
-        require $file;
+        require_once $file;
 
         $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
     }
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:22:30
@@ -19,7 +19,7 @@
             return self::$loader;
         }
 
-        spl_autoload_register(array('ComposerAutoloaderInit2250889d96e593f732199a84095648e2', 'loadClassLoader'), true, true);
+        spl_autoload_register(vec['ComposerAutoloaderInit2250889d96e593f732199a84095648e2', 'loadClassLoader'], true, true);
         self::$loader = $loader = new \Composer\Autoload\ClassLoader();
         spl_autoload_unregister(array('ComposerAutoloaderInit2250889d96e593f732199a84095648e2', 'loadClassLoader'));
 
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_real.php:24:32
@@ -21,7 +21,7 @@
 
         spl_autoload_register(array('ComposerAutoloaderInit2250889d96e593f732199a84095648e2', 'loadClassLoader'), true, true);
         self::$loader = $loader = new \Composer\Autoload\ClassLoader();
-        spl_autoload_unregister(array('ComposerAutoloaderInit2250889d96e593f732199a84095648e2', 'loadClassLoader'));
+        spl_autoload_unregister(vec['ComposerAutoloaderInit2250889d96e593f732199a84095648e2', 'loadClassLoader']);
 
         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
         if ($useStaticLoader) {
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_namespaces.php:8:7
  Code:
  >array(
  >)
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_psr4.php:8:7
@@ -5,7 +5,7 @@
 $vendorDir = dirname(dirname(__FILE__));
 $baseDir = dirname($vendorDir);
 
-return array(
+return dict[
     'Usox\\Sharesta\\' => array($vendorDir . '/usox/sharesta/src'),
     'Usox\\HackTTP\\' => array($vendorDir . '/usox/hackttp/src'),
     'Usox\\HackMock\\' => array($vendorDir . '/usox/hackmock/src'),
@@ -12,2 +12,2 @@
     'Usox\\HackHttpFactory\\' => array($vendorDir . '/usox/hack-http-factory-interfaces/src'),
-);
+];
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_psr4.php:9:26
@@ -6,7 +6,7 @@
 $baseDir = dirname($vendorDir);
 
 return array(
-    'Usox\\Sharesta\\' => array($vendorDir . '/usox/sharesta/src'),
+    'Usox\\Sharesta\\' => vec[$vendorDir . '/usox/sharesta/src'],
     'Usox\\HackTTP\\' => array($vendorDir . '/usox/hackttp/src'),
     'Usox\\HackMock\\' => array($vendorDir . '/usox/hackmock/src'),
     'Usox\\HackHttpFactory\\' => array($vendorDir . '/usox/hack-http-factory-interfaces/src'),
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_psr4.php:10:25
@@ -7,7 +7,7 @@
 
 return array(
     'Usox\\Sharesta\\' => array($vendorDir . '/usox/sharesta/src'),
-    'Usox\\HackTTP\\' => array($vendorDir . '/usox/hackttp/src'),
+    'Usox\\HackTTP\\' => vec[$vendorDir . '/usox/hackttp/src'],
     'Usox\\HackMock\\' => array($vendorDir . '/usox/hackmock/src'),
     'Usox\\HackHttpFactory\\' => array($vendorDir . '/usox/hack-http-factory-interfaces/src'),
 );
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_psr4.php:11:26
@@ -8,6 +8,6 @@
 return array(
     'Usox\\Sharesta\\' => array($vendorDir . '/usox/sharesta/src'),
     'Usox\\HackTTP\\' => array($vendorDir . '/usox/hackttp/src'),
-    'Usox\\HackMock\\' => array($vendorDir . '/usox/hackmock/src'),
+    'Usox\\HackMock\\' => vec[$vendorDir . '/usox/hackmock/src'],
     'Usox\\HackHttpFactory\\' => array($vendorDir . '/usox/hack-http-factory-interfaces/src'),
 );
Do not use PHP array literals, use Hack arrays instead.
  Linter: Facebook\HHAST\NoPHPArrayLiteralsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/composer/autoload_psr4.php:12:33
@@ -9,5 +9,5 @@
     'Usox\\Sharesta\\' => array($vendorDir . '/usox/sharesta/src'),
     'Usox\\HackTTP\\' => array($vendorDir . '/usox/hackttp/src'),
     'Usox\\HackMock\\' => array($vendorDir . '/usox/hackmock/src'),
-    'Usox\\HackHttpFactory\\' => array($vendorDir . '/usox/hack-http-factory-interfaces/src'),
+    'Usox\\HackHttpFactory\\' => vec[$vendorDir . '/usox/hack-http-factory-interfaces/src'],
 );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/bin/try-parse.php:46:18
@@ -43,7 +43,7 @@
     if (
       \json_decode($json) === null && \json_last_error() === \JSON_ERROR_DEPTH
     ) {
-      print $line."JSON TOO DEEP";
+      print $line.'JSON TOO DEEP';
       return;
     }
     print $line;
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/bin/try-parse.php:2:0
@@ -1,5 +1,5 @@
 #!/usr/bin/env hhvm
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/doc_comments.php:34:2
@@ -31,6 +31,6 @@
 
 function param_with_doc_comment(
   /** param doc */
-  int $commented,
+  int $_commented,
   string $uncommented,
 ): void {}
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/doc_comments.php:35:2
@@ -32,5 +32,5 @@
 function param_with_doc_comment(
   /** param doc */
   int $commented,
-  string $uncommented,
+  string $_uncommented,
 ): void {}
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:11:0
  Code:
  >/*
  > *  Copyright (c) 2015-present, Facebook, Inc.
  > *  All rights reserved.
  > *
  > *  This source code is licensed under the MIT license found in the
  > *  LICENSE file in the root directory of this source tree.
  > *
  > */
  >
  >use Foo as Aliased;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:12:0
  Code:
  >use SingleNamespace\Foo as AliasedWithNamespace;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:13:0
  Code:
  >use Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:14:0
@@ -11,7 +11,7 @@
 use Foo as Aliased;
 use SingleNamespace\Foo as AliasedWithNamespace;
 use Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace;
-use Namespaces\AreNested\Now\Bar;
+use type Namespaces\AreNested\Now\Bar;
 use Namespaces\AreNested\Now as AliasedNamespace;
 
 class SimpleClass {
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:15:0
  Code:
  >use Namespaces\AreNested\Now as AliasedNamespace;
  >
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:11:4
  Code:
  >Foo as Aliased
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:12:4
  Code:
  >SingleNamespace\Foo as AliasedWithNamespace
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:13:4
  Code:
  >Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/no_namespace_hack.php:15:4
  Code:
  >Namespaces\AreNested\Now as AliasedNamespace
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/alias_use_namespace.php:25:4
@@ -22,7 +22,7 @@
   use Bar\Derp;
 
   function main(
-    Derp $x, /* Bar\Derp */
+    Derp $_x, /* Bar\Derp */
     /* HH_IGNORE_ERROR[2049] not valid in HHVM/Hack yet */
     Derp\Derp $y, /* Foo\Derp */
   ): void {
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/alias_use_namespace.php:27:4
@@ -24,7 +24,7 @@
   function main(
     Derp $x, /* Bar\Derp */
     /* HH_IGNORE_ERROR[2049] not valid in HHVM/Hack yet */
-    Derp\Derp $y, /* Foo\Derp */
+    Derp\Derp $_y, /* Foo\Derp */
   ): void {
   }
 }
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/alias_use_namespace.php:22:2
  Code:
  >  use Bar\Derp;
  >
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/alias_use_namespace.php:21:16
  Code:
  >Foo as Derp
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:13:0
  Code:
  >
  >use Foo as Aliased;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:14:0
  Code:
  >use SingleNamespace\Foo as AliasedWithNamespace;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:15:0
  Code:
  >use Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:16:0
@@ -13,7 +13,7 @@
 use Foo as Aliased;
 use SingleNamespace\Foo as AliasedWithNamespace;
 use Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace;
-use Namespaces\AreNested\Now\Bar;
+use type Namespaces\AreNested\Now\Bar;
 use Namespaces\AreNested\Now as AliasedNamespace;
 
 class SimpleClass {
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:17:0
  Code:
  >use Namespaces\AreNested\Now as AliasedNamespace;
  >
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:13:4
  Code:
  >Foo as Aliased
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:14:4
  Code:
  >SingleNamespace\Foo as AliasedWithNamespace
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:15:4
  Code:
  >Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/single_namespace_hack.php:17:4
  Code:
  >Namespaces\AreNested\Now as AliasedNamespace
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:13:0
  Code:
  >
  >use Foo as Aliased;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:14:0
  Code:
  >use SingleNamespace\Foo as AliasedWithNamespace;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:15:0
  Code:
  >use Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace;
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:16:0
@@ -13,7 +13,7 @@
 use Foo as Aliased;
 use SingleNamespace\Foo as AliasedWithNamespace;
 use Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace;
-use Namespaces\AreNested\Now\Bar;
+use type Namespaces\AreNested\Now\Bar;
 use Namespaces\AreNested\Now as AliasedNamespace;
 
 class SimpleClass {
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:17:0
  Code:
  >use Namespaces\AreNested\Now as AliasedNamespace;
  >
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:13:4
  Code:
  >Foo as Aliased
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:14:4
  Code:
  >SingleNamespace\Foo as AliasedWithNamespace
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:15:4
  Code:
  >Namespaces\AreNested\Now\Foo as AliasedWithNestedNamespace
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/nested_namespace_hack.php:17:4
  Code:
  >Namespaces\AreNested\Now as AliasedNamespace
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/attributes.php:53:30
@@ -50,7 +50,7 @@
 
 // declarations for the test attributes used above
 abstract class TestAttribute {
-  public function __construct(mixed $a = null, mixed $b = null) {}
+  public function __construct(mixed $_a = null, mixed $b = null) {}
 }
 final class Foo extends TestAttribute implements \HH\ClassAttribute {}
 final class Bar extends TestAttribute implements \HH\ClassAttribute {}
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/attributes.php:53:47
@@ -50,7 +50,7 @@
 
 // declarations for the test attributes used above
 abstract class TestAttribute {
-  public function __construct(mixed $a = null, mixed $b = null) {}
+  public function __construct(mixed $a = null, mixed $_b = null) {}
 }
 final class Foo extends TestAttribute implements \HH\ClassAttribute {}
 final class Bar extends TestAttribute implements \HH\ClassAttribute {}
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/class_properties.php:19:4
  Code:
  >    $local 
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/class_properties.php:29:6
  Code:
  >      $local 
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/curly_then_function.php:13:24
@@ -10,7 +10,7 @@
 
 class Foo {
   public function herp() {
-    throw new Exception("Foo ${bar} {$bar}");
+    throw new Exception("Foo ".$bar." ".$bar);
   }
 
   public function derp() {
Static method "PublicStaticMethod()" in class "ClassWithContents" does not match conventions; consider renaming to "publicStaticMethod"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/definition-finder/tests/data/class_contents.php:26:2
@@ -23,5 +23,5 @@
   protected function protectedMethod(): void {}
   private function privateMethod(): void {}
 
-  public static function PublicStaticMethod(): void {}
+  public static function publicStaticMethod(): void {}
 }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router/src/uri-patterns/UriBuilderBase.php:72:6
@@ -69,7 +69,7 @@
     $part = $this->parameters[$name] ?? null;
     invariant(
       $part !== null,
-      "%s is not a valid parameter - expected one of [%s]",
+      '%s is not a valid parameter - expected one of [%s]',
       $name,
       \implode(', ', $this->parameters->keys()->map($x ==> "'".$x."'")),
     );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router/bin/naive-benchmark.php:37:8
@@ -34,7 +34,7 @@
       list($init, $lookup, $lookup_per_item) =
         self::testImplementation($name, $impl);
       \printf(
-        "... done (init: %0.02fms, lookups: %0.02fms, ".
+        '... done (init: %0.02fms, lookups: %0.02fms, '.
         "per lookup: %0.02fms, estimated total per request: %0.02fms)\n",
         $init * 1000,
         $lookup * 1000,
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router/bin/naive-benchmark.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
`C` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router/bin/generate-random-urimap.php:15:0
@@ -12,7 +12,7 @@
 
 require_once (__DIR__.'/../vendor/hh_autoload.php');
 
-use namespace HH\Lib\{C, Dict, Keyset, Str, Vec};
+use namespace HH\Lib\{Dict, Keyset, Str, Vec};
 
 // Dump out a massive URI map for testing/benchmarking
 final class RandomUriMapGenerator {
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router/bin/generate-random-urimap.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/InlineSequenceBlock.php:13:9
  Code:
  >Facebook\Markdown\Blocks\InlineSequenceBlock as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/ListOfItems.php:13:9
  Code:
  >Facebook\Markdown\Blocks\ListOfItems as ASTNode
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/FencedCodeBlock.php:61:20
@@ -58,7 +58,7 @@
       for ($i = 0; $i < $len; ++$i) {
         $char = $info[$i];
         if (
-          $char === "\\"
+          $char === '\\'
           && $i + 1 < $len
         ) {
           $next = $info[$i + 1];
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/FencedCodeBlock.php:15:9
  Code:
  >Facebook\Markdown\Blocks\FencedCodeBlock as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/SetextHeading.php:13:9
  Code:
  >Facebook\Markdown\Blocks\Heading as ASTHeading
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Document.php:13:9
  Code:
  >Facebook\Markdown\Blocks\Document as ASTNode
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/LinkReferenceDefinition.php:48:46
@@ -45,7 +45,7 @@
   public static function normalizeKey(string $in): string {
     return $in
       |> Str\trim($$)
-      |> \mb_convert_case($$, \MB_CASE_LOWER, "UTF-8")
+      |> \mb_convert_case($$, \MB_CASE_LOWER, 'UTF-8')
       |> \preg_replace('/\s+/', ' ', $$);
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/LinkReferenceDefinition.php:183:22
@@ -180,7 +180,7 @@
         if ($char === ']') {
           break;
         }
-        if ($char === "\\") {
+        if ($char === '\\') {
           if ($i + 1 < $len) {
             $label .= "\\".$line[$i + 1];
             ++$i;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/LinkReferenceDefinition.php:185:22
@@ -182,7 +182,7 @@
         }
         if ($char === "\\") {
           if ($i + 1 < $len) {
-            $label .= "\\".$line[$i + 1];
+            $label .= '\\'.$line[$i + 1];
             ++$i;
             continue;
           }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/LinkReferenceDefinition.php:13:9
  Code:
  >Facebook\Markdown\Blocks\LinkReferenceDefinition as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/BlankLine.php:13:9
  Code:
  >Facebook\Markdown\Blocks\BlankLine as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/ATXHeading.php:14:9
  Code:
  >Facebook\Markdown\Blocks\Heading as ASTHeading
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/BlockSequence.php:13:9
  Code:
  >Facebook\Markdown\Blocks\BlockSequence as ASTNode
Method __construct is final in the class BlockSequence, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/BlockSequence.php:22:2
@@ -19,7 +19,7 @@
 final class BlockSequence extends Block implements BlockProducer {
   private vec<Block> $children;
 
-  final public function __construct(
+  public function __construct(
     vec<?Block> $children,
   ) {
     $this->children = Vec\filter_nulls($children);
Method getChildren is final in the class BlockSequence, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/BlockSequence.php:28:2
@@ -25,7 +25,7 @@
     $this->children = Vec\filter_nulls($children);
   }
 
-  final public function getChildren(): vec<Block> {
+  public function getChildren(): vec<Block> {
     return $this->children;
   }
 
Method flatten is final in the class BlockSequence, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/BlockSequence.php:32:2
@@ -29,7 +29,7 @@
     return $this->children;
   }
 
-  final public static function flatten(?Block ...$children): this {
+  public static function flatten(?Block ...$children): this {
     return new self(vec($children));
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/HTMLBlock.php:30:47
@@ -27,7 +27,7 @@
     self::SINGLE_QUOTED_ATTRIBUTE_VALUE.'|'.
     self::DOUBLE_QUOTED_ATTRIBUTE_VALUE.
     ')';
-  const string ATTRIBUTE_VALUE_SPECIFICATION = "\\s*=\\s*".self::ATTRIBUTE_VALUE;
+  const string ATTRIBUTE_VALUE_SPECIFICATION = '\\s*=\\s*'.self::ATTRIBUTE_VALUE;
   const string ATTRIBUTE =
   "\\s+".self::ATTRIBUTE_NAME.'('.self::ATTRIBUTE_VALUE_SPECIFICATION.')?';
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/HTMLBlock.php:32:2
@@ -29,7 +29,7 @@
     ')';
   const string ATTRIBUTE_VALUE_SPECIFICATION = "\\s*=\\s*".self::ATTRIBUTE_VALUE;
   const string ATTRIBUTE =
-  "\\s+".self::ATTRIBUTE_NAME.'('.self::ATTRIBUTE_VALUE_SPECIFICATION.')?';
+  '\\s+'.self::ATTRIBUTE_NAME.'('.self::ATTRIBUTE_VALUE_SPECIFICATION.')?';
 
   const dict<string, string> PARAGRAPH_INTERRUPTING_PATTERNS = dict[
     // GFM spec states that closing tag doesn't need to match opening tag
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/HTMLBlock.php:13:9
  Code:
  >Facebook\Markdown\Blocks\HTMLBlock as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/ListItem.php:13:9
  Code:
  >Facebook\Markdown\Blocks\ListItem as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Block.php:13:9
  Code:
  >Facebook\Markdown\Inlines\Context as InlineContext
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Block.php:14:9
  Code:
  >Facebook\Markdown\Blocks\Block as ASTBlock
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/TableExtension.php:181:53
@@ -178,7 +178,7 @@
       $definitely_row,
       Vec\map(
         $parts,
-        $part ==> Str\trim($part) |> Str\replace($$, "\\|", '|'),
+        $part ==> Str\trim($part) |> Str\replace($$, '\\|', '|'),
       ),
       $rest,
     );
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/TableExtension.php:14:2
  Code:
  >  TableExtension as ASTTableExtension
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/TableExtension.php:15:2
  Code:
  >  TableExtensionColumnAlignment as ColumnAlignment
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/IndentedCodeBlock.php:13:9
  Code:
  >Facebook\Markdown\Blocks\IndentedCodeBlock as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Paragraph.php:13:9
  Code:
  >Facebook\Markdown\Blocks\Paragraph as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/BlockQuote.php:13:9
  Code:
  >Facebook\Markdown\Blocks\BlockQuote as ASTNode
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Context.php:59:10
@@ -56,7 +56,7 @@
         self::ALL_BLOCK_TYPES,
         $class ==> Str\ends_with(
           Str\lowercase($class),
-          "\\".Str\lowercase($name).'extension',
+          '\\'.Str\lowercase($name).'extension',
         ),
       ),
     );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Context.php:71:8
@@ -68,7 +68,7 @@
       $this->disabledBlockTypes,
       $class ==> !Str\ends_with(
         Str\lowercase($class),
-        "\\".$name.'extension',
+        '\\'.$name.'extension',
       ),
     );
     return $this;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/Context.php:142:27
@@ -139,7 +139,7 @@
   public function popContext(string $context): this {
     $stack = $this->stacks[$context] ?? vec[];
     $count = C\count($stack) - 1;
-    invariant($count >= 0, "Trying to pop more than was pushed");
+    invariant($count >= 0, 'Trying to pop more than was pushed');
     $stack = Vec\take($stack, $count);
     $this->stacks[$context] = $stack;
     return $this;
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/unparsed-blocks/ThematicBreak.php:13:9
  Code:
  >Facebook\Markdown\Blocks\ThematicBreak as ASTNode
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/ParserContext.php:13:9
  Code:
  >Facebook\Markdown\UnparsedBlocks\Context as BlockContext
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/ParserContext.php:14:9
  Code:
  >Facebook\Markdown\Inlines\Context as InlineContext
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/Inline.php:13:9
  Code:
  >Facebook\Markdown\ASTNode as ASTNode
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/Emphasis.php:485:22
@@ -482,7 +482,7 @@
     }
 
     $previous = $markdown[$offset - 1];
-    if ($previous !== "\\" && $previous !== $first) {
+    if ($previous !== '\\' && $previous !== $first) {
       return true;
     }
 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/Emphasis.php:13:14
  Code:
  >Facebook\Markdown\Inlines\_Private\EmphasisStack as Stack
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/BackslashEscape.php:24:29
@@ -21,7 +21,7 @@
     string $string,
     int $offset,
   ): ?(Inline, int) {
-    if ($string[$offset] !== "\\") {
+    if ($string[$offset] !== '\\') {
       return null;
     }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/Context.php:82:56
@@ -79,7 +79,7 @@
       $this->disabledInlineTypes,
       Keyset\filter(
         self::ALL_INLINE_TYPES,
-        $class ==> Str\ends_with(Str\lowercase($class), "\\".$name.'extension'),
+        $class ==> Str\ends_with(Str\lowercase($class), '\\'.$name.'extension'),
       ),
     );
     return $this;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/Context.php:93:8
@@ -90,7 +90,7 @@
       $this->disabledInlineTypes,
       $class ==> !Str\ends_with(
         Str\lowercase($class),
-        "\\".Str\lowercase($name).'extension',
+        '\\'.Str\lowercase($name).'extension',
       ),
     );
     return $this;
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/Context.php:13:9
  Code:
  >Facebook\Markdown\UnparsedBlocks\Context as BlockContext
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/inlines/_Private/parse_with_blacklist.php:44:6
@@ -41,7 +41,7 @@
     list($inline, $new_offset) = $result;
     invariant(
       $new_offset > $offset,
-      "Failed to consume any data with %s",
+      'Failed to consume any data with %s',
       \get_class($inline),
     );
     $offset = $new_offset;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/RenderContext.php:38:51
@@ -35,7 +35,7 @@
   public function disableNamedExtension(string $extension): this {
     $this->enabledExtensions = Vec\filter(
       $this->enabledExtensions,
-      $obj ==> !Str\ends_with_ci(\get_class($obj), "\\".$extension.'Extension'),
+      $obj ==> !Str\ends_with_ci(\get_class($obj), '\\'.$extension.'Extension'),
     );
     return $this;
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/RenderContext.php:47:52
@@ -44,7 +44,7 @@
     $this->enabledExtensions = $this->extensions
       |> Vec\filter(
         $$,
-        $obj ==> Str\ends_with_ci(\get_class($obj), "\\".$extension.'Extension'),
+        $obj ==> Str\ends_with_ci(\get_class($obj), '\\'.$extension.'Extension'),
       )
       |> Vec\concat($$, $this->enabledExtensions)
       |> Vec\unique_by($$, $x ==> \get_class($x));
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/RenderContext.php:13:9
  Code:
  >Facebook\Markdown\Blocks\Document as Document
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/MarkdownRenderer.php:224:19
@@ -221,7 +221,7 @@
         $line ==> {
           $parsed = UnparsedBlocks\parse($ctx, $line)->getChildren();
           if (!C\firstx($parsed) is UnparsedBlocks\Paragraph) {
-            return "    ".$line;
+            return '    '.$line;
           }
           if (\preg_match('/^ {0,3}[=-]+ *$/', $line)) {
             return "\\".$line;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/MarkdownRenderer.php:227:19
@@ -224,7 +224,7 @@
             return "    ".$line;
           }
           if (\preg_match('/^ {0,3}[=-]+ *$/', $line)) {
-            return "\\".$line;
+            return '\\'.$line;
           }
           return $line;
         },
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/MarkdownRenderer.php:287:25
@@ -284,7 +284,7 @@
     Blocks\TableExtension::TCell $cell,
   ): string {
     return $this->renderNodes($cell)
-      |> Str\replace($$, "|", "\\|");
+      |> Str\replace($$, '|', "\\|");
   }
 
   <<__Override>>
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/MarkdownRenderer.php:287:30
@@ -284,7 +284,7 @@
     Blocks\TableExtension::TCell $cell,
   ): string {
     return $this->renderNodes($cell)
-      |> Str\replace($$, "|", "\\|");
+      |> Str\replace($$, "|", '\\|');
   }
 
   <<__Override>>
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/MarkdownRenderer.php:308:13
@@ -305,7 +305,7 @@
     Inlines\InlineWithPlainTextContent $node,
   ): string {
     if ($node is Inlines\BackslashEscape) {
-      return "\\".$node->getContent();
+      return '\\'.$node->getContent();
     }
     if ($node is Inlines\EntityReference) {
       // This matters if the entity reference is for whitespace: if we print
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/MarkdownRenderer.php:370:6
@@ -367,7 +367,7 @@
   protected function renderImage(Inlines\Image $node): string {
     $t = $node->getTitle();
     return Str\format(
-      "![%s](<%s>%s)",
+      '![%s](<%s>%s)',
       $this->renderNodes($node->getDescription()),
       $node->getSource(),
       $t === null ? '' : (' "'.$t.'"'),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/HTMLRenderer.php:269:12
@@ -266,7 +266,7 @@
     int $row_idx,
     Blocks\TableExtension::TRow $row,
   ): string {
-    $html = "<tr>";
+    $html = '<tr>';
     for ($i = 0; $i < C\count($row); ++$i) {
       $cell = $row[$i];
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/HTMLRenderer.php:290:6
@@ -287,7 +287,7 @@
       $alignment = ' align="'.$alignment.'"';
     }
     return
-      "<td".$alignment.'>'.
+      '<td'.$alignment.'>'.
       $this->renderNodes($cell).
       "</td>";
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/HTMLRenderer.php:292:6
@@ -289,7 +289,7 @@
     return
       "<td".$alignment.'>'.
       $this->renderNodes($cell).
-      "</td>";
+      '</td>';
   }
 
   <<__Override>>
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/render/Renderer.php:176:6
@@ -173,7 +173,7 @@
     }
 
     invariant_violation(
-      "Unhandled node type: %s",
+      'Unhandled node type: %s',
       \get_class($node),
     );
   }
Method __construct is final in the class InlineSequenceBlock, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/blocks/InlineSequenceBlock.php:21:2
@@ -18,7 +18,7 @@
 final class InlineSequenceBlock extends LeafBlock {
   private vec<Inlines\Inline> $children;
 
-  final public function __construct(
+  public function __construct(
     vec<?Inlines\Inline> $children,
   ) {
     $this->children = Vec\filter_nulls($children);
Method flatten is final in the class InlineSequenceBlock, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/blocks/InlineSequenceBlock.php:27:2
@@ -24,7 +24,7 @@
     $this->children = Vec\filter_nulls($children);
   }
 
-  final public static function flatten(?Inlines\Inline ...$children): this {
+  public static function flatten(?Inlines\Inline ...$children): this {
     return new self(vec($children));
   }
 
Method __construct is final in the class BlockSequence, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/blocks/BlockSequence.php:20:2
@@ -17,7 +17,7 @@
 final class BlockSequence extends LeafBlock {
   private vec<Block> $children;
 
-  final public function __construct(
+  public function __construct(
     vec<?Block> $children,
   ) {
     $this->children = Vec\filter_nulls($children);
Method flatten is final in the class BlockSequence, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/blocks/BlockSequence.php:26:2
@@ -23,7 +23,7 @@
     $this->children = Vec\filter_nulls($children);
   }
 
-  final public static function flatten(?Block ...$children): this {
+  public static function flatten(?Block ...$children): this {
     return new self(vec($children));
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/_Private/consume_link_title.php:46:17
@@ -43,7 +43,7 @@
       break;
     }
 
-    if ($chr === "\\") {
+    if ($chr === '\\') {
       if ($idx + 1 < $len) {
         $next = $input[$idx + 1];
         if (C\contains_key(ASCII_PUNCTUATION, $next)) {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/_Private/consume_link_title.php:102:17
@@ -99,7 +99,7 @@
       continue;
     }
 
-    if ($chr === "\\") {
+    if ($chr === '\\') {
       if ($idx + 1 < $len) {
         $next = $input[$idx + 1];
         if (C\contains_key(ASCII_PUNCTUATION, $next)) {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/src/_Private/get_html_entity_table.php:20:4
@@ -17,7 +17,7 @@
   $file = __DIR__.'/../../third-party/entities.json';
   invariant(
     \file_exists($file),
-    "Expected %s to exist",
+    'Expected %s to exist',
     $file,
   );
   $data = \json_decode(
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/tests/SpecTest.php:35:35
@@ -32,7 +32,7 @@
       }
       $start += Str\length(self::EXAMPLE_START);
       $newline = Str\search($text, "\n", $start);
-      invariant($newline !== null, "No newline after start marker");
+      invariant($newline !== null, 'No newline after start marker');
       $extension = Str\trim(Str\slice($text, $start, $newline - $start));
       $start = $newline;
       $end = Str\search($text, self::EXAMPLE_END, $start);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/tests/SpecTest.php:55:8
@@ -52,7 +52,7 @@
       $count = C\count($parts);
       invariant(
         $count === 1 || $count === 2,
-        "examples should have input and output, example %d has %d parts",
+        'examples should have input and output, example %d has %d parts',
         C\count($examples) + 1,
         $count,
       );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbmarkdown/tests/SpecTest.php:68:6
@@ -65,7 +65,7 @@
     }
     expect(C\count($examples))->toBeSame(
       self::EXAMPLE_COUNT,
-      "Did not get the expected number of examples",
+      'Did not get the expected number of examples',
     );
     return $examples;
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFunctionish.hack:181:30
@@ -178,7 +178,7 @@
 
       $multi_line_builder = (new HackBuilder($this->config))
         ->add($keywords)
-        ->addLine($this->name."(")
+        ->addLine($this->name.'(')
         ->indent()
         ->addLines($parameter_lines)
         ->unindent()
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFunctionish.hack:227:63
@@ -224,7 +224,7 @@
     if ($this->docBlock !== null && $this->docBlock !== '') {
       if ($this->generatedFrom) {
         $builder->addDocBlock(
-          $this->docBlock."\n(".$this->generatedFrom->render().")",
+          $this->docBlock."\n(".$this->generatedFrom->render().')',
         );
       } else {
         $builder->addDocBlock($this->docBlock);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenClass.hack:156:6
@@ -153,7 +153,7 @@
       $this->declComment,
       $this->isAbstract ? 'abstract ' : '',
       $this->isFinal ? 'final ' : '',
-      "class ".$this->name.$generics_dec,
+      'class '.$this->name.$generics_dec,
       $this->extendsClass !== null
         ? HackBuilder::DELIMITER."extends ".$this->extendsClass
         : '',
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenClass.hack:158:33
@@ -155,7 +155,7 @@
       $this->isFinal ? 'final ' : '',
       "class ".$this->name.$generics_dec,
       $this->extendsClass !== null
-        ? HackBuilder::DELIMITER."extends ".$this->extendsClass
+        ? HackBuilder::DELIMITER.'extends '.$this->extendsClass
         : '',
     );
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:160:12
@@ -157,7 +157,7 @@
       } else if (\preg_match($begin, $line) === 1) {
         if ($current_id !== null) {
           throw new PartiallyGeneratedCodeException(
-            "The manual section ".$current_id." was open before ".
+            'The manual section '.$current_id." was open before ".
             "the previous one was closed",
           );
         }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:160:46
@@ -157,7 +157,7 @@
       } else if (\preg_match($begin, $line) === 1) {
         if ($current_id !== null) {
           throw new PartiallyGeneratedCodeException(
-            "The manual section ".$current_id." was open before ".
+            "The manual section ".$current_id.' was open before '.
             "the previous one was closed",
           );
         }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:161:12
@@ -158,7 +158,7 @@
         if ($current_id !== null) {
           throw new PartiallyGeneratedCodeException(
             "The manual section ".$current_id." was open before ".
-            "the previous one was closed",
+            'the previous one was closed',
           );
         }
         if (!\preg_match($valid_begin, $line)) {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:166:48
@@ -163,7 +163,7 @@
         }
         if (!\preg_match($valid_begin, $line)) {
           throw
-            new PartiallyGeneratedCodeException("Invalid id specified: ".$line);
+            new PartiallyGeneratedCodeException('Invalid id specified: '.$line);
         }
 
         $chunk[] = $line;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:176:12
@@ -173,7 +173,7 @@
 
         if (C\contains($seen_ids, $current_id)) {
           throw new PartiallyGeneratedCodeException(
-            "Duplicate manual section id: ".$current_id,
+            'Duplicate manual section id: '.$current_id,
           );
         }
         $seen_ids[] = $current_id;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:186:8
@@ -183,7 +183,7 @@
     }
     if ($current_id !== null) {
       throw new PartiallyGeneratedCodeException(
-        "The manual section ".$current_id." was not closed at the end of code",
+        'The manual section '.$current_id." was not closed at the end of code",
       );
     }
     if ($code !== '') {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedCode.hack:186:42
@@ -183,7 +183,7 @@
     }
     if ($current_id !== null) {
       throw new PartiallyGeneratedCodeException(
-        "The manual section ".$current_id." was not closed at the end of code",
+        "The manual section ".$current_id.' was not closed at the end of code',
       );
     }
     if ($code !== '') {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/BaseCodeBuilder.hack:413:6
@@ -410,7 +410,7 @@
   final public function getCode(): string {
     invariant(
       !$this->wasGetCodeCalled,
-      "You may only call getCode() once on a given HackBuilder object.",
+      'You may only call getCode() once on a given HackBuilder object.',
     );
     $this->wasGetCodeCalled = true;
     return $this->code->detach();
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/BaseCodeBuilder.hack:13:14
  Code:
  >Facebook\HackCodegen\_Private\Vec as VecP
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedSignedSource.hack:37:11
@@ -34,7 +34,7 @@
   public static function getDocBlock(?string $comment = null): string {
     invariant($comment !== '', 'specify null instead of empty comments');
     $comment = ($comment === null) ? null : $comment."\n\n";
-    return "This file is partially generated. ".
+    return 'This file is partially generated. '.
       "Only make modifications between BEGIN MANUAL SECTION ".
       "and END MANUAL SECTION designators.\n\n".
       $comment.
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/PartiallyGeneratedSignedSource.hack:38:6
@@ -35,7 +35,7 @@
     invariant($comment !== '', 'specify null instead of empty comments');
     $comment = ($comment === null) ? null : $comment."\n\n";
     return "This file is partially generated. ".
-      "Only make modifications between BEGIN MANUAL SECTION ".
+      'Only make modifications between BEGIN MANUAL SECTION '.
       "and END MANUAL SECTION designators.\n\n".
       $comment.
       self::getSigningToken();
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenClassish.hack:13:14
  Code:
  >Facebook\HackCodegen\_Private\C as CP
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFile.hack:256:41
@@ -253,7 +253,7 @@
    *     setShebangLine('#!/usr/bin/env hhvm')
    */
   public function setShebangLine(string $shebang): this {
-    invariant(!\strpbrk($shebang, "\n"), "Expected single line");
+    invariant(!\strpbrk($shebang, "\n"), 'Expected single line');
     invariant(Str\starts_with($shebang, '#!'), 'Shebang lines start with #!');
     $this->shebang = $shebang;
     return $this;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenUsesTrait.hack:61:17
@@ -58,7 +58,7 @@
   public function render(): string {
     return (new HackBuilder($this->config))
       ->addInlineComment($this->comment)
-      ->addLinef("use %s;", $this->name)
+      ->addLinef('use %s;', $this->name)
       ->getCode();
   }
 }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackfmtFormatter.hack:68:22
@@ -65,6 +65,6 @@
     return Vec\map(
       $options,
       $option ==> \escapeshellarg($option),
-    ) |> Str\join($$, " ");
+    ) |> Str\join($$, ' ');
   }
 }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenShapeMember.hack:22:7
@@ -19,7 +19,7 @@
    ) {
      invariant(
        $type is string || $type is CodegenShape,
-       "You must provide either a string or shape",
+       'You must provide either a string or shape',
      );
    }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:76:51
@@ -73,7 +73,7 @@
     }
 
     $this
-      ->addWithSuggestedLineBreaks($func_call_line."(")
+      ->addWithSuggestedLineBreaks($func_call_line.'(')
       ->newLine()
       ->indent()
       ->addLinesWithSuggestedLineBreaks(Vec\map($params, $line ==> $line.','))
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:207:26
@@ -204,7 +204,7 @@
       case ContainerType::DICT:
       case ContainerType::KEYSET:
       case ContainerType::VEC:
-        $container_sign = "[";
+        $container_sign = '[';
         break;
       case ContainerType::IMM_MAP:
       case ContainerType::IMM_SET:
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:215:26
@@ -212,7 +212,7 @@
       case ContainerType::MAP:
       case ContainerType::SET:
       case ContainerType::VECTOR:
-        $container_sign = " {";
+        $container_sign = ' {';
         break;
       case ContainerType::SHAPE_TYPE:
       case ContainerType::PHP_ARRAY:
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:219:26
@@ -216,7 +216,7 @@
         break;
       case ContainerType::SHAPE_TYPE:
       case ContainerType::PHP_ARRAY:
-        $container_sign = "(";
+        $container_sign = '(';
         break;
     }
     return $this->addLine(((string)$type).$container_sign)->indent();
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:237:26
@@ -234,7 +234,7 @@
       case ContainerType::DICT:
       case ContainerType::KEYSET:
       case ContainerType::VEC:
-        $container_sign = "]";
+        $container_sign = ']';
         break;
       case ContainerType::IMM_MAP:
       case ContainerType::IMM_SET:
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:245:26
@@ -242,7 +242,7 @@
       case ContainerType::MAP:
       case ContainerType::SET:
       case ContainerType::VECTOR:
-        $container_sign = "}";
+        $container_sign = '}';
         break;
       case ContainerType::SHAPE_TYPE:
       case ContainerType::PHP_ARRAY:
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:249:26
@@ -246,7 +246,7 @@
         break;
       case ContainerType::SHAPE_TYPE:
       case ContainerType::PHP_ARRAY:
-        $container_sign = ")";
+        $container_sign = ')';
         break;
     }
     return $this->unindent()->add($container_sign);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/HackBuilder.hack:584:22
@@ -581,7 +581,7 @@
     Traversable<string> $params,
   ): this {
     return $this
-      ->addLine($name."(")
+      ->addLine($name.'(')
       ->indent()
       ->addLines(Vec\map($params, $line ==> $line.','))
       ->unindent()
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenEnum.hack:86:6
@@ -83,7 +83,7 @@
       ->ensureNewLine()
       ->addWithSuggestedLineBreaksf(
       '%s%s%s {',
-      "enum ".$this->name,
+      'enum '.$this->name,
       HackBuilder::DELIMITER.": ".$this->enumType,
       $this->isAs !== null ? HackBuilder::DELIMITER."as ".$this->isAs : '',
     );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenEnum.hack:87:29
@@ -84,7 +84,7 @@
       ->addWithSuggestedLineBreaksf(
       '%s%s%s {',
       "enum ".$this->name,
-      HackBuilder::DELIMITER.": ".$this->enumType,
+      HackBuilder::DELIMITER.': '.$this->enumType,
       $this->isAs !== null ? HackBuilder::DELIMITER."as ".$this->isAs : '',
     );
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenEnum.hack:88:52
@@ -85,7 +85,7 @@
       '%s%s%s {',
       "enum ".$this->name,
       HackBuilder::DELIMITER.": ".$this->enumType,
-      $this->isAs !== null ? HackBuilder::DELIMITER."as ".$this->isAs : '',
+      $this->isAs !== null ? HackBuilder::DELIMITER.'as '.$this->isAs : '',
     );
 
     if (!C\is_empty($this->members)) {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:176:51
@@ -173,7 +173,7 @@
     string $class,
   ): CodegenGeneratedFrom {
     return
-      new CodegenGeneratedFrom($this->getConfig(), "Generated from ".$class);
+      new CodegenGeneratedFrom($this->getConfig(), 'Generated from '.$class);
   }
 
   final public function codegenGeneratedFromMethod(
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:185:6
@@ -182,7 +182,7 @@
   ): CodegenGeneratedFrom {
     return new CodegenGeneratedFrom(
       $this->getConfig(),
-      "Generated from ".$class."::".$method."()",
+      'Generated from '.$class."::".$method."()",
     );
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:185:31
@@ -182,7 +182,7 @@
   ): CodegenGeneratedFrom {
     return new CodegenGeneratedFrom(
       $this->getConfig(),
-      "Generated from ".$class."::".$method."()",
+      "Generated from ".$class.'::'.$method."()",
     );
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:185:44
@@ -182,7 +182,7 @@
   ): CodegenGeneratedFrom {
     return new CodegenGeneratedFrom(
       $this->getConfig(),
-      "Generated from ".$class."::".$method."()",
+      "Generated from ".$class."::".$method.'()',
     );
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:196:6
@@ -193,7 +193,7 @@
   ): CodegenGeneratedFrom {
     return new CodegenGeneratedFrom(
       $this->getConfig(),
-      "Generated from ".$class."::".$method."()['".$key."']",
+      'Generated from '.$class."::".$method."()['".$key."']",
     );
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:196:31
@@ -193,7 +193,7 @@
   ): CodegenGeneratedFrom {
     return new CodegenGeneratedFrom(
       $this->getConfig(),
-      "Generated from ".$class."::".$method."()['".$key."']",
+      "Generated from ".$class.'::'.$method."()['".$key."']",
     );
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:210:8
@@ -207,7 +207,7 @@
       invariant(
         $last !== null,
         "Couldn't get the strack trace.  Please pass the script name to ".
-        "codegenGeneratedFromScript",
+        'codegenGeneratedFromScript',
       );
       $script = $this->codegenFile($last['file'])->getRelativeFileName();
     }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenFactoryTrait.hack:216:6
@@ -213,7 +213,7 @@
     }
     return new CodegenGeneratedFrom(
       $this->getConfig(),
-      "To re-generate this file run ".$script,
+      'To re-generate this file run '.$script,
     );
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/key-value-render/HackBuilderClassnameRenderer.hack:23:11
@@ -20,6 +20,6 @@
     IHackBuilderKeyRenderer<string>,
     IHackBuilderValueRenderer<string> {
   public function render(IHackCodegenConfig $_, string $value): string {
-    return "\\".$value.'::class';
+    return '\\'.$value.'::class';
   }
 }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenType.hack:59:6
@@ -56,7 +56,7 @@
   public function appendToBuilder(HackBuilder $builder): HackBuilder {
     invariant(
       $this->type !== null || $this->codegenShape !== null,
-      "You need to set either the type or the shape",
+      'You need to set either the type or the shape',
     );
     $builder->addf('%s %s = ', $this->keyword, $this->name);
     if ($this->type !== null) {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/CodegenType.hack:67:6
@@ -64,7 +64,7 @@
     }
     invariant(
       $this->codegenShape !== null,
-      "Somehow the type and the shape were null!",
+      'Somehow the type and the shape were null!',
     );
     return $builder->addRenderer($this->codegenShape)->closeStatement();
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/_Private/strip_hh_prefix.hack:66:46
@@ -63,7 +63,7 @@
     } else {
       if (
         ($c === 'H' || $c === 'h') &&
-        \strtoupper(\substr($str, $i, 3)) === "HH\\" &&
+        \strtoupper(\substr($str, $i, 3)) === 'HH\\' &&
         !\ctype_alnum($prev) &&
         $prev !== '_' &&
         $prev !== '\\'
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/_Private/Filesystem.hack:29:27
@@ -26,7 +26,7 @@
       return;
     }
     if (!\unlink($path)) {
-      throw new \Exception("Unable to remove `".$path."'.");
+      throw new \Exception('Unable to remove `'.$path."'.");
     }
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/_Private/Filesystem.hack:39:27
@@ -36,7 +36,7 @@
     \error_reporting($error_level);
 
     if ($data === false) {
-      throw new \Exception("Failed to read file `".$path."'.");
+      throw new \Exception('Failed to read file `'.$path."'.");
     }
 
     return $data;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/_Private/Filesystem.hack:51:27
@@ -48,7 +48,7 @@
     \error_reporting($error_level);
 
     if ($res === false) {
-      throw new \Exception("Failed to write file `".$path."'.");
+      throw new \Exception('Failed to write file `'.$path."'.");
     }
   }
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-codegen/src/_Private/Vec.hack:23:4
@@ -20,7 +20,7 @@
 function pop_backx<T>(inout Container<T> $list): T {
   invariant(
     !C\is_empty($list),
-    "%s called, but container is empty",
+    '%s called, but container is empty',
     __FUNCTION__,
   );
   $last = \array_pop(inout $list);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbexpect/src/Assert.hack:545:16
@@ -542,7 +542,7 @@
         $part = '['.\var_export($key, true).']';
       } else if (\is_object($actual)) {
         $actual_value = /* HH_FIXME[2011] */ $actual->$key;
-        $part = "->".$key;
+        $part = '->'.$key;
       } else {
         $actual_value = null;
         $part = null;
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbexpect/src/ExpectObj.hack:596:8
  Code:
  >        \HH\Asio\join($returned)
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/fbexpect/src/ExpectObj.hack:569:13
@@ -566,7 +566,7 @@
 
     if (!$exception) {
       throw new \Exception(
-        $msg.": Expected exception ".$exception_class." wasn't thrown",
+        $msg.': Expected exception '.$exception_class." wasn't thrown",
       );
     }
 
Facebook\XHP\Elements\Core\frag::stringifyAsync() overrides Facebook\XHP\Elements\Core\primitive::stringifyAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Frag.hack:21:2
@@ -18,6 +18,7 @@
  * appended to the element.
  */
 xhp class frag extends primitive {
+  <<__Override>>
   protected async function stringifyAsync(): Awaitable<string> {
     return await Vec\map_async(
       $this->getChildren(),
Facebook\XHP\Elements\Core\primitive::toStringAsync() overrides Facebook\XHP\Elements\Core\node::toStringAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Primitive.hack:23:2
@@ -20,6 +20,7 @@
 abstract xhp class primitive extends node {
   abstract protected function stringifyAsync(): Awaitable<string>;
 
+  <<__Override>>
   final public async function toStringAsync(): Awaitable<string> {
     $that = await $this->__flushSubtree();
     return await $that->stringifyAsync();
Facebook\XHP\Elements\Core\primitive::__flushSubtree() overrides Facebook\XHP\Elements\Core\node::__flushSubtree() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Primitive.hack:46:2
@@ -43,6 +43,7 @@
     $this->replaceChildren($children);
   }
 
+  <<__Override>>
   final protected async function __flushSubtree(): Awaitable<primitive> {
     await $this->__flushElementChildren();
     if (\Facebook\XHP\ChildValidation\is_enabled()) {
Do not use PHP equality - use "===" instead.
  Linter: Facebook\HHAST\NoPHPEqualityLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Node.hack:148:8
@@ -145,7 +145,7 @@
     }
 
     $children = vec[];
-    if ($selector[0] == '%') {
+    if ($selector[0] === '%') {
       $selector = Str\slice($selector, 1);
       foreach ($this->children as $child) {
         if ($child is node && $child->categoryOf($selector)) {
Do not use PHP equality - use "===" instead.
  Linter: Facebook\HHAST\NoPHPEqualityLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Node.hack:179:15
@@ -176,7 +176,7 @@
   final public function getFirstChild(?string $selector = null): ?\XHPChild {
     if ($selector === null) {
       return $this->children[0] ?? null;
-    } else if ($selector[0] == '%') {
+    } else if ($selector[0] === '%') {
       $selector = \substr($selector, 1);
       foreach ($this->children as $child) {
         if ($child is node && $child->categoryOf($selector)) {
`IncorrectTypeException` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Node.hack:12:0
@@ -9,7 +9,6 @@
 
 namespace Facebook\XHP\Elements\Core;
 
-use type Facebook\TypeAssert\IncorrectTypeException;
 use namespace Facebook\TypeAssert;
 use namespace HH\Lib\{C, Dict, Keyset, Str, Vec};
 
`TypeAssert` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Node.hack:13:0
@@ -10,7 +10,6 @@
 namespace Facebook\XHP\Elements\Core;
 
 use type Facebook\TypeAssert\IncorrectTypeException;
-use namespace Facebook\TypeAssert;
 use namespace HH\Lib\{C, Dict, Keyset, Str, Vec};
 
 <<__Sealed(primitive::class, element::class)>>
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Node.hack:57:10
@@ -54,7 +54,7 @@
       if (self::isSpreadKey($key)) {
         invariant(
           $value is node,
-          "Only XHP can be used with an attribute spread operator",
+          'Only XHP can be used with an attribute spread operator',
         );
         $this->spreadElementImpl($value);
       } else {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Node.hack:260:6
@@ -257,7 +257,7 @@
     invariant(
       self::emptyInstance()->__xhpChildrenDeclaration() ===
         self::__NO_LEGACY_CHILDREN_DECLARATION,
-      "Legacy XHP children declaration syntax is no longer supported",
+      'Legacy XHP children declaration syntax is no longer supported',
     );
     return 1; // any children
   }
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Element.hack:55:14
  Code:
  >Line 54:     while ($that is element) {
  >Line 55:       $that = await $that->__renderAndProcess();
Facebook\XHP\Elements\Core\element::toStringAsync() overrides Facebook\XHP\Elements\Core\node::toStringAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Element.hack:22:2
@@ -19,6 +19,7 @@
 abstract xhp class element extends node {
   abstract protected function renderAsync(): Awaitable<node>;
 
+  <<__Override>>
   final public async function toStringAsync(): Awaitable<string> {
     $that = await $this->__flushRenderedRootElement();
     $ret = await $that->toStringAsync();
Facebook\XHP\Elements\Core\element::__flushSubtree() overrides Facebook\XHP\Elements\Core\node::__flushSubtree() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Element.hack:28:2
@@ -25,6 +25,7 @@
     return $ret;
   }
 
+  <<__Override>>
   final protected async function __flushSubtree(): Awaitable<primitive> {
     $that = await $this->__flushRenderedRootElement();
     return await $that->__flushSubtree();
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/core/Element.hack:34:36
@@ -31,7 +31,7 @@
   }
 
   protected async function __renderAndProcess(): Awaitable<node> {
-    invariant(!$this->__isRendered, "Attempted to render XHP element twice");
+    invariant(!$this->__isRendered, 'Attempted to render XHP element twice');
     $this->__isRendered = true;
     if (\Facebook\XHP\ChildValidation\is_enabled()) {
       $this->validateChildren();
Function "anyNumberOf()" does not match conventions; consider renaming to "any_number_of"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/functions.hack:17:0
@@ -14,7 +14,7 @@
   return new Any();
 }
 
-function anyNumberOf<T as Constraint>(T $a): AnyNumberOf<T> {
+function any_number_of<T as Constraint>(T $a): AnyNumberOf<T> {
   return new AnyNumberOf($a);
 }
 
Function "anyOf()" does not match conventions; consider renaming to "any_of"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/functions.hack:21:0
@@ -18,7 +18,7 @@
   return new AnyNumberOf($a);
 }
 
-function anyOf<T as Constraint>(T $a, T $b, T ...$rest): AnyOf<T> {
+function any_of<T as Constraint>(T $a, T $b, T ...$rest): AnyOf<T> {
   return new AnyOf($a, $b, ...$rest);
 }
 
Function "atLeastOneOf()" does not match conventions; consider renaming to "at_least_one_of"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/functions.hack:25:0
@@ -22,7 +22,7 @@
   return new AnyOf($a, $b, ...$rest);
 }
 
-function atLeastOneOf<T as Constraint>(T $a): AtLeastOneOf<T> {
+function at_least_one_of<T as Constraint>(T $a): AtLeastOneOf<T> {
   return new AtLeastOneOf($a);
 }
 
Function "ofType()" does not match conventions; consider renaming to "of_type"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/functions.hack:39:0
@@ -36,7 +36,7 @@
   return new None();
 }
 
-function ofType<<<__Enforceable>> reify T>(): OfType<T> {
+function of_type<<<__Enforceable>> reify T>(): OfType<T> {
   return new OfType<T>();
 }
 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/private.hack:12:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/XHPChildDeclarationConsistencyValidation.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/XHPChildDeclarationConsistencyValidation.hack:11:14
  Code:
  >Facebook\XHP\Elements\Core as x
Method legacySerializeAsLeaf is final in the class AnyOf, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/AnyOf.hack:38:2
@@ -35,7 +35,7 @@
     return $it;
   }
 
-  final public function legacySerializeAsLeaf(): null {
+  public function legacySerializeAsLeaf(): null {
     return null;
   }
 }
Facebook\XHP\ChildValidation\Category::legacySerializeAsLeaf() overrides Facebook\XHP\ChildValidation\LeafConstraint::legacySerializeAsLeaf() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/Category.hack:18:2
@@ -15,6 +15,7 @@
   public function __construct(private string $category) {
   }
 
+  <<__Override>>
   public function legacySerializeAsLeaf(): (LegacyConstraintType, string) {
     return tuple(
       LegacyConstraintType::CATEGORY,
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/XHPChildValidation.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/XHPChildValidation.hack:11:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Facebook\XHP\ChildValidation\OfType::legacySerializeAsLeaf() overrides Facebook\XHP\ChildValidation\LeafConstraint::legacySerializeAsLeaf() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/OfType.hack:13:2
@@ -10,6 +10,7 @@
 namespace Facebook\XHP\ChildValidation;
 
 final class OfType<<<__Enforceable>> reify T> extends LeafConstraint {
+  <<__Override>>
   public function legacySerializeAsLeaf(): (LegacyConstraintType, string) {
     return tuple(
       LegacyConstraintType::CLASSNAME,
Facebook\XHP\ChildValidation\PCData::legacySerializeAsLeaf() overrides Facebook\XHP\ChildValidation\LeafConstraint::legacySerializeAsLeaf() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/children/PCData.hack:13:2
@@ -10,6 +10,7 @@
 namespace Facebook\XHP\ChildValidation;
 
 final class PCData extends LeafConstraint {
+  <<__Override>>
   public function legacySerializeAsLeaf(): (LegacyConstraintType, mixed) {
     return tuple(LegacyConstraintType::PCDATA, null);
   }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/XHPHTMLHelpers.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/q/Q.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Data.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Dt.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Dl.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
x:doctype::stringifyAsync() overrides Facebook\XHP\Elements\Core\primitive::stringifyAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Doctype.hack:27:2
@@ -24,6 +24,7 @@
   }
 
 
+  <<__Override>>
   protected async function stringifyAsync(): Awaitable<string> {
     return '<!DOCTYPE html>'.
       (await self::renderChildAsync(C\onlyx($this->getChildren())));
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Doctype.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Doctype.hack:13:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Div.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Del.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Dd.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Dfn.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Details.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Dialog.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/d/Datalist.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/a/A.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/a/Audio.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/a/Article.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/a/Abbr.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/a/Address.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/a/Aside.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/k/Kbd.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/u/U.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/u/Ul.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/f/Figure.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/f/Fieldset.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/f/Figcaption.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/f/Form.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/f/Footer.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/p/Pre.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/p/Progress.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/p/Picture.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/p/P.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/b/Bdo.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/b/Bdi.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/b/B.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/b/Blockquote.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/b/Button.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/b/Body.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/i/Ins.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/i/I.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/o/Optgroup.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/o/Object.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/o/Ol.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/o/Output.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/v/Video.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/v/Var.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Sup.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Select.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Small.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Samp.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Strong.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Span.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Section.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Summary.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/S.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/s/Sub.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/e/Em.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/e/Embed.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Tr.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Time.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Td.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Tt.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Th.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Table.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Thead.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Tfoot.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/t/Tbody.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/r/Rtc.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/r/Rp.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/r/Rb.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/r/Rt.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/r/Ruby.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/m/Mark.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/m/Meter.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/m/Map.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/m/Main.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/m/Menu.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/n/Nav.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/n/Noscript.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/H2.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/Head.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/H3.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/H4.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/Html.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/H1.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/Header.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/Hgroup.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/H5.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/h/H6.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/Canvas.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/Colgroup.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/Code.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/Caption.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/Cite.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
x:conditional_comment::stringifyAsync() overrides Facebook\XHP\Elements\Core\primitive::stringifyAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/ConditionalComment.hack:31:2
@@ -28,6 +28,7 @@
   }
 
 
+  <<__Override>>
   protected async function stringifyAsync(): Awaitable<string> {
     $children = $this->getChildren();
     $html = '<!--[if '.$this->:if.']>';
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/ConditionalComment.hack:32:4
  Code:
  >    $children 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/ConditionalComment.hack:11:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/c/ConditionalComment.hack:18:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/l/Li.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/l/Label.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/tags/l/Legend.hack:10:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/HasXHPHTMLHelpers.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/XHPAttributeClobbering_DEPRECATED.hack:92:4
@@ -89,7 +89,7 @@
   final private function transferAttributesImpl(
     x\node $target,
     ?keyset<string> $ignore = null,
-    bool $remove = false,
+    bool $_remove = false,
   ): void {
     $ignore ??= :xhp:html_element::__xhpAttributeDeclaration();
 
`_Private` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/XHPAttributeClobbering_DEPRECATED.hack:11:0
@@ -8,7 +8,6 @@
  */
 
 use namespace Facebook\XHP\Elements\Core as x;
-use namespace Facebook\XHP\_Private;
 use namespace HH\Lib\{C, Dict};
 
 interface HasXHPAttributeClobbering_DEPRECATED extends HasXHPHTMLHelpers {
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/XHPAttributeClobbering_DEPRECATED.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
xhp:html_element::stringifyAsync() overrides Facebook\XHP\Elements\Core\primitive::stringifyAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/Element.hack:136:2
@@ -133,6 +133,7 @@
     return $buf;
   }
 
+  <<__Override>>
   protected async function stringifyAsync(): Awaitable<string> {
     $buf = $this->renderBaseAttrs().'>';
     $buf .= await Vec\map_async(
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/Element.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/Singleton.hack:14:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/html/PcdataElement.hack:13:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/Exception.hack:13:0
@@ -10,7 +10,6 @@
 namespace Facebook\XHP;
 
 use namespace Facebook\XHP\Elements\Core as x;
-use namespace HH\Lib\Str;
 
 class Exception extends \Exception {
   protected static function getElementName(x\node $that): string {
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/Exception.hack:12:14
  Code:
  >Facebook\XHP\Elements\Core as x
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/InvalidChildrenException.hack:22:6
@@ -19,7 +19,7 @@
       self::getElementName($that).
       '` was rendered with '.
       "invalid children.\n\n".
-      "$that->source\n\n".
+$that->source."\n\n".
       "Verified $index children before failing.\n\n".
       "Children expected:\n".
       $that->__getChildrenDeclaration().
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/InvalidChildrenException.hack:23:6
@@ -20,7 +20,7 @@
       '` was rendered with '.
       "invalid children.\n\n".
       "$that->source\n\n".
-      "Verified $index children before failing.\n\n".
+      "Verified ".$index." children before failing.\n\n".
       "Children expected:\n".
       $that->__getChildrenDeclaration().
       "\n\n".
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/InvalidChildrenException.hack:13:14
  Code:
  >Facebook\XHP\Elements\Core as x
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/ClassException.hack:20:6
@@ -17,7 +17,7 @@
       'Exception in class `'.
       self::getElementName($that).
       "`\n\n".
-      "$that->source\n\n".
+$that->source."\n\n".
       $msg,
     );
   }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/ClassException.hack:12:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/AttributeRequiredException.hack:12:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/CoreRenderException.hack:12:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/exceptions/AttributeNotSupportedException.hack:12:14
  Code:
  >Facebook\XHP\Elements\Core as x
Static method "IsSpecial()" in class "ReflectionXHPAttribute" does not match conventions; consider renaming to "isSpecial"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPAttribute.hack:103:2
@@ -100,7 +100,7 @@
    * Returns true if the attribute is a data- or aria- attribute.
    */
   <<__Memoize>>
-  public static function IsSpecial(string $attr): bool {
+  public static function isSpecial(string $attr): bool {
     return strlen($attr) >= 6 &&
       $attr[4] === '-' &&
       C\contains_key(self::$specialAttributes, substr($attr, 0, 4));
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPAttribute.hack:65:4
  Code:
  >    $t 
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPAttribute.hack:83:4
  Code:
  >    $t 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPClass.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
`x` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPChildrenDeclaration.hack:11:0
@@ -8,7 +8,6 @@
  */
 
 use type Facebook\TypeAssert\IncorrectTypeException;
-use namespace Facebook\XHP\Elements\Core as x;
 use namespace Facebook\TypeSpec;
 
 enum XHPChildrenDeclarationType: int {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPChildrenDeclaration.hack:62:6
@@ -59,7 +59,7 @@
     }
 
     throw new Exception(
-      "Tried to get child expression for XHP class ".
+      'Tried to get child expression for XHP class '.
       \Facebook\XHP\class2element(get_class($this->context)).
       ", but it does not have an expressions.",
     );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPChildrenDeclaration.hack:64:6
@@ -61,7 +61,7 @@
     throw new Exception(
       "Tried to get child expression for XHP class ".
       \Facebook\XHP\class2element(get_class($this->context)).
-      ", but it does not have an expressions.",
+      ', but it does not have an expressions.',
     );
   }
 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/src/reflection/ReflectionXHPChildrenDeclaration.hack:11:14
  Code:
  >Facebook\XHP\Elements\Core as x
async:test::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AsyncTest.hack:17:2
@@ -14,6 +14,7 @@
 
 xhp class async:test extends x\element {
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div>{$this->getChildren()}</div>;
   }
test:xfrag_wrap::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AsyncTest.hack:24:2
@@ -21,6 +21,7 @@
 
 xhp class test:xfrag_wrap extends x\element {
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <x:frag>{$this->getChildren()}</x:frag>;
   }
test:async_xfrag_wrap::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AsyncTest.hack:31:2
@@ -28,6 +28,7 @@
 
 xhp class test:async_xfrag_wrap extends x\element {
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <x:frag>{$this->getChildren()}</x:frag>;
   }
async:par_test::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AsyncTest.hack:42:2
@@ -39,6 +39,7 @@
 
   public static vec<(string, string)> $log = vec[];
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     $label = $this->:label;
     self::$log[] = tuple($label, 'start');
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AsyncTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
test:contexts::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPContextsTest.hack:14:2
@@ -11,6 +11,7 @@
 use function Facebook\FBExpect\expect;
 
 xhp class test:contexts extends x\element {
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return
       <div>
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPContextsTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
test:attribute_types::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AttributesTest.hack:30:2
@@ -27,6 +27,7 @@
     TMyTestShape myshape,
     num mynum;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:required_attributes::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AttributesTest.hack:38:2
@@ -35,6 +35,7 @@
 xhp class test:required_attributes extends x\element {
   attribute string mystring @required;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div>{$this->:mystring}</div>;
   }
test:default_attributes::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AttributesTest.hack:46:2
@@ -43,6 +43,7 @@
 xhp class test:default_attributes extends x\element {
   attribute string mystring = 'mydefault';
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div>{$this->:mystring}</div>;
   }
test:callable_attribute::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AttributesTest.hack:55:2
@@ -52,6 +52,7 @@
   attribute
     /* HH_FIXME[2049]: callable is an invalid Hack type */
     callable foo; // unsupported in 2.0+
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     $x = $this->getAttribute('foo');
     return <div />;
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AttributesTest.hack:56:4
  Code:
  >    $x 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/AttributesTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
test:verbatim_root::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/TestChildFlushing.hack:18:2
@@ -15,6 +15,7 @@
 xhp class test:verbatim_root extends x\element {
   attribute x\node root @required;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return $this->:root;
   }
test:verbatim_root:async::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/TestChildFlushing.hack:27:2
@@ -24,6 +24,7 @@
 
   attribute x\node root @required;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return $this->:root;
   }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/TestChildFlushing.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
ExampleUnsafeAttribute::toHTMLString() overrides Facebook\XHP\UnsafeAttributeValue::toHTMLString() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/UnsafeInterfacesTest.hack:34:2
@@ -31,6 +31,7 @@
   public function __construct(public string $htmlString) {
   }
 
+  <<__Override>>
   public function toHTMLString(): string {
     return $this->htmlString;
   }
`x` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/UnsafeInterfacesTest.hack:10:0
@@ -7,7 +7,6 @@
  *
  */
 
-use namespace Facebook\XHP\Elements\Core as x;
 use function Facebook\FBExpect\expect;
 
 // Please see MIGRATING.md for information on how these should be used in
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/UnsafeInterfacesTest.hack:66:12
@@ -63,7 +63,7 @@
 
   public async function testUnsafeAttribute(): Awaitable<void> {
     // without using XHPUnsafeAttributeValue, each &amp; will be double-escaped as &amp;amp;
-    $attr = "foo &amp;&amp; bar";
+    $attr = 'foo &amp;&amp; bar';
     $xhp = <div onclick={$attr} />;
     expect(await $xhp->toStringAsync())->toEqual(
       '<div onclick="foo &amp;amp;&amp;amp; bar"></div>',
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/UnsafeInterfacesTest.hack:73:42
@@ -70,7 +70,7 @@
     );
 
     // using XHPUnsafeAttributeValue the &amp; is not double escaped
-    $escaped = new ExampleUnsafeAttribute("foo &amp;&amp; bar");
+    $escaped = new ExampleUnsafeAttribute('foo &amp;&amp; bar');
     $xhp = <div />;
     $xhp->forceAttribute('onclick', $escaped);
     expect(await $xhp->toStringAsync())->toEqual(
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/UnsafeInterfacesTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
test:renders_primitive::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/BasicsTest.hack:15:2
@@ -12,6 +12,7 @@
 use namespace HH\Lib\C;
 
 xhp class test:renders_primitive extends x\element {
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <x:frag><div>123</div></x:frag>;
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/BasicsTest.hack:40:9
@@ -37,7 +37,7 @@
   }
 
   public async function testInterpolation(): Awaitable<void> {
-    $x = "Herp";
+    $x = 'Herp';
     $xhp = <div>{$x}</div>;
     expect(await $xhp->toStringAsync())->toEqual('<div>Herp</div>');
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/BasicsTest.hack:55:17
@@ -52,7 +52,7 @@
   }
 
   public async function testEscaping(): Awaitable<void> {
-    $xhp = <div>{"foo<SCRIPT>bar"}</div>;
+    $xhp = <div>{'foo<SCRIPT>bar'}</div>;
     expect(await $xhp->toStringAsync())->toEqual(
       '<div>foo&lt;SCRIPT&gt;bar</div>',
     );
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/BasicsTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
MyTestNS\div::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:16:4
@@ -13,6 +13,7 @@
 
   /** Intentionally conflicting name */
   xhp class div extends x\element {
+    <<__Override>>
     protected async function renderAsync(): Awaitable<x\node> {
       return
         <:div>
MyTestNS\useswithinnamespace::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:31:4
@@ -28,6 +28,7 @@
   }
 
   xhp class useswithinnamespace extends x\element {
+    <<__Override>>
     protected async function renderAsync(): Awaitable<x\node> {
       return
         <:dl>
`aliaseddiv` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:53:2
@@ -50,8 +50,7 @@
 namespace {
 
   use function Facebook\FBExpect\expect;
-  use type MyTestNS\div as aliaseddiv;
-  use namespace MyTestNS as AliasedNS;
+    use namespace MyTestNS as AliasedNS;
 
   class XHPNamespaceTest extends Facebook\HackTest\HackTest {
     public async function testQualifiedReference(): Awaitable<void> {
`AliasedNS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:54:2
@@ -51,8 +51,7 @@
 
   use function Facebook\FBExpect\expect;
   use type MyTestNS\div as aliaseddiv;
-  use namespace MyTestNS as AliasedNS;
-
+  
   class XHPNamespaceTest extends Facebook\HackTest\HackTest {
     public async function testQualifiedReference(): Awaitable<void> {
       expect(await (<MyTestNS:div>foo</MyTestNS:div>)->toStringAsync())
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:53:11
  Code:
  >MyTestNS\div as aliaseddiv
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPNamespaceTest.hack:54:16
  Code:
  >MyTestNS as AliasedNS
test:hack_enum_attribute::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/HackEnumAttributesTest.hack:20:2
@@ -17,6 +17,7 @@
 
 xhp class test:hack_enum_attribute extends x\element {
   attribute TestEnum foo @required;
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     $foo = TestEnum::getNames()[$this->:foo];
     return <div>{$foo}</div>;
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/HackEnumAttributesTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:237:13
  Code:
  >Line 236:     foreach ($elems as $elem) {
  >Line 237:       expect(await $elem->toStringAsync())->toEqual('<div></div>');
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:262:13
  Code:
  >Line 260:     foreach ($elems as $elem) {
  >Line 262:       expect(await $elem->toStringAsync())->toEqual('<div></div>');
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:336:8
  Code:
  >Line 332:     foreach ($elems as $elem) {
  >Line 336:         await $elem->toStringAsync();
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:354:13
  Code:
  >Line 352:     foreach ($elems as $elem) {
  >Line 354:       expect(await $elem->toStringAsync())->toEqual('<div></div>');
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:362:13
  Code:
  >Line 360:     foreach ($elems as $elem) {
  >Line 362:       expect(await $elem->toStringAsync())->toEqual('<div></div>');
test:new_child_declaration_only::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:22:2
@@ -19,6 +19,7 @@
     return XHPChild\ofType<:div>();
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <x:frag>{$this->getChildren()}</x:frag>;
   }
test:new_and_old_child_declarations::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:35:2
@@ -32,6 +32,7 @@
     return XHPChild\ofType<:div>();
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:old_child_declaration_only::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:48:2
@@ -45,6 +45,7 @@
   }
 
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <x:frag>{$this->getChildren()}</x:frag>;
   }
test:any_children::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:59:2
@@ -56,6 +56,7 @@
     return XHPChild\any();
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:no_children::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:70:2
@@ -67,6 +67,7 @@
     return XHPChild\empty();
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:single_child::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:81:2
@@ -78,6 +78,7 @@
     return XHPChild\ofType<:div>();
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:optional_child::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:92:2
@@ -89,6 +89,7 @@
     return XHPChild\optional(XHPChild\ofType<:div>());
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:any_number_of_child::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:103:2
@@ -100,6 +100,7 @@
     return XHPChild\anyNumberOf(XHPChild\ofType<:div>());
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:at_least_one_child::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:114:2
@@ -111,6 +111,7 @@
     return XHPChild\atLeastOneOf(XHPChild\ofType<:div>());
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:two_children::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:125:2
@@ -122,6 +122,7 @@
     return XHPChild\sequence(XHPChild\ofType<:div>(), XHPChild\ofType<:div>());
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:three_children::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:140:2
@@ -137,6 +137,7 @@
     );
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:either_of_two_children::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:152:2
@@ -149,6 +149,7 @@
     return XHPChild\anyOf(XHPChild\ofType<:div>(), XHPChild\ofType<:code>());
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:any_of_three_children::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:167:2
@@ -164,6 +164,7 @@
     );
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:nested_rule::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:182:2
@@ -179,6 +179,7 @@
     );
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:pcdata_child::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:193:2
@@ -190,6 +190,7 @@
     return XHPChild\pcdata();
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div>{$this->getChildren()}</div>;
   }
test:category_child::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:204:2
@@ -201,6 +201,7 @@
     return XHPChild\category('%flow');
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:has_comma_category::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:212:2
@@ -209,6 +209,7 @@
 xhp class test:has_comma_category extends x\element {
   category %foo:bar;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:needs_comma_category::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:223:2
@@ -220,6 +220,7 @@
     return XHPChild\category('%foo:bar');
   }
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:314:6
  Code:
  >      $exception 
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ChildRuleTest.hack:13:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
test:no_xhphelpers::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:17:2
@@ -14,6 +14,7 @@
   use XHPHTMLHelpers;
   attribute :xhp:html_element;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:xhphelpers::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:26:2
@@ -23,6 +23,7 @@
   use XHPAttributeClobbering_DEPRECATED;
   attribute :xhp:html_element;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div>{$this->getChildren()}</div>;
   }
test:async:no_xhphelpers::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:35:2
@@ -32,6 +32,7 @@
   use XHPHTMLHelpers;
   attribute :xhp:html_element;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:async:xhphelpers::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:44:2
@@ -41,6 +41,7 @@
   use XHPAttributeClobbering_DEPRECATED;
   attribute :xhp:html_element;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
test:with_class_on_root::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:53:2
@@ -50,6 +50,7 @@
   use XHPAttributeClobbering_DEPRECATED;
   attribute :xhp:html_element;
 
+  <<__Override>>
   protected async function renderAsync(): Awaitable<x\node> {
     return <div class="rootClass" />;
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:100:17
@@ -97,7 +97,7 @@
 
   public async function testAddClassWithoutHelpers(): Awaitable<void> {
     $x = <test:no_xhphelpers class="foo" />;
-    $x->addClass("bar");
+    $x->addClass('bar');
     $x->conditionClass(true, "herp");
     $x->conditionClass(false, "derp");
     expect($x->:class)->toEqual('foo bar herp');
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:101:29
@@ -98,7 +98,7 @@
   public async function testAddClassWithoutHelpers(): Awaitable<void> {
     $x = <test:no_xhphelpers class="foo" />;
     $x->addClass("bar");
-    $x->conditionClass(true, "herp");
+    $x->conditionClass(true, 'herp');
     $x->conditionClass(false, "derp");
     expect($x->:class)->toEqual('foo bar herp');
     expect(await $x->toStringAsync())->toEqual("<div></div>");
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:102:30
@@ -99,7 +99,7 @@
     $x = <test:no_xhphelpers class="foo" />;
     $x->addClass("bar");
     $x->conditionClass(true, "herp");
-    $x->conditionClass(false, "derp");
+    $x->conditionClass(false, 'derp');
     expect($x->:class)->toEqual('foo bar herp');
     expect(await $x->toStringAsync())->toEqual("<div></div>");
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:104:47
@@ -101,7 +101,7 @@
     $x->conditionClass(true, "herp");
     $x->conditionClass(false, "derp");
     expect($x->:class)->toEqual('foo bar herp');
-    expect(await $x->toStringAsync())->toEqual("<div></div>");
+    expect(await $x->toStringAsync())->toEqual('<div></div>');
   }
 
   public async function testAddClassWithHelpers(): Awaitable<void> {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:109:17
@@ -106,7 +106,7 @@
 
   public async function testAddClassWithHelpers(): Awaitable<void> {
     $x = <test:xhphelpers class="foo" />;
-    $x->addClass("bar");
+    $x->addClass('bar');
     $x->conditionClass(true, "herp");
     $x->conditionClass(false, "derp");
     expect($x->:class)->toEqual('foo bar herp');
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:110:29
@@ -107,7 +107,7 @@
   public async function testAddClassWithHelpers(): Awaitable<void> {
     $x = <test:xhphelpers class="foo" />;
     $x->addClass("bar");
-    $x->conditionClass(true, "herp");
+    $x->conditionClass(true, 'herp');
     $x->conditionClass(false, "derp");
     expect($x->:class)->toEqual('foo bar herp');
     expect(await $x->toStringAsync())->toEqual(
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:111:30
@@ -108,7 +108,7 @@
     $x = <test:xhphelpers class="foo" />;
     $x->addClass("bar");
     $x->conditionClass(true, "herp");
-    $x->conditionClass(false, "derp");
+    $x->conditionClass(false, 'derp');
     expect($x->:class)->toEqual('foo bar herp');
     expect(await $x->toStringAsync())->toEqual(
       '<div class="foo bar herp"></div>',
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/XHPAttributeClobbering_DEPRECATEDTest.hack:10:14
  Code:
  >Facebook\XHP\Elements\Core as x
test:for_reflection::renderAsync() overrides Facebook\XHP\Elements\Core\element::renderAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ReflectionTest.hack:34:2
@@ -31,6 +31,7 @@
 
   category %herp, %derp;
 
+  <<__Override>>
   public async function renderAsync(): Awaitable<x\node> {
     return <div />;
   }
ReflectionTest::beforeEachTestAsync() overrides Facebook\HackTest\HackTest::beforeEachTestAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ReflectionTest.hack:42:2
@@ -39,6 +39,7 @@
 class ReflectionTest extends Facebook\HackTest\HackTest {
   private ?ReflectionXHPClass $rxc;
 
+  <<__Override>>
   public async function beforeEachTestAsync(): Awaitable<void> {
     $this->rxc = new ReflectionXHPClass(:test:for_reflection::class);
   }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ReflectionTest.hack:12:14
  Code:
  >Facebook\XHP\Elements\Core as x
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/xhp-lib/tests/ReflectionTest.hack:13:14
  Code:
  >Facebook\XHP\ChildValidation as XHPChild
Static method "ParameterName()" in class "UriParameterCodegenArgumentSpec" does not match conventions; consider renaming to "parameterName"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router-codegen/src/uriparameters/spec/UriParameterCodegenArgumentSpec.hack:28:2
@@ -25,7 +25,7 @@
     return $renderer($param, $value_variable);
   }
 
-  public static function ParameterName(): this {
+  public static function parameterName(): this {
     return new self(
       ($param, $_value) ==> \var_export($param->getName(), true),
     );
Static method "ParameterValue()" in class "UriParameterCodegenArgumentSpec" does not match conventions; consider renaming to "parameterValue"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router-codegen/src/uriparameters/spec/UriParameterCodegenArgumentSpec.hack:34:2
@@ -31,7 +31,7 @@
     );
   }
 
-  public static function ParameterValue(): this {
+  public static function parameterValue(): this {
     return new self(
       ($_param, $value) ==> {
         invariant(
Static method "Custom()" in class "UriParameterCodegenArgumentSpec" does not match conventions; consider renaming to "custom"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router-codegen/src/uriparameters/spec/UriParameterCodegenArgumentSpec.hack:47:2
@@ -44,7 +44,7 @@
     );
   }
 
-  public static function Custom(self::TRenderer $renderer): this {
+  public static function custom(self::TRenderer $renderer): this {
     return new self($renderer);
   }
 }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router-codegen/src/uriparameters/spec/EnumParameterCodegenSpec.hack:12:9
  Code:
  >Facebook\HackRouter\UriParameterCodegenArgumentSpec as Args
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router-codegen/src/uriparameters/spec/SimpleParameterCodegenSpec.hack:12:9
  Code:
  >Facebook\HackRouter\UriParameterCodegenArgumentSpec as Args
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hack-router-codegen/tests/examples/codegen/lookup-path.php:2:0
@@ -1,5 +1,5 @@
 #!/usr/bin/env hhvm
-<?hh // partial
+<?hh
 /**
  * This file is partially generated. Only make modifications between BEGIN
  * MANUAL SECTION and END MANUAL SECTION designators.
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/difflib/src/ColoredUnifiedDiff.php:84:38
@@ -81,7 +81,7 @@
       $lines = Vec\drop($lines, 1);
 
       if ($line === '') {
-        invariant(C\is_empty($lines), "Blank line was not last line");
+        invariant(C\is_empty($lines), 'Blank line was not last line');
         break;
       }
       if ($line[0] === '@') {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/difflib/src/StringDiff.php:87:22
@@ -84,7 +84,7 @@
     $hunks = $this->getHunks($context);
     return Vec\map($hunks, $hunk ==> $this->getUnifiedDiffHunk($hunk))
       |> Vec\filter_nulls($$)
-      |> Str\join($$, "");
+      |> Str\join($$, '');
   }
 
   private function getUnifiedDiffHunk(
Method join is final in the class CLIColoredUnifiedDiff, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/difflib/src/CLIColoredUnifiedDiff.php:62:2
@@ -60,7 +60,7 @@
   }
 
   <<__Override>>
-  final protected static function join(vec<string> $lines): string {
+  protected static function join(vec<string> $lines): string {
     return Str\join($lines, "\n")."\n";
   }
 
Method colorDeleteLineWithIntralineEdits is final in the class CLIColoredUnifiedDiff, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/difflib/src/CLIColoredUnifiedDiff.php:67:2
@@ -65,7 +65,7 @@
   }
 
   <<__Override>>
-  final protected static function colorDeleteLineWithIntralineEdits(
+  protected static function colorDeleteLineWithIntralineEdits(
     vec<DiffOp<string>> $ops,
   ): string {
     $line = self::DELETE_COLOR.'-';
Method colorInsertLineWithIntralineEdits is final in the class CLIColoredUnifiedDiff, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/difflib/src/CLIColoredUnifiedDiff.php:88:2
@@ -86,7 +86,7 @@
   }
 
   <<__Override>>
-  final protected static function colorInsertLineWithIntralineEdits(
+  protected static function colorInsertLineWithIntralineEdits(
     vec<DiffOp<string>> $ops,
   ): string {
     $line = self::INSERT_COLOR.'+';
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/difflib/src/Diff.php:76:33
@@ -73,7 +73,7 @@
 
     $prev = tuple(0, 0);
     foreach ($moves as list($from, $to)) {
-      invariant($from === $prev, "Missed a step");
+      invariant($from === $prev, 'Missed a step');
       list($x, $y) = $from;
       $prev = $to;
       if ($to === tuple($x + 1, $y + 1)) {
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/OptionParsingTest.hack:31:15
@@ -28,7 +28,7 @@
   }
 
   public function testLongFlag(): void {
-    list($cli, $stdout, $_) = self::cli('--flag1');
+    list($cli, $_stdout, $_) = self::cli('--flag1');
     expect($cli->flag1)->toBeTrue();
   }
 
`Vec` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/OptionParsingTest.hack:12:0
@@ -9,7 +9,6 @@
 
 namespace Facebook\CLILib;
 
-use namespace HH\Lib\Vec;
 use function Facebook\FBExpect\expect;
 
 final class OptionParsingTest extends TestCase {
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLITrait.hack:72:6
  Code:
  >Line 71:     while (!$in->isEndOfFile()) {
  >Line 72:       await $out->writeAsync('> ');
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLITrait.hack:74:14
  Code:
  >Line 71:     while (!$in->isEndOfFile()) {
  >Line 74:       $line = await $in->readLineAsync();
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLITrait.hack:77:8
  Code:
  >Line 71:     while (!$in->isEndOfFile()) {
  >Line 77:         await $err->writeAsync("Usage: (exit <code>|echo foo bar ....\n");
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLITrait.hack:84:10
  Code:
  >Line 71:     while (!$in->isEndOfFile()) {
  >Line 84:           await $out->writeAsync($args."\n");
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLITrait.hack:89:12
  Code:
  >Line 71:     while (!$in->isEndOfFile()) {
  >Line 89:             await $err->writeAsync("Exit code must be numeric.\n");
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLITrait.hack:94:10
  Code:
  >Line 71:     while (!$in->isEndOfFile()) {
  >Line 94:           await $err->writeAsync("Invalid command\n");
`expect` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCase.hack:13:0
@@ -10,7 +10,6 @@
 namespace Facebook\CLILib;
 
 use namespace HH\Lib\Vec;
-use function Facebook\FBExpect\expect;
 
 abstract class TestCase extends \Facebook\HackTest\HackTest {
   protected static function makeCLI<T as CLIBase>(
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCase.hack:17:23
@@ -14,7 +14,7 @@
 
 abstract class TestCase extends \Facebook\HackTest\HackTest {
   protected static function makeCLI<T as CLIBase>(
-    classname<T> $cli, 
+    classname<T> $cli,
     string ...$argv
   ): (T, TestLib\StringOutput, TestLib\StringOutput) {
     // $argv[0] is the executable
`Vec` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/HelpTest.hack:12:0
@@ -9,7 +9,6 @@
 
 namespace Facebook\CLILib;
 
-use namespace HH\Lib\Vec;
 use function Facebook\FBExpect\expect;
 
 final class HelpTest extends TestCase {
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/InteractivityTest.hack:49:26
@@ -46,7 +46,7 @@
   }
 
   public async function testSingleCommandAfterStart(): Awaitable<void> {
-    list($cli, $in, $out, $err) = $this->getCLI();
+    list($cli, $in, $out, $_err) = $this->getCLI();
     concurrent {
       $ret = await $cli->mainAsync();
       await async {
`Tuple`, `Vec` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/InteractivityTest.hack:12:0
@@ -9,7 +9,6 @@
 
 namespace Facebook\CLILib;
 
-use namespace HH\Lib\{Tuple, Vec};
 use function Facebook\FBExpect\expect;
 use type Facebook\CLILib\TestLib\{StringInput, StringOutput};
 
`Vec` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/ArgumentsTest.hack:12:0
@@ -9,7 +9,6 @@
 
 namespace Facebook\CLILib;
 
-use namespace HH\Lib\Vec;
 use function Facebook\FBExpect\expect;
 
 final class ArgumentsTest extends TestCase {
Facebook\CLILib\TestCLIWithRequiredArguments::getHelpTextForRequiredArguments() overrides Facebook\CLILib\CLIWithRequiredArguments::getHelpTextForRequiredArguments() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/facebook/hh-clilib/tests/TestCLIWithRequiredArguments.hack:15:2
@@ -12,6 +12,7 @@
 class TestCLIWithRequiredArguments extends CLIWithRequiredArguments {
   use TestCLITrait;
 
+  <<__Override>>
   public static function getHelpTextForRequiredArguments(): vec<string> {
     return vec['MY HELP TEXT'];
   }
Do not use PHP equality - use "===" instead.
  Linter: Facebook\HHAST\NoPHPEqualityLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/bin/hh-autoload.hack:167:10
@@ -164,7 +164,7 @@
       if (!$file_info->isFile()) {
         continue;
       }
-      if (($extensions[$file_info->getExtension()] ?? false) == false) {
+      if (($extensions[$file_info->getExtension()] ?? false) === false) {
         continue;
       }
       $out[] = $file_info->getPathname();
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/bin/hh-autoload.hack:38:23
@@ -35,7 +35,7 @@
       |> $$['name'] ?? null
       |> $$ === 'hhvm/hsl';
     if (!$have_hsl) {
-      \fwrite(\STDERR, "Unable to find the Hack Standard Library");
+      \fwrite(\STDERR, 'Unable to find the Hack Standard Library');
       exit(1);
     }
     $roots = vec[
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/bin/hh-autoload.hack:121:8
@@ -118,7 +118,7 @@
     if (!\file_exists('hh_autoload.json')) {
       \fwrite(
         \STDERR,
-        "This executable must be ran from a directory containing an ".
+        'This executable must be ran from a directory containing an '.
         "hh_autoload.json\n",
       );
       exit(1);
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/azjezz/http-normalizer/src/HttpNormalizer/private.hack:1:0
@@ -1,9 +1,7 @@
 namespace AzJezz\HttpNormalizer\_Private;
 
-use namespace HH\Lib\Str;
-use namespace HH\Lib\Dict;
-use namespace Facebook\TypeSpec;
-use namespace Facebook\TypeAssert;
+use namespace HH\Lib\{Dict, Str};
+use namespace Facebook\{TypeAssert, TypeSpec};
 
 /**
  * Logic largely refactored from the Zend-Diactoros Zend\Diactoros\normalizeUploadedFiles function.
`Vec` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/azjezz/http-normalizer/src/HttpNormalizer/absolute.hack:4:0
@@ -1,7 +1,6 @@
 namespace AzJezz\HttpNormalizer;
 
 use namespace HH\Lib\Str;
-use namespace HH\Lib\Vec;
 use namespace HH\Lib\Dict;
 use namespace Facebook\TypeSpec;
 
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/azjezz/http-normalizer/src/HttpNormalizer/absolute.hack:1:0
@@ -1,8 +1,6 @@
 namespace AzJezz\HttpNormalizer;
 
-use namespace HH\Lib\Str;
-use namespace HH\Lib\Vec;
-use namespace HH\Lib\Dict;
+use namespace HH\Lib\{Dict, Str, Vec};
 use namespace Facebook\TypeSpec;
 
 type FileStructure = shape(
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hh_autoload.hh:1:0
@@ -1,3 +1,3 @@
-<?hh // partial
+<?hh
 require_once(__DIR__.'/autoload.hack');
 Facebook\AutoloadMap\initialize();
Files should end with a single trailing newline
  Linter: Facebook\HHAST\NewlineAtEndOfFileLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/example/webroot/index.hh:66:0
@@ -64,3 +64,4 @@
 
 	die(0);
 }
+
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/example/webroot/index.hh:7:0
@@ -4,7 +4,7 @@
 /* HH_FIXME[1002] Top level require, because the autoloader is required for the classes below. */
 require_once '../../vendor/hh_autoload.hh';
 
-use Usox\Sharesta\ApiFactory;
+use type Usox\Sharesta\ApiFactory;
 use Usox\Sharesta\RequestInterface;
 use Usox\Sharesta\RouterInterface;
 use Usox\Sharesta\RoutesInterface;
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/example/webroot/index.hh:8:0
@@ -5,7 +5,7 @@
 require_once '../../vendor/hh_autoload.hh';
 
 use Usox\Sharesta\ApiFactory;
-use Usox\Sharesta\RequestInterface;
+use type Usox\Sharesta\RequestInterface;
 use Usox\Sharesta\RouterInterface;
 use Usox\Sharesta\RoutesInterface;
 
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/example/webroot/index.hh:9:0
@@ -6,7 +6,7 @@
 
 use Usox\Sharesta\ApiFactory;
 use Usox\Sharesta\RequestInterface;
-use Usox\Sharesta\RouterInterface;
+use type Usox\Sharesta\RouterInterface;
 use Usox\Sharesta\RoutesInterface;
 
 class HomeRoute implements \JsonSerializable {
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/example/webroot/index.hh:10:0
@@ -7,7 +7,7 @@
 use Usox\Sharesta\ApiFactory;
 use Usox\Sharesta\RequestInterface;
 use Usox\Sharesta\RouterInterface;
-use Usox\Sharesta\RoutesInterface;
+use type Usox\Sharesta\RoutesInterface;
 
 class HomeRoute implements \JsonSerializable {
 
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/ResponseTest.hh:9:2
  Code:
  >		$response 
`Str`, `Math` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RequestBodyTest.hh:5:0
@@ -2,7 +2,6 @@
 namespace Usox\Sharesta;
 
 use function Facebook\FBExpect\expect;
-use HH\Lib\{Str, Math};
 use Facebook\TypeAssert\UnsupportedTypeException;
 
 class RequestBodyTest extends \Facebook\HackTest\HackTest {
`UnsupportedTypeException` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RequestBodyTest.hh:6:0
@@ -3,7 +3,6 @@
 
 use function Facebook\FBExpect\expect;
 use HH\Lib\{Str, Math};
-use Facebook\TypeAssert\UnsupportedTypeException;
 
 class RequestBodyTest extends \Facebook\HackTest\HackTest {
 
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RequestBodyTest.hh:5:0
  Code:
  >use HH\Lib\{Str, Math};
  >
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RequestBodyTest.hh:6:0
  Code:
  >use Facebook\TypeAssert\UnsupportedTypeException;
  >
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RequestBodyTest.hh:5:0
@@ -2,7 +2,7 @@
 namespace Usox\Sharesta;
 
 use function Facebook\FBExpect\expect;
-use HH\Lib\{Str, Math};
+use HH\Lib\{Math, Str};
 use Facebook\TypeAssert\UnsupportedTypeException;
 
 class RequestBodyTest extends \Facebook\HackTest\HackTest {
`expect` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RouterTest.hh:4:0
@@ -1,7 +1,6 @@
 <?hh // strict
 namespace Usox\Sharesta;
 
-use function Facebook\FBExpect\expect;
 use function Usox\HackMock\{mock, prospect};
 use HH\Lib\Str;
 
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/sharesta/tests/RouterTest.hh:6:0
@@ -3,7 +3,7 @@
 
 use function Facebook\FBExpect\expect;
 use function Usox\HackMock\{mock, prospect};
-use HH\Lib\Str;
+use namespace HH\Lib\Str;
 
 class RouterTest extends \Facebook\HackTest\HackTest {
 
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/src/Uri.hack:266:42
@@ -263,7 +263,7 @@
   private function loadFromUri(string $uri): void {
     $parts = \parse_url($uri);
     if ($parts === false) {
-      throw new \InvalidArgumentException("Unable to parse URI: $uri");
+      throw new \InvalidArgumentException("Unable to parse URI: ".$uri);
     }
     if (C\contains_key($parts, 'scheme')) {
       $this->scheme = $this->filterScheme((string)$parts['scheme']) ?? '';
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/src/UploadedFile.hack:48:4
  Code:
  >    \HH\Asio\join($this->writeAsync($target_path))
Function "main()" does not match conventions; consider renaming to "main_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/example/index.hack:5:0
@@ -2,7 +2,7 @@
 
 
 <<__EntryPoint>>
-async function main(): Awaitable<noreturn> {
+async function main_async(): Awaitable<noreturn> {
   require_once '../vendor/hh_autoload.hack';
   \Facebook\AutoloadMap\initialize();
   $response = \Usox\HackTTP\create_response(200);
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/tests/UriDataTest.hack:155:8
@@ -152,7 +152,7 @@
       ],
       // Don't encode unreserved chars or sub-delimiters
       vec[
-        "/$unreserved?$unreserved#$unreserved",
+        "/".$unreserved."?".$unreserved."#".$unreserved,
         "/$unreserved",
         $unreserved,
         $unreserved,
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/tests/UriDataTest.hack:156:8
@@ -153,7 +153,7 @@
       // Don't encode unreserved chars or sub-delimiters
       vec[
         "/$unreserved?$unreserved#$unreserved",
-        "/$unreserved",
+        "/".$unreserved,
         $unreserved,
         $unreserved,
         "/$unreserved?$unreserved#$unreserved",
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/tests/UriDataTest.hack:159:8
@@ -156,7 +156,7 @@
         "/$unreserved",
         $unreserved,
         $unreserved,
-        "/$unreserved?$unreserved#$unreserved",
+        "/".$unreserved."?".$unreserved."#".$unreserved,
       ],
       // Encoded unreserved chars are not decoded
       vec[
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackttp/tests/Response/TemporaryFileSapiEmitterTest.hack:62:2
  Code:
  >
  >		\HH\Asio\join($emitter->emitAsync($response))
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/src/HackMock.hh:1:0
@@ -1,5 +1,5 @@
-<?hh //strict
+<?hh
 
 namespace Usox\HackMock;
 
 use type Facebook\HackTest\HackTest;
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/src/MockInterface.hh:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 namespace Usox\HackMock;
 
 interface MockInterface {
 
Files should end with a single trailing newline
  Linter: Facebook\HHAST\NewlineAtEndOfFileLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/SampleInterface.hh:26:0
@@ -24,3 +24,4 @@
 
 	public function isNullableWithoutDefaultsBuildsCorrectMock(?string $text): void;
 }
+
Files should end with a single trailing newline
  Linter: Facebook\HHAST\NewlineAtEndOfFileLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/SampleBaseClass.hh:25:0
@@ -23,3 +23,4 @@
 
 	}
 }
+
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/SampleBaseClass.hh:19:38
@@ -16,7 +16,7 @@
 		return $some_int;
 	}
 
-	public function intOrNullWithDefault(?int $some_int = null): void {
+	public function intOrNullWithDefault(?int $_some_int = null): void {
 	}
 
 	public static function someStaticFunction(): void {
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/UntypedClass.hh:6:37
@@ -3,7 +3,7 @@
 namespace Stub;
 
 class UntypedSampleBaseClass {
-    public function untypedParameter($param): void {
+    public function untypedParameter($_param): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/UntypedClass.hh:10:44
@@ -7,7 +7,7 @@
 
     }
 
-    public function untypedDefaultParameter($untyped = 'foo'): void {
+    public function untypedDefaultParameter($_untyped = 'foo'): void {
 
     }
 }
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/UntypedClass.hh:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 
 namespace Stub;
 
 class UntypedSampleBaseClass {
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:14:40
@@ -11,7 +11,7 @@
     const string BAR = 'bar';
     const arraykey BAZ = 1;
 
-    public function defaultBooleanFalse(bool $param = false): void {
+    public function defaultBooleanFalse(bool $_param = false): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:18:39
@@ -15,7 +15,7 @@
 
     }
 
-    public function defaultBooleanTrue(bool $param = true): void {
+    public function defaultBooleanTrue(bool $_param = true): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:22:38
@@ -19,7 +19,7 @@
 
     }
 
-    public function defaultNullString(?string $param = null): void {
+    public function defaultNullString(?string $_param = null): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:26:37
@@ -23,7 +23,7 @@
 
     }
 
-    public function defaultNullArray(?array<arraykey, mixed> $param = null): void {
+    public function defaultNullArray(?array<arraykey, mixed> $_param = null): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:30:39
@@ -27,7 +27,7 @@
 
     }
 
-    public function defaultConstantInt(int $param = self::FOO): void {
+    public function defaultConstantInt(int $_param = self::FOO): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:34:42
@@ -31,7 +31,7 @@
 
     }
 
-    public function defaultConstantString(string $param = self::BAR): void {
+    public function defaultConstantString(string $_param = self::BAR): void {
 
     }
 
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/Stub/DefaultValueClass.hh:38:44
@@ -35,7 +35,7 @@
 
     }
 
-    public function defaultConstantArraykey(arraykey $param = self::BAZ): void {
+    public function defaultConstantArraykey(arraykey $_param = self::BAZ): void {
 
     }
 }
Files should end with a single trailing newline
  Linter: Facebook\HHAST\NewlineAtEndOfFileLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/SampleTest.hh:289:0
@@ -287,3 +287,4 @@
 		$sample->intOrNullWithDefault(55);
 	}
 }
+
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/SampleTest.hh:70:2
  Code:
  >
  >		$return_value 
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/SampleTest.hh:3:0
@@ -1,6 +1,6 @@
 <?hh // strict
 
-use HH\Lib\Str;
+use namespace HH\Lib\Str;
 use function Facebook\FBExpect\expect;
 use function Usox\HackMock\{mock, prospect, tear_down};
 use Usox\HackMock\Exception\{MissingMethodCallException, UnexpectedMethodCallException};
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/usox/hackmock/tests/SampleTest.hh:6:0
@@ -3,7 +3,7 @@
 use HH\Lib\Str;
 use function Facebook\FBExpect\expect;
 use function Usox\HackMock\{mock, prospect, tear_down};
-use Usox\HackMock\Exception\{MissingMethodCallException, UnexpectedMethodCallException};
+use type Usox\HackMock\Exception\{MissingMethodCallException, UnexpectedMethodCallException};
 
 class SampleTest extends \Usox\HackMock\HackMock {
 
Method "emergency()" in class "LoggerTrait" does not match conventions; consider renaming to "emergencyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:15:2
@@ -12,7 +12,7 @@
   /**
    * System is unusable.
    */
-  public async function emergency(
+  public async function emergencyAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "alert()" in class "LoggerTrait" does not match conventions; consider renaming to "alertAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:28:2
@@ -25,7 +25,7 @@
    * Example: Entire website down, database unavailable, etc. This should
    * trigger the SMS alerts and wake you up.
    */
-  public async function alert(
+  public async function alertAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "critical()" in class "LoggerTrait" does not match conventions; consider renaming to "criticalAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:40:2
@@ -37,7 +37,7 @@
    *
    * Example: Application component unavailable, unexpected exception.
    */
-  public async function critical(
+  public async function criticalAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "error()" in class "LoggerTrait" does not match conventions; consider renaming to "errorAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:51:2
@@ -48,7 +48,7 @@
    * Runtime errors that do not require immediate action but should typically
    * be logged and monitored.
    */
-  public async function error(
+  public async function errorAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "warning()" in class "LoggerTrait" does not match conventions; consider renaming to "warningAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:64:2
@@ -61,7 +61,7 @@
    * Example: Use of deprecated APIs, poor use of an API, undesirable things
    * that are not necessarily wrong.
    */
-  public async function warning(
+  public async function warningAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "notice()" in class "LoggerTrait" does not match conventions; consider renaming to "noticeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:74:2
@@ -71,7 +71,7 @@
   /**
    * Normal but significant events.
    */
-  public async function notice(
+  public async function noticeAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "info()" in class "LoggerTrait" does not match conventions; consider renaming to "infoAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:86:2
@@ -83,7 +83,7 @@
    *
    * Example: User logs in, SQL logs.
    */
-  public async function info(
+  public async function infoAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "debug()" in class "LoggerTrait" does not match conventions; consider renaming to "debugAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LoggerTrait.hack:96:2
@@ -93,7 +93,7 @@
   /**
    * Detailed debug information.
    */
-  public async function debug(
+  public async function debugAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void> {
Method "log()" in class "NullLogger" does not match conventions; consider renaming to "logAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/NullLogger.hack:16:2
@@ -13,7 +13,7 @@
    * Logs with an arbitrary level.
    */
   <<__Override>>
-  public async function log(
+  public async function logAsync(
     LogLevel $_level,
     string $_message,
     KeyedContainer<string, mixed> $_context = dict[],
Method "reset()" in class "NullLogger" does not match conventions; consider renaming to "resetAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/NullLogger.hack:25:2
@@ -22,7 +22,7 @@
   }
 
   <<__Override>>
-  public async function reset(): Awaitable<void> {
+  public async function resetAsync(): Awaitable<void> {
     // noop
   }
 }
Member {Emergency} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:7:2
@@ -4,7 +4,7 @@
  * Describes log levels.
  */
 enum LogLevel: string {
-  Emergency = 'emergency';
+  EMERGENCY = 'emergency';
   Alert = 'alert';
   Critical = 'critical';
   Error = 'error';
Member {Alert} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:8:2
@@ -5,7 +5,7 @@
  */
 enum LogLevel: string {
   Emergency = 'emergency';
-  Alert = 'alert';
+  ALERT = 'alert';
   Critical = 'critical';
   Error = 'error';
   Warning = 'warning';
Member {Critical} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:9:2
@@ -6,7 +6,7 @@
 enum LogLevel: string {
   Emergency = 'emergency';
   Alert = 'alert';
-  Critical = 'critical';
+  CRITICAL = 'critical';
   Error = 'error';
   Warning = 'warning';
   Notice = 'notice';
Member {Error} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:10:2
@@ -7,7 +7,7 @@
   Emergency = 'emergency';
   Alert = 'alert';
   Critical = 'critical';
-  Error = 'error';
+  ERROR = 'error';
   Warning = 'warning';
   Notice = 'notice';
   Info = 'info';
Member {Warning} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:11:2
@@ -8,7 +8,7 @@
   Alert = 'alert';
   Critical = 'critical';
   Error = 'error';
-  Warning = 'warning';
+  WARNING = 'warning';
   Notice = 'notice';
   Info = 'info';
   Debug = 'debug';
Member {Notice} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:12:2
@@ -9,7 +9,7 @@
   Critical = 'critical';
   Error = 'error';
   Warning = 'warning';
-  Notice = 'notice';
+  NOTICE = 'notice';
   Info = 'info';
   Debug = 'debug';
 }
Member {Info} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:13:2
@@ -10,6 +10,6 @@
   Error = 'error';
   Warning = 'warning';
   Notice = 'notice';
-  Info = 'info';
+  INFO = 'info';
   Debug = 'debug';
 }
Member {Debug} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/LogLevel.hack:14:2
@@ -11,5 +11,5 @@
   Warning = 'warning';
   Notice = 'notice';
   Info = 'info';
-  Debug = 'debug';
+  DEBUG = 'debug';
 }
Method "emergency()" in class "ILogger" does not match conventions; consider renaming to "emergencyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:19:2
@@ -16,7 +16,7 @@
   /**
    * System is unusable.
    */
-  public function emergency(
+  public function emergencyAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "alert()" in class "ILogger" does not match conventions; consider renaming to "alertAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:30:2
@@ -27,7 +27,7 @@
    * Example: Entire website down, database unavailable, etc. This should
    * trigger the SMS alerts and wake you up.
    */
-  public function alert(
+  public function alertAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "critical()" in class "ILogger" does not match conventions; consider renaming to "criticalAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:40:2
@@ -37,7 +37,7 @@
    *
    * Example: Application component unavailable, unexpected exception.
    */
-  public function critical(
+  public function criticalAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "error()" in class "ILogger" does not match conventions; consider renaming to "errorAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:49:2
@@ -46,7 +46,7 @@
    * Runtime errors that do not require immediate action but should typically
    * be logged and monitored.
    */
-  public function error(
+  public function errorAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "warning()" in class "ILogger" does not match conventions; consider renaming to "warningAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:60:2
@@ -57,7 +57,7 @@
    * Example: Use of deprecated APIs, poor use of an API, undesirable things
    * that are not necessarily wrong.
    */
-  public function warning(
+  public function warningAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "notice()" in class "ILogger" does not match conventions; consider renaming to "noticeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:68:2
@@ -65,7 +65,7 @@
   /**
    * Normal but significant events.
    */
-  public function notice(
+  public function noticeAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "info()" in class "ILogger" does not match conventions; consider renaming to "infoAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:78:2
@@ -75,7 +75,7 @@
    *
    * Example: User logs in, SQL logs.
    */
-  public function info(
+  public function infoAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "debug()" in class "ILogger" does not match conventions; consider renaming to "debugAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:86:2
@@ -83,7 +83,7 @@
   /**
    * Detailed debug information.
    */
-  public function debug(
+  public function debugAsync(
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
   ): Awaitable<void>;
Method "log()" in class "ILogger" does not match conventions; consider renaming to "logAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Log/ILogger.hack:94:2
@@ -91,7 +91,7 @@
   /**
    * Logs with an arbitrary level.
    */
-  public function log(
+  public function logAsync(
     LogLevel $level,
     string $message,
     KeyedContainer<string, mixed> $context = dict[],
Method "initialize()" in class "ISessionPersistence" does not match conventions; consider renaming to "initializeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Session/Persistence/ISessionPersistence.hack:9:2
@@ -6,7 +6,7 @@
   /**
    * Generate a session data instance based on the request.
    */
-  public function initialize(
+  public function initializeAsync(
     Message\IServerRequest $request,
   ): Awaitable<Session\ISession>;
 
Method "persist()" in class "ISessionPersistence" does not match conventions; consider renaming to "persistAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Session/Persistence/ISessionPersistence.hack:19:2
@@ -16,7 +16,7 @@
    * Persists the session data, returning a response instance with any
    * artifacts required to return to the client.
    */
-  public function persist(
+  public function persistAsync(
     Session\ISession $session,
     Message\IResponse $response,
   ): Awaitable<Message\IResponse>;
Member {NoCache} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Session/CacheLimiter.hack:4:2
@@ -1,7 +1,7 @@
 namespace Nuxed\Contract\Http\Session;
 
 enum CacheLimiter: string as string {
-  NoCache = 'nocache';
+  NO_CACHE = 'nocache';
   Public = 'public';
   Private = 'private';
   PrivateNoExpire = 'private_no_expire';
Member {Public} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Session/CacheLimiter.hack:5:2
@@ -2,7 +2,7 @@
 
 enum CacheLimiter: string as string {
   NoCache = 'nocache';
-  Public = 'public';
+  PUBLIC = 'public';
   Private = 'private';
   PrivateNoExpire = 'private_no_expire';
 }
Member {Private} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Session/CacheLimiter.hack:6:2
@@ -3,6 +3,6 @@
 enum CacheLimiter: string as string {
   NoCache = 'nocache';
   Public = 'public';
-  Private = 'private';
+  PRIVATE = 'private';
   PrivateNoExpire = 'private_no_expire';
 }
Member {PrivateNoExpire} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Session/CacheLimiter.hack:7:2
@@ -4,5 +4,5 @@
   NoCache = 'nocache';
   Public = 'public';
   Private = 'private';
-  PrivateNoExpire = 'private_no_expire';
+  PRIVATE_NO_EXPIRE = 'private_no_expire';
 }
Member {Lax} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/CookieSameSite.hack:9:2
@@ -6,6 +6,6 @@
  * @link https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-3.1
  */
 enum CookieSameSite: string as string {
-  Lax = 'Lax';
+  LAX = 'Lax';
   Strict = 'Strict';
 }
Member {Strict} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/CookieSameSite.hack:10:2
@@ -7,5 +7,5 @@
  */
 enum CookieSameSite: string as string {
   Lax = 'Lax';
-  Strict = 'Strict';
+  STRICT = 'Strict';
 }
Member {Head} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:7:2
@@ -4,7 +4,7 @@
  * Defines constants for common HTTP request methods.
  */
 enum RequestMethod: string as string {
-  Head = 'HEAD';
+  HEAD = 'HEAD';
   Get = 'GET';
   Post = 'POST';
   Put = 'PUT';
Member {Get} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:8:2
@@ -5,7 +5,7 @@
  */
 enum RequestMethod: string as string {
   Head = 'HEAD';
-  Get = 'GET';
+  GET = 'GET';
   Post = 'POST';
   Put = 'PUT';
   Patch = 'PATCH';
Member {Post} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:9:2
@@ -6,7 +6,7 @@
 enum RequestMethod: string as string {
   Head = 'HEAD';
   Get = 'GET';
-  Post = 'POST';
+  POST = 'POST';
   Put = 'PUT';
   Patch = 'PATCH';
   Delete = 'DELETE';
Member {Put} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:10:2
@@ -7,7 +7,7 @@
   Head = 'HEAD';
   Get = 'GET';
   Post = 'POST';
-  Put = 'PUT';
+  PUT = 'PUT';
   Patch = 'PATCH';
   Delete = 'DELETE';
   Purge = 'PURGE';
Member {Patch} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:11:2
@@ -8,7 +8,7 @@
   Get = 'GET';
   Post = 'POST';
   Put = 'PUT';
-  Patch = 'PATCH';
+  PATCH = 'PATCH';
   Delete = 'DELETE';
   Purge = 'PURGE';
   Options = 'OPTIONS';
Member {Delete} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:12:2
@@ -9,7 +9,7 @@
   Post = 'POST';
   Put = 'PUT';
   Patch = 'PATCH';
-  Delete = 'DELETE';
+  DELETE = 'DELETE';
   Purge = 'PURGE';
   Options = 'OPTIONS';
   Trace = 'TRACE';
Member {Purge} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:13:2
@@ -10,7 +10,7 @@
   Put = 'PUT';
   Patch = 'PATCH';
   Delete = 'DELETE';
-  Purge = 'PURGE';
+  PURGE = 'PURGE';
   Options = 'OPTIONS';
   Trace = 'TRACE';
   Connect = 'CONNECT';
Member {Options} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:14:2
@@ -11,7 +11,7 @@
   Patch = 'PATCH';
   Delete = 'DELETE';
   Purge = 'PURGE';
-  Options = 'OPTIONS';
+  OPTIONS = 'OPTIONS';
   Trace = 'TRACE';
   Connect = 'CONNECT';
   Report = 'REPORT';
Member {Trace} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:15:2
@@ -12,7 +12,7 @@
   Delete = 'DELETE';
   Purge = 'PURGE';
   Options = 'OPTIONS';
-  Trace = 'TRACE';
+  TRACE = 'TRACE';
   Connect = 'CONNECT';
   Report = 'REPORT';
   Lock = 'LOCK';
Member {Connect} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:16:2
@@ -13,7 +13,7 @@
   Purge = 'PURGE';
   Options = 'OPTIONS';
   Trace = 'TRACE';
-  Connect = 'CONNECT';
+  CONNECT = 'CONNECT';
   Report = 'REPORT';
   Lock = 'LOCK';
   Unlock = 'UNLOCK';
Member {Report} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:17:2
@@ -14,7 +14,7 @@
   Options = 'OPTIONS';
   Trace = 'TRACE';
   Connect = 'CONNECT';
-  Report = 'REPORT';
+  REPORT = 'REPORT';
   Lock = 'LOCK';
   Unlock = 'UNLOCK';
   Copy = 'COPY';
Member {Lock} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:18:2
@@ -15,7 +15,7 @@
   Trace = 'TRACE';
   Connect = 'CONNECT';
   Report = 'REPORT';
-  Lock = 'LOCK';
+  LOCK = 'LOCK';
   Unlock = 'UNLOCK';
   Copy = 'COPY';
   Move = 'MOVE';
Member {Unlock} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:19:2
@@ -16,7 +16,7 @@
   Connect = 'CONNECT';
   Report = 'REPORT';
   Lock = 'LOCK';
-  Unlock = 'UNLOCK';
+  UNLOCK = 'UNLOCK';
   Copy = 'COPY';
   Move = 'MOVE';
   Merge = 'MERGE';
Member {Copy} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:20:2
@@ -17,7 +17,7 @@
   Report = 'REPORT';
   Lock = 'LOCK';
   Unlock = 'UNLOCK';
-  Copy = 'COPY';
+  COPY = 'COPY';
   Move = 'MOVE';
   Merge = 'MERGE';
   Notify = 'NOTIFY';
Member {Move} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:21:2
@@ -18,7 +18,7 @@
   Lock = 'LOCK';
   Unlock = 'UNLOCK';
   Copy = 'COPY';
-  Move = 'MOVE';
+  MOVE = 'MOVE';
   Merge = 'MERGE';
   Notify = 'NOTIFY';
   Subscribe = 'SUBSCRIBE';
Member {Merge} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:22:2
@@ -19,7 +19,7 @@
   Unlock = 'UNLOCK';
   Copy = 'COPY';
   Move = 'MOVE';
-  Merge = 'MERGE';
+  MERGE = 'MERGE';
   Notify = 'NOTIFY';
   Subscribe = 'SUBSCRIBE';
   Unsubscribe = 'UNSUBSCRIBE';
Member {Notify} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:23:2
@@ -20,7 +20,7 @@
   Copy = 'COPY';
   Move = 'MOVE';
   Merge = 'MERGE';
-  Notify = 'NOTIFY';
+  NOTIFY = 'NOTIFY';
   Subscribe = 'SUBSCRIBE';
   Unsubscribe = 'UNSUBSCRIBE';
 }
Member {Subscribe} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:24:2
@@ -21,6 +21,6 @@
   Move = 'MOVE';
   Merge = 'MERGE';
   Notify = 'NOTIFY';
-  Subscribe = 'SUBSCRIBE';
+  SUBSCRIBE = 'SUBSCRIBE';
   Unsubscribe = 'UNSUBSCRIBE';
 }
Member {Unsubscribe} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/RequestMethod.hack:25:2
@@ -22,5 +22,5 @@
   Merge = 'MERGE';
   Notify = 'NOTIFY';
   Subscribe = 'SUBSCRIBE';
-  Unsubscribe = 'UNSUBSCRIBE';
+  UNSUBSCRIBE = 'UNSUBSCRIBE';
 }
Method "move()" in class "IUploadedFile" does not match conventions; consider renaming to "moveAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/IUploadedFile.hack:53:2
@@ -50,7 +50,7 @@
    * @throws Exception\IException on any error during the move operation, or on
    *     the second or subsequent call to the method.
    */
-  public function move(string $targetPath): Awaitable<void>;
+  public function moveAsync(string $targetPath): Awaitable<void>;
 
   /**
    * Retrieve the file size in bytes.
Member {Continue} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:27:2
@@ -24,7 +24,7 @@
  */
 enum StatusCode: int as int {
   // Informational 1xx
-  Continue = 100;
+  CONTINUE = 100;
   SwitchingProtocols = 101;
   Processing = 102;
   EarlyHints = 103;
Member {SwitchingProtocols} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:28:2
@@ -25,7 +25,7 @@
 enum StatusCode: int as int {
   // Informational 1xx
   Continue = 100;
-  SwitchingProtocols = 101;
+  SWITCHING_PROTOCOLS = 101;
   Processing = 102;
   EarlyHints = 103;
   // Successful 2xx
Member {Processing} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:29:2
@@ -26,7 +26,7 @@
   // Informational 1xx
   Continue = 100;
   SwitchingProtocols = 101;
-  Processing = 102;
+  PROCESSING = 102;
   EarlyHints = 103;
   // Successful 2xx
   Ok = 200;
Member {EarlyHints} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:30:2
@@ -27,7 +27,7 @@
   Continue = 100;
   SwitchingProtocols = 101;
   Processing = 102;
-  EarlyHints = 103;
+  EARLY_HINTS = 103;
   // Successful 2xx
   Ok = 200;
   Created = 201;
Member {Ok} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:32:2
@@ -29,7 +29,7 @@
   Processing = 102;
   EarlyHints = 103;
   // Successful 2xx
-  Ok = 200;
+  OK = 200;
   Created = 201;
   Accepted = 202;
   NonAuthoritativeInformation = 203;
Member {Created} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:33:2
@@ -30,7 +30,7 @@
   EarlyHints = 103;
   // Successful 2xx
   Ok = 200;
-  Created = 201;
+  CREATED = 201;
   Accepted = 202;
   NonAuthoritativeInformation = 203;
   NoContent = 204;
Member {Accepted} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:34:2
@@ -31,7 +31,7 @@
   // Successful 2xx
   Ok = 200;
   Created = 201;
-  Accepted = 202;
+  ACCEPTED = 202;
   NonAuthoritativeInformation = 203;
   NoContent = 204;
   ResetContent = 205;
Member {NonAuthoritativeInformation} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:35:2
@@ -32,7 +32,7 @@
   Ok = 200;
   Created = 201;
   Accepted = 202;
-  NonAuthoritativeInformation = 203;
+  NON_AUTHORITATIVE_INFORMATION = 203;
   NoContent = 204;
   ResetContent = 205;
   PartialContent = 206;
Member {NoContent} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:36:2
@@ -33,7 +33,7 @@
   Created = 201;
   Accepted = 202;
   NonAuthoritativeInformation = 203;
-  NoContent = 204;
+  NO_CONTENT = 204;
   ResetContent = 205;
   PartialContent = 206;
   MultiStatus = 207;
Member {ResetContent} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:37:2
@@ -34,7 +34,7 @@
   Accepted = 202;
   NonAuthoritativeInformation = 203;
   NoContent = 204;
-  ResetContent = 205;
+  RESET_CONTENT = 205;
   PartialContent = 206;
   MultiStatus = 207;
   AlreadyReported = 208;
Member {PartialContent} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:38:2
@@ -35,7 +35,7 @@
   NonAuthoritativeInformation = 203;
   NoContent = 204;
   ResetContent = 205;
-  PartialContent = 206;
+  PARTIAL_CONTENT = 206;
   MultiStatus = 207;
   AlreadyReported = 208;
   ImUsed = 226;
Member {MultiStatus} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:39:2
@@ -36,7 +36,7 @@
   NoContent = 204;
   ResetContent = 205;
   PartialContent = 206;
-  MultiStatus = 207;
+  MULTI_STATUS = 207;
   AlreadyReported = 208;
   ImUsed = 226;
   // Redirection 3xx
Member {AlreadyReported} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:40:2
@@ -37,7 +37,7 @@
   ResetContent = 205;
   PartialContent = 206;
   MultiStatus = 207;
-  AlreadyReported = 208;
+  ALREADY_REPORTED = 208;
   ImUsed = 226;
   // Redirection 3xx
   MultipleChoices = 300;
Member {ImUsed} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:41:2
@@ -38,7 +38,7 @@
   PartialContent = 206;
   MultiStatus = 207;
   AlreadyReported = 208;
-  ImUsed = 226;
+  IM_USED = 226;
   // Redirection 3xx
   MultipleChoices = 300;
   MovedPermanently = 301;
Member {MultipleChoices} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:43:2
@@ -40,7 +40,7 @@
   AlreadyReported = 208;
   ImUsed = 226;
   // Redirection 3xx
-  MultipleChoices = 300;
+  MULTIPLE_CHOICES = 300;
   MovedPermanently = 301;
   Found = 302;
   SeeOther = 303;
Member {MovedPermanently} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:44:2
@@ -41,7 +41,7 @@
   ImUsed = 226;
   // Redirection 3xx
   MultipleChoices = 300;
-  MovedPermanently = 301;
+  MOVED_PERMANENTLY = 301;
   Found = 302;
   SeeOther = 303;
   NotModified = 304;
Member {Found} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:45:2
@@ -42,7 +42,7 @@
   // Redirection 3xx
   MultipleChoices = 300;
   MovedPermanently = 301;
-  Found = 302;
+  FOUND = 302;
   SeeOther = 303;
   NotModified = 304;
   UseProxy = 305;
Member {SeeOther} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:46:2
@@ -43,7 +43,7 @@
   MultipleChoices = 300;
   MovedPermanently = 301;
   Found = 302;
-  SeeOther = 303;
+  SEE_OTHER = 303;
   NotModified = 304;
   UseProxy = 305;
   Reserved = 306;
Member {NotModified} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:47:2
@@ -44,7 +44,7 @@
   MovedPermanently = 301;
   Found = 302;
   SeeOther = 303;
-  NotModified = 304;
+  NOT_MODIFIED = 304;
   UseProxy = 305;
   Reserved = 306;
   TemporaryRedirect = 307;
Member {UseProxy} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:48:2
@@ -45,7 +45,7 @@
   Found = 302;
   SeeOther = 303;
   NotModified = 304;
-  UseProxy = 305;
+  USE_PROXY = 305;
   Reserved = 306;
   TemporaryRedirect = 307;
   PermanentRedirect = 308;
Member {Reserved} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:49:2
@@ -46,7 +46,7 @@
   SeeOther = 303;
   NotModified = 304;
   UseProxy = 305;
-  Reserved = 306;
+  RESERVED = 306;
   TemporaryRedirect = 307;
   PermanentRedirect = 308;
   // Client Errors 4xx
Member {TemporaryRedirect} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:50:2
@@ -47,7 +47,7 @@
   NotModified = 304;
   UseProxy = 305;
   Reserved = 306;
-  TemporaryRedirect = 307;
+  TEMPORARY_REDIRECT = 307;
   PermanentRedirect = 308;
   // Client Errors 4xx
   BadRequest = 400;
Member {PermanentRedirect} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:51:2
@@ -48,7 +48,7 @@
   UseProxy = 305;
   Reserved = 306;
   TemporaryRedirect = 307;
-  PermanentRedirect = 308;
+  PERMANENT_REDIRECT = 308;
   // Client Errors 4xx
   BadRequest = 400;
   Unauthorized = 401;
Member {BadRequest} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:53:2
@@ -50,7 +50,7 @@
   TemporaryRedirect = 307;
   PermanentRedirect = 308;
   // Client Errors 4xx
-  BadRequest = 400;
+  BAD_REQUEST = 400;
   Unauthorized = 401;
   PaymentRequired = 402;
   Forbidden = 403;
Member {Unauthorized} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:54:2
@@ -51,7 +51,7 @@
   PermanentRedirect = 308;
   // Client Errors 4xx
   BadRequest = 400;
-  Unauthorized = 401;
+  UNAUTHORIZED = 401;
   PaymentRequired = 402;
   Forbidden = 403;
   NotFound = 404;
Member {PaymentRequired} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:55:2
@@ -52,7 +52,7 @@
   // Client Errors 4xx
   BadRequest = 400;
   Unauthorized = 401;
-  PaymentRequired = 402;
+  PAYMENT_REQUIRED = 402;
   Forbidden = 403;
   NotFound = 404;
   MethodNotAllowed = 405;
Member {Forbidden} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:56:2
@@ -53,7 +53,7 @@
   BadRequest = 400;
   Unauthorized = 401;
   PaymentRequired = 402;
-  Forbidden = 403;
+  FORBIDDEN = 403;
   NotFound = 404;
   MethodNotAllowed = 405;
   NotAcceptable = 406;
Member {NotFound} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:57:2
@@ -54,7 +54,7 @@
   Unauthorized = 401;
   PaymentRequired = 402;
   Forbidden = 403;
-  NotFound = 404;
+  NOT_FOUND = 404;
   MethodNotAllowed = 405;
   NotAcceptable = 406;
   ProxyAuthenticationRequired = 407;
Member {MethodNotAllowed} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:58:2
@@ -55,7 +55,7 @@
   PaymentRequired = 402;
   Forbidden = 403;
   NotFound = 404;
-  MethodNotAllowed = 405;
+  METHOD_NOT_ALLOWED = 405;
   NotAcceptable = 406;
   ProxyAuthenticationRequired = 407;
   RequestTimeout = 408;
Member {NotAcceptable} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:59:2
@@ -56,7 +56,7 @@
   Forbidden = 403;
   NotFound = 404;
   MethodNotAllowed = 405;
-  NotAcceptable = 406;
+  NOT_ACCEPTABLE = 406;
   ProxyAuthenticationRequired = 407;
   RequestTimeout = 408;
   Conflict = 409;
Member {ProxyAuthenticationRequired} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:60:2
@@ -57,7 +57,7 @@
   NotFound = 404;
   MethodNotAllowed = 405;
   NotAcceptable = 406;
-  ProxyAuthenticationRequired = 407;
+  PROXY_AUTHENTICATION_REQUIRED = 407;
   RequestTimeout = 408;
   Conflict = 409;
   Gone = 410;
Member {RequestTimeout} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:61:2
@@ -58,7 +58,7 @@
   MethodNotAllowed = 405;
   NotAcceptable = 406;
   ProxyAuthenticationRequired = 407;
-  RequestTimeout = 408;
+  REQUEST_TIMEOUT = 408;
   Conflict = 409;
   Gone = 410;
   LengthRequired = 411;
Member {Conflict} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:62:2
@@ -59,7 +59,7 @@
   NotAcceptable = 406;
   ProxyAuthenticationRequired = 407;
   RequestTimeout = 408;
-  Conflict = 409;
+  CONFLICT = 409;
   Gone = 410;
   LengthRequired = 411;
   PreconditionFailed = 412;
Member {Gone} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:63:2
@@ -60,7 +60,7 @@
   ProxyAuthenticationRequired = 407;
   RequestTimeout = 408;
   Conflict = 409;
-  Gone = 410;
+  GONE = 410;
   LengthRequired = 411;
   PreconditionFailed = 412;
   PayloadTooLarge = 413;
Member {LengthRequired} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:64:2
@@ -61,7 +61,7 @@
   RequestTimeout = 408;
   Conflict = 409;
   Gone = 410;
-  LengthRequired = 411;
+  LENGTH_REQUIRED = 411;
   PreconditionFailed = 412;
   PayloadTooLarge = 413;
   UriTooLong = 414;
Member {PreconditionFailed} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:65:2
@@ -62,7 +62,7 @@
   Conflict = 409;
   Gone = 410;
   LengthRequired = 411;
-  PreconditionFailed = 412;
+  PRECONDITION_FAILED = 412;
   PayloadTooLarge = 413;
   UriTooLong = 414;
   UnsupportedMediaType = 415;
Member {PayloadTooLarge} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:66:2
@@ -63,7 +63,7 @@
   Gone = 410;
   LengthRequired = 411;
   PreconditionFailed = 412;
-  PayloadTooLarge = 413;
+  PAYLOAD_TOO_LARGE = 413;
   UriTooLong = 414;
   UnsupportedMediaType = 415;
   RangeNotSatisfiable = 416;
Member {UriTooLong} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:67:2
@@ -64,7 +64,7 @@
   LengthRequired = 411;
   PreconditionFailed = 412;
   PayloadTooLarge = 413;
-  UriTooLong = 414;
+  URI_TOO_LONG = 414;
   UnsupportedMediaType = 415;
   RangeNotSatisfiable = 416;
   ExpectationFailed = 417;
Member {UnsupportedMediaType} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:68:2
@@ -65,7 +65,7 @@
   PreconditionFailed = 412;
   PayloadTooLarge = 413;
   UriTooLong = 414;
-  UnsupportedMediaType = 415;
+  UNSUPPORTED_MEDIA_TYPE = 415;
   RangeNotSatisfiable = 416;
   ExpectationFailed = 417;
   ImATeapot = 418;
Member {RangeNotSatisfiable} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:69:2
@@ -66,7 +66,7 @@
   PayloadTooLarge = 413;
   UriTooLong = 414;
   UnsupportedMediaType = 415;
-  RangeNotSatisfiable = 416;
+  RANGE_NOT_SATISFIABLE = 416;
   ExpectationFailed = 417;
   ImATeapot = 418;
   MisdirectedRequest = 421;
Member {ExpectationFailed} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:70:2
@@ -67,7 +67,7 @@
   UriTooLong = 414;
   UnsupportedMediaType = 415;
   RangeNotSatisfiable = 416;
-  ExpectationFailed = 417;
+  EXPECTATION_FAILED = 417;
   ImATeapot = 418;
   MisdirectedRequest = 421;
   UnprocessableEntity = 422;
Member {ImATeapot} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:71:2
@@ -68,7 +68,7 @@
   UnsupportedMediaType = 415;
   RangeNotSatisfiable = 416;
   ExpectationFailed = 417;
-  ImATeapot = 418;
+  IM_ATEAPOT = 418;
   MisdirectedRequest = 421;
   UnprocessableEntity = 422;
   Locked = 423;
Member {MisdirectedRequest} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:72:2
@@ -69,7 +69,7 @@
   RangeNotSatisfiable = 416;
   ExpectationFailed = 417;
   ImATeapot = 418;
-  MisdirectedRequest = 421;
+  MISDIRECTED_REQUEST = 421;
   UnprocessableEntity = 422;
   Locked = 423;
   FailedDependency = 424;
Member {UnprocessableEntity} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:73:2
@@ -70,7 +70,7 @@
   ExpectationFailed = 417;
   ImATeapot = 418;
   MisdirectedRequest = 421;
-  UnprocessableEntity = 422;
+  UNPROCESSABLE_ENTITY = 422;
   Locked = 423;
   FailedDependency = 424;
   TooEarly = 425;
Member {Locked} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:74:2
@@ -71,7 +71,7 @@
   ImATeapot = 418;
   MisdirectedRequest = 421;
   UnprocessableEntity = 422;
-  Locked = 423;
+  LOCKED = 423;
   FailedDependency = 424;
   TooEarly = 425;
   UpgradeRequired = 426;
Member {FailedDependency} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:75:2
@@ -72,7 +72,7 @@
   MisdirectedRequest = 421;
   UnprocessableEntity = 422;
   Locked = 423;
-  FailedDependency = 424;
+  FAILED_DEPENDENCY = 424;
   TooEarly = 425;
   UpgradeRequired = 426;
   PreconditionRequired = 428;
Member {TooEarly} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:76:2
@@ -73,7 +73,7 @@
   UnprocessableEntity = 422;
   Locked = 423;
   FailedDependency = 424;
-  TooEarly = 425;
+  TOO_EARLY = 425;
   UpgradeRequired = 426;
   PreconditionRequired = 428;
   TooManyRequests = 429;
Member {UpgradeRequired} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:77:2
@@ -74,7 +74,7 @@
   Locked = 423;
   FailedDependency = 424;
   TooEarly = 425;
-  UpgradeRequired = 426;
+  UPGRADE_REQUIRED = 426;
   PreconditionRequired = 428;
   TooManyRequests = 429;
   RequestHeaderFieldsTooLarge = 431;
Member {PreconditionRequired} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:78:2
@@ -75,7 +75,7 @@
   FailedDependency = 424;
   TooEarly = 425;
   UpgradeRequired = 426;
-  PreconditionRequired = 428;
+  PRECONDITION_REQUIRED = 428;
   TooManyRequests = 429;
   RequestHeaderFieldsTooLarge = 431;
   UnavailableForLegalReasons = 451;
Member {TooManyRequests} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:79:2
@@ -76,7 +76,7 @@
   TooEarly = 425;
   UpgradeRequired = 426;
   PreconditionRequired = 428;
-  TooManyRequests = 429;
+  TOO_MANY_REQUESTS = 429;
   RequestHeaderFieldsTooLarge = 431;
   UnavailableForLegalReasons = 451;
   // Server Errors 5xx
Member {RequestHeaderFieldsTooLarge} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:80:2
@@ -77,7 +77,7 @@
   UpgradeRequired = 426;
   PreconditionRequired = 428;
   TooManyRequests = 429;
-  RequestHeaderFieldsTooLarge = 431;
+  REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
   UnavailableForLegalReasons = 451;
   // Server Errors 5xx
   InternalServerError = 500;
Member {UnavailableForLegalReasons} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:81:2
@@ -78,7 +78,7 @@
   PreconditionRequired = 428;
   TooManyRequests = 429;
   RequestHeaderFieldsTooLarge = 431;
-  UnavailableForLegalReasons = 451;
+  UNAVAILABLE_FOR_LEGAL_REASONS = 451;
   // Server Errors 5xx
   InternalServerError = 500;
   NotImplemented = 501;
Member {InternalServerError} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:83:2
@@ -80,7 +80,7 @@
   RequestHeaderFieldsTooLarge = 431;
   UnavailableForLegalReasons = 451;
   // Server Errors 5xx
-  InternalServerError = 500;
+  INTERNAL_SERVER_ERROR = 500;
   NotImplemented = 501;
   BadGateway = 502;
   ServiceUnavailable = 503;
Member {NotImplemented} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:84:2
@@ -81,7 +81,7 @@
   UnavailableForLegalReasons = 451;
   // Server Errors 5xx
   InternalServerError = 500;
-  NotImplemented = 501;
+  NOT_IMPLEMENTED = 501;
   BadGateway = 502;
   ServiceUnavailable = 503;
   GatewayTimeout = 504;
Member {BadGateway} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:85:2
@@ -82,7 +82,7 @@
   // Server Errors 5xx
   InternalServerError = 500;
   NotImplemented = 501;
-  BadGateway = 502;
+  BAD_GATEWAY = 502;
   ServiceUnavailable = 503;
   GatewayTimeout = 504;
   VersionNotSupported = 505;
Member {ServiceUnavailable} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:86:2
@@ -83,7 +83,7 @@
   InternalServerError = 500;
   NotImplemented = 501;
   BadGateway = 502;
-  ServiceUnavailable = 503;
+  SERVICE_UNAVAILABLE = 503;
   GatewayTimeout = 504;
   VersionNotSupported = 505;
   VariantAlsoNegotiates = 506;
Member {GatewayTimeout} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:87:2
@@ -84,7 +84,7 @@
   NotImplemented = 501;
   BadGateway = 502;
   ServiceUnavailable = 503;
-  GatewayTimeout = 504;
+  GATEWAY_TIMEOUT = 504;
   VersionNotSupported = 505;
   VariantAlsoNegotiates = 506;
   InsufficientStorage = 507;
Member {VersionNotSupported} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:88:2
@@ -85,7 +85,7 @@
   BadGateway = 502;
   ServiceUnavailable = 503;
   GatewayTimeout = 504;
-  VersionNotSupported = 505;
+  VERSION_NOT_SUPPORTED = 505;
   VariantAlsoNegotiates = 506;
   InsufficientStorage = 507;
   LoopDetected = 508;
Member {VariantAlsoNegotiates} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:89:2
@@ -86,7 +86,7 @@
   ServiceUnavailable = 503;
   GatewayTimeout = 504;
   VersionNotSupported = 505;
-  VariantAlsoNegotiates = 506;
+  VARIANT_ALSO_NEGOTIATES = 506;
   InsufficientStorage = 507;
   LoopDetected = 508;
   NotExtended = 510;
Member {InsufficientStorage} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:90:2
@@ -87,7 +87,7 @@
   GatewayTimeout = 504;
   VersionNotSupported = 505;
   VariantAlsoNegotiates = 506;
-  InsufficientStorage = 507;
+  INSUFFICIENT_STORAGE = 507;
   LoopDetected = 508;
   NotExtended = 510;
   NetworkAuthenticationRequired = 511;
Member {LoopDetected} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:91:2
@@ -88,7 +88,7 @@
   VersionNotSupported = 505;
   VariantAlsoNegotiates = 506;
   InsufficientStorage = 507;
-  LoopDetected = 508;
+  LOOP_DETECTED = 508;
   NotExtended = 510;
   NetworkAuthenticationRequired = 511;
 }
Member {NotExtended} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:92:2
@@ -89,6 +89,6 @@
   VariantAlsoNegotiates = 506;
   InsufficientStorage = 507;
   LoopDetected = 508;
-  NotExtended = 510;
+  NOT_EXTENDED = 510;
   NetworkAuthenticationRequired = 511;
 }
Member {NetworkAuthenticationRequired} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/StatusCode.hack:93:2
@@ -90,5 +90,5 @@
   InsufficientStorage = 507;
   LoopDetected = 508;
   NotExtended = 510;
-  NetworkAuthenticationRequired = 511;
+  NETWORK_AUTHENTICATION_REQUIRED = 511;
 }
Member {None} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:4:2
@@ -1,7 +1,7 @@
 namespace Nuxed\Contract\Http\Message;
 
 enum UploadedFileError: int as int {
-  None = 0;
+  NONE = 0;
   ExceedsMaxSize = 1;
   ExceedsMaxFormSize = 2;
   Incomplete = 3;
Member {ExceedsMaxSize} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:5:2
@@ -2,7 +2,7 @@
 
 enum UploadedFileError: int as int {
   None = 0;
-  ExceedsMaxSize = 1;
+  EXCEEDS_MAX_SIZE = 1;
   ExceedsMaxFormSize = 2;
   Incomplete = 3;
   NoFile = 4;
Member {ExceedsMaxFormSize} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:6:2
@@ -3,7 +3,7 @@
 enum UploadedFileError: int as int {
   None = 0;
   ExceedsMaxSize = 1;
-  ExceedsMaxFormSize = 2;
+  EXCEEDS_MAX_FORM_SIZE = 2;
   Incomplete = 3;
   NoFile = 4;
   TemporaryDirectoryNotSpecified = 5;
Member {Incomplete} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:7:2
@@ -4,7 +4,7 @@
   None = 0;
   ExceedsMaxSize = 1;
   ExceedsMaxFormSize = 2;
-  Incomplete = 3;
+  INCOMPLETE = 3;
   NoFile = 4;
   TemporaryDirectoryNotSpecified = 5;
   TemporaryDirectoryNotWritable = 6;
Member {NoFile} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:8:2
@@ -5,7 +5,7 @@
   ExceedsMaxSize = 1;
   ExceedsMaxFormSize = 2;
   Incomplete = 3;
-  NoFile = 4;
+  NO_FILE = 4;
   TemporaryDirectoryNotSpecified = 5;
   TemporaryDirectoryNotWritable = 6;
   CanceledByExtension = 7;
Member {TemporaryDirectoryNotSpecified} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:9:2
@@ -6,7 +6,7 @@
   ExceedsMaxFormSize = 2;
   Incomplete = 3;
   NoFile = 4;
-  TemporaryDirectoryNotSpecified = 5;
+  TEMPORARY_DIRECTORY_NOT_SPECIFIED = 5;
   TemporaryDirectoryNotWritable = 6;
   CanceledByExtension = 7;
 }
Member {TemporaryDirectoryNotWritable} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:10:2
@@ -7,6 +7,6 @@
   Incomplete = 3;
   NoFile = 4;
   TemporaryDirectoryNotSpecified = 5;
-  TemporaryDirectoryNotWritable = 6;
+  TEMPORARY_DIRECTORY_NOT_WRITABLE = 6;
   CanceledByExtension = 7;
 }
Member {CanceledByExtension} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Message/UploadedFileError.hack:11:2
@@ -8,5 +8,5 @@
   NoFile = 4;
   TemporaryDirectoryNotSpecified = 5;
   TemporaryDirectoryNotWritable = 6;
-  CanceledByExtension = 7;
+  CANCELED_BY_EXTENSION = 7;
 }
Method "process()" in class "HandlerMiddlewareTrait" does not match conventions; consider renaming to "processAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Server/HandlerMiddlewareTrait.hack:8:2
@@ -5,7 +5,7 @@
 trait HandlerMiddlewareTrait implements IMiddleware {
   require implements IHandler;
 
-  public async function process(
+  public async function processAsync(
     Message\IServerRequest $request,
     IHandler $_handler,
   ): Awaitable<Message\IResponse> {
Method "authenticate()" in class "IAuthenticator" does not match conventions; consider renaming to "authenticateAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Server/Authenticator/IAuthenticator.hack:6:2
@@ -3,7 +3,7 @@
 use namespace Nuxed\Contract\Http\Message;
 
 interface IAuthenticator {
-  public function authenticate(
+  public function authenticateAsync(
     Message\IServerRequest $request,
   ): Awaitable<Result\IResult>;
 }
Method "start()" in class "IServer" does not match conventions; consider renaming to "startAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Server/IServer.hack:34:2
@@ -31,7 +31,7 @@
   /**
    * Starts the server in the background.
    */
-  public function start(): Awaitable<void>;
+  public function startAsync(): Awaitable<void>;
 
   /**
    * Stops this server by closing the listening socket and disallowing any new requests
Method "stop()" in class "IServer" does not match conventions; consider renaming to "stopAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Server/IServer.hack:40:2
@@ -37,5 +37,5 @@
    * Stops this server by closing the listening socket and disallowing any new requests
    * from being processed.
    */
-  public function stop(int $deply = 0): Awaitable<void>;
+  public function stopAsync(int $deply = 0): Awaitable<void>;
 }
Method "process()" in class "IMiddleware" does not match conventions; consider renaming to "processAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Server/IMiddleware.hack:15:2
@@ -12,7 +12,7 @@
    * Process an incoming server request and return a response, optionally delegating
    * response creation to a handler.
    */
-  public function process(
+  public function processAsync(
     Message\IServerRequest $request,
     IHandler $handler,
   ): Awaitable<Message\IResponse>;
Method "handle()" in class "IHandler" does not match conventions; consider renaming to "handleAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Server/IHandler.hack:13:2
@@ -10,7 +10,7 @@
   /**
    * Handle the request and return a response.
    */
-  public function handle(
+  public function handleAsync(
     Message\IServerRequest $request,
   ): Awaitable<Message\IResponse>;
 }
Method "send()" in class "IHttpClient" does not match conventions; consider renaming to "sendAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Client/IHttpClient.hack:20:2
@@ -17,7 +17,7 @@
    *
    * @throws Exception\IException If an error happens while processing the request.
    */
-  public function send(
+  public function sendAsync(
     Message\IRequest $request,
     HttpClientOptions $options = shape(),
   ): Awaitable<Message\IResponse>;
Method "request()" in class "IHttpClient" does not match conventions; consider renaming to "requestAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Client/IHttpClient.hack:34:2
@@ -31,7 +31,7 @@
    *
    * @throws Exception\IException If an error happens while processing the request.
    */
-  public function request(
+  public function requestAsync(
     string $method,
     string $uri,
     HttpClientOptions $options = shape(),
Method "emit()" in class "IEmitter" does not match conventions; consider renaming to "emitAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Http/Emitter/IEmitter.hack:23:2
@@ -20,5 +20,5 @@
    * the emitter was able to emit the response, while `false` indicates
    * it was not.
    */
-  public function emit(Message\IResponse $response): Awaitable<bool>;
+  public function emitAsync(Message\IResponse $response): Awaitable<bool>;
 }
Method "trans()" in class "ITranslator" does not match conventions; consider renaming to "transAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Translation/ITranslator.hack:24:2
@@ -21,7 +21,7 @@
    * @throws Exception\InvalidArgumentException If the locale contains invalid
    * characters
    */
-  public function trans(
+  public function transAsync(
     string $id,
     KeyedContainer<string, mixed> $parameters = dict[],
     ?string $domain = null,
Method "reset()" in class "IReset" does not match conventions; consider renaming to "resetAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/contract/src/Nuxed/Contract/Service/IReset.hack:17:2
@@ -14,5 +14,5 @@
  * implementing this interface when possible.)
  */
 interface IReset {
-  public function reset(): Awaitable<void>;
+  public function resetAsync(): Awaitable<void>;
 }
Static method "temporary()" in class "File" does not match conventions; consider renaming to "temporaryAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:119:2
@@ -116,7 +116,7 @@
     }
   }
 
-  public static async function temporary(
+  public static async function temporaryAsync(
     string $perfix,
     ?string $directory = null,
   ): Awaitable<File> {
Method "create()" in class "File" does not match conventions; consider renaming to "createAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:142:2
@@ -139,7 +139,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function create(int $mode = 0755): Awaitable<bool> {
+  public async function createAsync(int $mode = 0755): Awaitable<bool> {
     if ($this->exists()) {
       throw new Exception\ExistingNodeException(
         Str\format('File (%s) already exists.', $this->path->toString()),
Method "copy()" in class "File" does not match conventions; consider renaming to "copyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:178:2
@@ -175,7 +175,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function copy(
+  public async function copyAsync(
     string $target,
     OperationType $process = OperationType::OVERWRITE,
     int $mode = 0755,
Method "delete()" in class "File" does not match conventions; consider renaming to "deleteAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:207:2
@@ -204,7 +204,7 @@
    * Remove the file.
    */
   <<__Override>>
-  public async function delete(): Awaitable<bool> {
+  public async function deleteAsync(): Awaitable<bool> {
     $this->isAvailable();
     $deleted = \unlink($this->path->toString());
     $this->reset();
Method "append()" in class "File" does not match conventions; consider renaming to "appendAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:266:2
@@ -263,7 +263,7 @@
   /**
    * Append data to the end of a file.
    */
-  public async function append(string $data): Awaitable<void> {
+  public async function appendAsync(string $data): Awaitable<void> {
     try {
       await $this->write($data, File\WriteMode::APPEND);
     } catch (\Exception $e) {
Method "prepend()" in class "File" does not match conventions; consider renaming to "prependAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:284:2
@@ -281,7 +281,7 @@
   /**
    * Prepend data to the beginning of a file.
    */
-  public async function prepend(string $data): Awaitable<void> {
+  public async function prependAsync(string $data): Awaitable<void> {
     try {
       $content = await $this->read();
       await $this->write($data.$content);
Method "write()" in class "File" does not match conventions; consider renaming to "writeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:303:2
@@ -300,7 +300,7 @@
   /**
    * Write data to a file (will erase any previous contents).
    */
-  public async function write(
+  public async function writeAsync(
     string $data,
     File\WriteMode $mode = File\WriteMode::TRUNCATE,
   ): Awaitable<void> {
Method "read()" in class "File" does not match conventions; consider renaming to "readAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:335:2
@@ -332,7 +332,7 @@
   /**
    * Open a file for reading. If $length is provided, will only read up to that limit.
    */
-  public async function read(?int $length = null): Awaitable<string> {
+  public async function readAsync(?int $length = null): Awaitable<string> {
     try {
       $handle = $this->getReadHandle();
       try {
Method "lines()" in class "File" does not match conventions; consider renaming to "linesAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:361:2
@@ -358,7 +358,7 @@
     }
   }
 
-  public async function lines(): Awaitable<Lines> {
+  public async function linesAsync(): Awaitable<Lines> {
     return await $this->read()
       |> Str\replace($$, "\r\n", "\n")
       |> Str\replace($$, "\r", "\n")
Method "size()" in class "File" does not match conventions; consider renaming to "sizeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:373:2
@@ -370,7 +370,7 @@
    * Return the current file size.
    */
   <<__Override>>
-  public async function size(): Awaitable<int> {
+  public async function sizeAsync(): Awaitable<int> {
     $this->isAvailable();
     return \filesize($this->path->toString()) as int;
   }
Method "symlink()" in class "File" does not match conventions; consider renaming to "symlinkAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:381:2
@@ -378,7 +378,7 @@
   /**
    * Creates a symbolic link.
    */
-  public async function symlink(string $target): Awaitable<File> {
+  public async function symlinkAsync(string $target): Awaitable<File> {
     $this->isAvailable();
     $target = Path::create($target);
     if ($target->exists()) {
Method "link()" in class "File" does not match conventions; consider renaming to "linkAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/File.hack:407:2
@@ -404,7 +404,7 @@
   /**
    * Create a hard link.
    */
-  public async function link(string $link): Awaitable<File> {
+  public async function linkAsync(string $link): Awaitable<File> {
     $this->isAvailable();
     $link = Path::create($link);
     if ($link->exists()) {
Method "chgrp()" in class "Node" does not match conventions; consider renaming to "chgrpAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:51:2
@@ -48,7 +48,7 @@
   /**
    * Change the group of the node.
    */
-  public async function chgrp(
+  public async function chgrpAsync(
     int $group,
     bool $_recursive = false,
   ): Awaitable<bool> {
Method "chmod()" in class "Node" does not match conventions; consider renaming to "chmodAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:67:2
@@ -64,7 +64,7 @@
   /**
    * Change the permissions mode of the node.
    */
-  public async function chmod(
+  public async function chmodAsync(
     int $mode,
     bool $_recursive = false,
   ): Awaitable<bool> {
Method "chown()" in class "Node" does not match conventions; consider renaming to "chownAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:79:2
@@ -76,7 +76,7 @@
   /**
    * Change the owner of the node.
    */
-  public async function chown(
+  public async function chownAsync(
     int $user,
     bool $_recursive = false,
   ): Awaitable<bool> {
Method "copy()" in class "Node" does not match conventions; consider renaming to "copyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:101:2
@@ -98,7 +98,7 @@
    *      merge       - Will delete the target file and merge folders
    *      skip        - Will not copy the node if the target exists
    */
-  abstract public function copy(
+  abstract public function copyAsync(
     string $target,
     OperationType $process = OperationType::OVERWRITE,
     int $mode = 0755,
Method "create()" in class "Node" does not match conventions; consider renaming to "createAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:110:2
@@ -107,7 +107,7 @@
   /**
    * Create the node.
    */
-  abstract public function create(int $mode = 0755): Awaitable<bool>;
+  abstract public function createAsync(int $mode = 0755): Awaitable<bool>;
 
   /**
    * Remove the node.
Method "delete()" in class "Node" does not match conventions; consider renaming to "deleteAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:115:2
@@ -112,7 +112,7 @@
   /**
    * Remove the node.
    */
-  abstract public function delete(): Awaitable<bool>;
+  abstract public function deleteAsync(): Awaitable<bool>;
 
   /**
    * Helper method for deleting a file or folder.
Static method "destroy()" in class "Node" does not match conventions; consider renaming to "destroyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:120:2
@@ -117,7 +117,7 @@
   /**
    * Helper method for deleting a file or folder.
    */
-  public static async function destroy(string $path): Awaitable<bool> {
+  public static async function destroyAsync(string $path): Awaitable<bool> {
     return await static::load($path)->delete();
   }
 
Method "move()" in class "Node" does not match conventions; consider renaming to "moveAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:201:2
@@ -198,7 +198,7 @@
    *
    * @throws ExistingFileException
    */
-  public async function move(
+  public async function moveAsync(
     string $target,
     bool $overwrite = true,
   ): Awaitable<bool> {
Method "rename()" in class "Node" does not match conventions; consider renaming to "renameAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:292:2
@@ -289,7 +289,7 @@
    *
    * @throws ExistingFileException
    */
-  public async function rename(
+  public async function renameAsync(
     string $name,
     bool $overwrite = true,
   ): Awaitable<bool> {
Method "size()" in class "Node" does not match conventions; consider renaming to "sizeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Node.hack:356:2
@@ -353,7 +353,7 @@
   /**
    * Return the current node size.
    */
-  abstract public function size(): Awaitable<int>;
+  abstract public function sizeAsync(): Awaitable<int>;
 
   /**
    * Is the node writable.
Method "chgrp()" in class "Folder" does not match conventions; consider renaming to "chgrpAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:19:2
@@ -16,7 +16,7 @@
    * If $recursive is true, set the group on all children.
    */
   <<__Override>>
-  public async function chgrp(
+  public async function chgrpAsync(
     int $group,
     bool $recursive = false,
   ): Awaitable<bool> {
Method "chmod()" in class "Folder" does not match conventions; consider renaming to "chmodAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:37:2
@@ -34,7 +34,7 @@
    * If $recursive is true, set the mode on all children.
    */
   <<__Override>>
-  public async function chmod(
+  public async function chmodAsync(
     int $mode,
     bool $recursive = false,
   ): Awaitable<bool> {
Method "chown()" in class "Folder" does not match conventions; consider renaming to "chownAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:55:2
@@ -52,7 +52,7 @@
    * If $recursive is true, set the owner on all children.
    */
   <<__Override>>
-  public async function chown(
+  public async function chownAsync(
     int $user,
     bool $recursive = false,
   ): Awaitable<bool> {
Method "chop()" in class "Folder" does not match conventions; consider renaming to "chopAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:68:2
@@ -65,7 +65,7 @@
     return await $this->chop(($node) ==> $node->chown($user, true));
   }
 
-  private async function chop(
+  private async function chopAsync(
     (function(Node): Awaitable<bool>) $op,
   ): Awaitable<bool> {
     $iterator = new \DirectoryIterator($this->path->toString());
Method "create()" in class "Folder" does not match conventions; consider renaming to "createAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:97:2
@@ -94,7 +94,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function create(int $mode = 0755): Awaitable<bool> {
+  public async function createAsync(int $mode = 0755): Awaitable<bool> {
     if ($this->exists()) {
       throw new Exception\ExistingNodeException(
         Str\format('Folder (%s) already exists.', $this->path->toString()),
Method "copy()" in class "Folder" does not match conventions; consider renaming to "copyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:114:2
@@ -111,7 +111,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function copy(
+  public async function copyAsync(
     string $target,
     OperationType $process = OperationType::MERGE,
     int $mode = 0755,
Method "delete()" in class "Folder" does not match conventions; consider renaming to "deleteAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:188:2
@@ -185,7 +185,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function delete(): Awaitable<bool> {
+  public async function deleteAsync(): Awaitable<bool> {
     $this->isAvailable();
     await $this->flush();
     $this->reset();
Method "flush()" in class "Folder" does not match conventions; consider renaming to "flushAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:202:2
@@ -199,7 +199,7 @@
   /**
    * Recursively delete all files and folders within this folder.
    */
-  public async function flush(): Awaitable<this> {
+  public async function flushAsync(): Awaitable<this> {
     $this->isAvailable();
     $this->isReadable();
 
Method "find()" in class "Folder" does not match conventions; consider renaming to "findAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:238:2
@@ -235,7 +235,7 @@
   /**
    * Find all nodes within the current folder that match a specific regex pattern.
    */
-  public async function find<Tr as Regex\Match>(
+  public async function findAsync<Tr as Regex\Match>(
     Regex\Pattern<Tr> $pattern,
     bool $recursive = false,
   ): Awaitable<Container<Node>> {
Method "files()" in class "Folder" does not match conventions; consider renaming to "filesAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:257:2
@@ -254,7 +254,7 @@
   /**
    * Scan the folder and return a list of File objects.
    */
-  public function files(
+  public function filesAsync(
     bool $sort = false,
     bool $recursive = false,
   ): Awaitable<Container<File>> {
Method "folders()" in class "Folder" does not match conventions; consider renaming to "foldersAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:267:2
@@ -264,7 +264,7 @@
   /**
    * Scan the folder and return a list of Folder objects.
    */
-  public function folders(
+  public function foldersAsync(
     bool $sort = false,
     bool $recursive = false,
   ): Awaitable<Container<Folder>> {
Method "list()" in class "Folder" does not match conventions; consider renaming to "listAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:277:2
@@ -274,7 +274,7 @@
   /**
    * Scan the folder and return a list of File and Folder objects.
    */
-  public async function list<<<__Enforceable>> reify T as Node>(
+  public async function listAsync<<<__Enforceable>> reify T as Node>(
     bool $sort = false,
     bool $recursive = false,
   ): Awaitable<Container<T>> {
Method "move()" in class "Folder" does not match conventions; consider renaming to "moveAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:340:2
@@ -337,7 +337,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function move(
+  public async function moveAsync(
     string $target,
     bool $overwrite = true,
   ): Awaitable<bool> {
Method "size()" in class "Folder" does not match conventions; consider renaming to "sizeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:379:2
@@ -376,7 +376,7 @@
    * Return the number of files in the current folder.
    */
   <<__Override>>
-  public async function size(): Awaitable<int> {
+  public async function sizeAsync(): Awaitable<int> {
     $this->isAvailable();
     $nodes = await $this->list<Node>(false, true);
     return C\count($nodes);
Method "touch()" in class "Folder" does not match conventions; consider renaming to "touchAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:390:2
@@ -387,7 +387,7 @@
    *
    * @param int $mode file mode.
    */
-  public async function touch(string $file, int $mode = 0755): Awaitable<File> {
+  public async function touchAsync(string $file, int $mode = 0755): Awaitable<File> {
     $this->isAvailable();
     $this->isWritable();
 
Method "mkdir()" in class "Folder" does not match conventions; consider renaming to "mkdirAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:411:2
@@ -408,7 +408,7 @@
    *
    * @param int $mode folder mode.
    */
-  public async function mkdir(
+  public async function mkdirAsync(
     string $folder,
     int $mode = 0755,
   ): Awaitable<Folder> {
Method "remove()" in class "Folder" does not match conventions; consider renaming to "removeAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:433:2
@@ -430,7 +430,7 @@
   /**
    * Remove a node insde the current folder.
    */
-  public async function remove(string $node): Awaitable<bool> {
+  public async function removeAsync(string $node): Awaitable<bool> {
     $node = await $this->read<Node>($node);
     return await $node->delete();
   }
Method "read()" in class "Folder" does not match conventions; consider renaming to "readAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/filesystem/src/Nuxed/Filesystem/Folder.hack:449:2
@@ -446,7 +446,7 @@
   /**
    * Read a node from the current directory.
    */
-  public async function read<<<__Enforceable>> reify T as Node>(
+  public async function readAsync<<<__Enforceable>> reify T as Node>(
     string $name,
   ): Awaitable<T> {
     $this->isAvailable();
Method "format()" in class "MessageFormatter" does not match conventions; consider renaming to "formatAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Formatter/MessageFormatter.hack:14:2
@@ -11,7 +11,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function format(
+  public async function formatAsync(
     string $message,
     string $locale,
     KeyedContainer<string, mixed> $parameters = dict[],
Method "format()" in class "IMessageFormatter" does not match conventions; consider renaming to "formatAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Formatter/IMessageFormatter.hack:7:2
@@ -4,7 +4,7 @@
   /**
    * Formats a localized message pattern with given arguments.
    */
-  public function format(
+  public function formatAsync(
     string $message,
     string $locale,
     KeyedContainer<string, mixed> $parameters = dict[],
Method "load()" in class "TreeLoader" does not match conventions; consider renaming to "loadAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Loader/TreeLoader.hack:14:2
@@ -11,7 +11,7 @@
   /**
    * @param tree<arraykey, string> $resource
    */
-  public async function load(
+  public async function loadAsync(
     this::TFormat $resource,
     string $locale,
     string $domain = 'messages',
Method "loadResource()" in class "JsonFileLoader" does not match conventions; consider renaming to "loadResourceAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Loader/JsonFileLoader.hack:10:2
@@ -7,7 +7,7 @@
 
 final class JsonFileLoader extends FileLoader {
   <<__Override>>
-  public async function loadResource(
+  public async function loadResourceAsync(
     string $resource,
   ): Awaitable<KeyedContainer<string, mixed>> {
     $file = Filesystem\Node::load($resource) as Filesystem\File;
Method "load()" in class "ILoader" does not match conventions; consider renaming to "loadAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Loader/ILoader.hack:15:2
@@ -12,7 +12,7 @@
    * @throws Translation\Exception\NotFoundResourceException when the resource cannot be found
    * @throws Translation\Exception\InvalidResourceException  when the resource cannot be loaded
    */
-  public function load(
+  public function loadAsync(
     this::TFormat $resource,
     string $locale,
     string $domain = 'messages',
Method "load()" in class "FileLoader" does not match conventions; consider renaming to "loadAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Loader/FileLoader.hack:11:2
@@ -8,7 +8,7 @@
 abstract class FileLoader implements ILoader {
   const type TFormat = string;
 
-  public async function load(
+  public async function loadAsync(
     this::TFormat $resource,
     string $locale,
     string $domain = 'messages',
Method "loadResource()" in class "FileLoader" does not match conventions; consider renaming to "loadResourceAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Loader/FileLoader.hack:45:2
@@ -42,7 +42,7 @@
   /**
    * @return tree<arraykey, string>
    */
-  abstract protected function loadResource(
+  abstract protected function loadResourceAsync(
     string $resource,
   ): Awaitable<KeyedContainer<string, mixed>>;
 }
Method "loadResource()" in class "IniFileLoader" does not match conventions; consider renaming to "loadResourceAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Loader/IniFileLoader.hack:10:2
@@ -7,7 +7,7 @@
 
 final class IniFileLoader extends FileLoader {
   <<__Override>>
-  public async function loadResource(
+  public async function loadResourceAsync(
     string $resource,
   ): Awaitable<KeyedContainer<string, mixed>> {
     $file = Filesystem\Node::load($resource) as Filesystem\File;
Method "getCatalogue()" in class "ITranslatorBag" does not match conventions; consider renaming to "getCatalogueAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/ITranslatorBag.hack:9:2
@@ -6,7 +6,7 @@
    *
    * @throws Exception\InvalidArgumentException If the locale contains invalid characters
    */
-  public function getCatalogue(
+  public function getCatalogueAsync(
     ?string $locale = null,
   ): Awaitable<MessageCatalogue>;
 }
Method "trans()" in class "LoggingTranslator" does not match conventions; consider renaming to "transAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/LoggingTranslator.hack:25:2
@@ -22,7 +22,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function trans(
+  public async function transAsync(
     string $id,
     KeyedContainer<string, mixed> $parameters = dict[],
     ?string $domain = null,
Method "getCatalogue()" in class "LoggingTranslator" does not match conventions; consider renaming to "getCatalogueAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/LoggingTranslator.hack:43:2
@@ -40,7 +40,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function getCatalogue(
+  public async function getCatalogueAsync(
     ?string $locale = null,
   ): Awaitable<MessageCatalogue> {
     return await ($this->translator as ITranslatorBag)->getCatalogue($locale);
Method "log()" in class "LoggingTranslator" does not match conventions; consider renaming to "logAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/LoggingTranslator.hack:84:2
@@ -81,7 +81,7 @@
   /**
    * Logs for missing translations.
    */
-  private async function log(
+  private async function logAsync(
     string $id,
     ?string $domain,
     ?string $locale,
Method "trans()" in class "Translator" does not match conventions; consider renaming to "transAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Translator.hack:101:2
@@ -98,7 +98,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function trans(
+  public async function transAsync(
     string $id,
     KeyedContainer<string, mixed> $parameters = dict[],
     ?string $locale = null,
Method "getCatalogue()" in class "Translator" does not match conventions; consider renaming to "getCatalogueAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Translator.hack:131:2
@@ -128,7 +128,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function getCatalogue(
+  public async function getCatalogueAsync(
     ?string $locale = null,
   ): Awaitable<MessageCatalogue> {
     if ($locale is null) {
Method "loadCatalogue()" in class "Translator" does not match conventions; consider renaming to "loadCatalogueAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Translator.hack:147:2
@@ -144,7 +144,7 @@
     return $this->catalogues[$locale];
   }
 
-  protected async function loadCatalogue(string $locale): Awaitable<void> {
+  protected async function loadCatalogueAsync(string $locale): Awaitable<void> {
     $this->assertValidLocale($locale);
     try {
       await $this->doLoadCatalogue($locale);
Method "doLoadCatalogue()" in class "Translator" does not match conventions; consider renaming to "doLoadCatalogueAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Translator.hack:163:2
@@ -160,7 +160,7 @@
   /**
    * @internal
    */
-  protected async function doLoadCatalogue(string $locale): Awaitable<void> {
+  protected async function doLoadCatalogueAsync(string $locale): Awaitable<void> {
     $this->catalogues[$locale] = new MessageCatalogue($locale);
     if (C\contains_key($this->resources, $locale)) {
       $lastOperation = async {
Method "loadFallbackCatalogues()" in class "Translator" does not match conventions; consider renaming to "loadFallbackCataloguesAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Translator.hack:208:2
@@ -205,7 +205,7 @@
     }
   }
 
-  private async function loadFallbackCatalogues(
+  private async function loadFallbackCataloguesAsync(
     string $locale,
   ): Awaitable<void> {
     $lastOperation = async {
Method "read()" in class "ITranslationReader" does not match conventions; consider renaming to "readAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Reader/ITranslationReader.hack:12:2
@@ -9,7 +9,7 @@
   /**
    * Reads translation messages from a directory to the catalogue.
    */
-  public function read(
+  public function readAsync(
     string $directory,
     Translation\MessageCatalogue $catalogue,
   ): Awaitable<void>;
Method "read()" in class "TranslationReader" does not match conventions; consider renaming to "readAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/translation/src/Nuxed/Translation/Reader/TranslationReader.hack:29:2
@@ -26,7 +26,7 @@
   /**
    * Reads translation messages from a directory to the catalogue.
    */
-  public async function read(
+  public async function readAsync(
     string $directory,
     Translation\MessageCatalogue $catalogue,
   ): Awaitable<void> {
Function "bootstrap()" does not match conventions; consider renaming to "bootstrap_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/bootstrap.hack:16:0
@@ -13,7 +13,7 @@
  * @param string  $path         A file to load
  * @param Mode    $defaultMode  The app mode to use when none is defined
  */
-async function bootstrap(
+async function bootstrap_async(
   string $path,
   Mode $defaultMode = Mode::Development,
 ): Awaitable<void> {
Member {Development} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/Mode.hack:7:2
@@ -4,7 +4,7 @@
   /**
    * The application is running in dev environment.
    */
-  Development = 'dev';
+  DEVELOPMENT = 'dev';
 
   /**
    * The application is running in production.
Member {Production} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/Mode.hack:12:2
@@ -9,7 +9,7 @@
   /**
    * The application is running in production.
    */
-  Production = 'prod';
+  PRODUCTION = 'prod';
 
   /**
    * The application is running tests.
Member {Test} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/Mode.hack:17:2
@@ -14,7 +14,7 @@
   /**
    * The application is running tests.
    */
-  Test = 'test';
+  TEST = 'test';
 
   /**
    * The application is running in a local environment.
Member {Local} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/Mode.hack:22:2
@@ -19,5 +19,5 @@
   /**
    * The application is running in a local environment.
    */
-  Local = 'local';
+  LOCAL = 'local';
 }
Function "overload()" does not match conventions; consider renaming to "overload_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/overload.hack:7:0
@@ -4,7 +4,7 @@
  * Loads one or several .env files into the current environment
  * and enables override existing variables.
  */
-async function overload(string ...$files): Awaitable<void> {
+async function overload_async(string ...$files): Awaitable<void> {
   $lastOperation = async {
   };
   foreach ($files as $file) {
Function "load()" does not match conventions; consider renaming to "load_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/load.hack:6:0
@@ -3,7 +3,7 @@
 /**
  * Loads one or several .env files into the current environment.
  */
-async function load(string ...$files): Awaitable<void> {
+async function load_async(string ...$files): Awaitable<void> {
   $lastOperation = async {
   };
   foreach ($files as $file) {
Function "load()" does not match conventions; consider renaming to "load_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/environment/src/Nuxed/Environment/_Private/load.hack:9:0
@@ -6,7 +6,7 @@
 /**
  * Load a .env file into the current environment.
  */
-async function load(string $file, bool $override = false): Awaitable<void> {
+async function load_async(string $file, bool $override = false): Awaitable<void> {
   $file = new Filesystem\File($file);
   $lines = await $file->lines();
   $lastOperation = async {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/src/Nuxed/Http/Message/Uri.hack:49:10
@@ -46,7 +46,7 @@
 
       if (false === $parts) {
         throw new Exception\InvalidArgumentException(
-          "Unable to parse URI: ".$uri,
+          'Unable to parse URI: '.$uri,
         );
       }
 
Method "move()" in class "UploadedFile" does not match conventions; consider renaming to "moveAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/src/Nuxed/Http/Message/UploadedFile.hack:66:2
@@ -63,7 +63,7 @@
    * If this method is called more than once, any subsequent calls will raise
    * an exception.
    */
-  public async function move(string $targetPath): Awaitable<void> {
+  public async function moveAsync(string $targetPath): Awaitable<void> {
     $this->validateActive();
 
     if ('' === $targetPath) {
Method "copy()" in class "UploadedFile" does not match conventions; consider renaming to "copyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/src/Nuxed/Http/Message/UploadedFile.hack:133:2
@@ -130,7 +130,7 @@
   /**
    * avoid await-in-loop in copy.
    */
-  private async function copy(
+  private async function copyAsync(
     <<__AcceptDisposable>> File\ReadHandle $source,
     <<__AcceptDisposable>> File\WriteHandle $target,
     int $chunkSize = 1048576,
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/tests/Nuxed/Http/Message/UriTest.hack:1:0
@@ -1,8 +1,7 @@
 namespace Nuxed\Test\Http\Message;
 
 use namespace Nuxed\Http\Message;
-use type Facebook\HackTest\HackTest;
-use type Facebook\HackTest\DataProvider;
+use type Facebook\HackTest\{DataProvider, HackTest};
 use function Facebook\FBExpect\expect;
 
 class UriTest extends HackTest {
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/tests/Nuxed/Http/Message/UriTest.hack:328:8
@@ -325,7 +325,7 @@
       ),
       // Don't encode unreserved chars or sub-delimiters
       tuple(
-        "/$unreserved?$unreserved#$unreserved",
+        "/".$unreserved."?".$unreserved."#".$unreserved,
         "/$unreserved",
         $unreserved,
         $unreserved,
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/tests/Nuxed/Http/Message/UriTest.hack:329:8
@@ -326,7 +326,7 @@
       // Don't encode unreserved chars or sub-delimiters
       tuple(
         "/$unreserved?$unreserved#$unreserved",
-        "/$unreserved",
+        "/".$unreserved,
         $unreserved,
         $unreserved,
         "/$unreserved?$unreserved#$unreserved",
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/tests/Nuxed/Http/Message/UriTest.hack:332:8
@@ -329,7 +329,7 @@
         "/$unreserved",
         $unreserved,
         $unreserved,
-        "/$unreserved?$unreserved#$unreserved",
+        "/".$unreserved."?".$unreserved."#".$unreserved,
       ),
       // Encoded unreserved chars are not decoded
       tuple(
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-message/tests/Nuxed/Http/Message/ResponseTest.hack:1:0
@@ -2,8 +2,7 @@
 
 use namespace HH\Lib\C;
 use namespace Nuxed\Http\Message;
-use type Facebook\HackTest\HackTest;
-use type Facebook\HackTest\DataProvider;
+use type Facebook\HackTest\{DataProvider, HackTest};
 use function Facebook\FBExpect\expect;
 
 class ResponseTest extends HackTest {
Function "emit()" does not match conventions; consider renaming to "emit_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/emit.hack:14:0
@@ -11,7 +11,7 @@
  *                the emitter was able to emit the response, while `false` indicates
  *                it was not.
  */
-async function emit(
+async function emit_async(
   Message\IResponse $response,
   ?IO\WriteHandle $target = null,
   int $maxBufferLength = 8192,
Method "emit()" in class "Emitter" does not match conventions; consider renaming to "emitAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/Emitter.hack:28:2
@@ -25,7 +25,7 @@
    * @return a boolean. A boolean `true` indicates that the emitter was able
    * to emit the response, while `false` indicates it was not.
    */
-  public function emit(Message\IResponse $response): Awaitable<bool> {
+  public function emitAsync(Message\IResponse $response): Awaitable<bool> {
     return emit($response, $this->output, $this->maxBufferLength);
   }
 }
Function "content()" does not match conventions; consider renaming to "content_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/content.hack:8:0
@@ -5,7 +5,7 @@
 /**
  * Emit the response content back to the client.
  */
-async function content(
+async function content_async(
   IO\SeekableReadHandle $source,
   ?IO\WriteHandle $target = null,
   int $maxBufferLength = 8192,
Function "copy()" does not match conventions; consider renaming to "copy_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/_Private/copy.hack:9:0
@@ -6,7 +6,7 @@
 /**
  * avoid await-in-loop in copy.
  */
-async function copy(
+async function copy_async(
   <<__AcceptDisposable>> IO\SeekableReadHandle $source,
   <<__AcceptDisposable>> IO\WriteHandle $target,
   int $chunkSize = 1048576,
Function "copy_range()" does not match conventions; consider renaming to "copy_range_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/_Private/copy.hack:33:0
@@ -30,7 +30,7 @@
   return true;
 }
 
-async function copy_range(
+async function copy_range_async(
   <<__AcceptDisposable>> IO\SeekableReadHandle $source,
   <<__AcceptDisposable>> IO\WriteHandle $target,
   int $length,
Function "stream()" does not match conventions; consider renaming to "stream_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/_Private/stream.hack:6:0
@@ -3,7 +3,7 @@
 use namespace HH\Lib\Experimental\IO;
 use namespace Nuxed\Contract\Http\Message;
 
-async function stream(
+async function stream_async(
   Message\IResponse $response,
   IO\WriteHandle $target,
   int $maxBufferLength,
Function "stream()" does not match conventions; consider renaming to "stream_async"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/src/Nuxed/Http/Emitter/stream.hack:6:0
@@ -3,7 +3,7 @@
 use namespace HH\Lib\Experimental\IO;
 use namespace Nuxed\Contract\Http\Message;
 
-async function stream(
+async function stream_async(
   Message\IResponse $response,
   ?IO\WriteHandle $target = null,
   int $maxBufferLength = 8192,
trailing whitespace at end of line
  Linter: Facebook\HHAST\NoWhitespaceAtEndOfLineLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/http-emitter/tests/Nuxed/Http/Emitter/EmitterTest.hack:8:5
@@ -5,5 +5,5 @@
 class EmitterTest extends HackTest\HackTest {
   public async function testEmit(): Awaitable<void> {
     // tests not committed on purpose
-  }  
+  }
 }
Member {Null} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/uuid/src/Nuxed/Uuid/Type.hack:4:2
@@ -1,7 +1,7 @@
 namespace Nuxed\Uuid;
 
 enum Type: int as int {
-  Null = 0;
+  NULL = 0;
   Time = 1;
   Random = 4;
 }
Member {Time} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/uuid/src/Nuxed/Uuid/Type.hack:5:2
@@ -2,7 +2,7 @@
 
 enum Type: int as int {
   Null = 0;
-  Time = 1;
+  TIME = 1;
   Random = 4;
 }
 
Member {Random} is not in SHOUT_CASE
  Linter: Facebook\HHAST\ShoutCaseEnumMembersLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/uuid/src/Nuxed/Uuid/Type.hack:6:2
@@ -3,7 +3,7 @@
 enum Type: int as int {
   Null = 0;
   Time = 1;
-  Random = 4;
+  RANDOM = 4;
 }
 
 /**
Method "getVersion()" in class "IPackage" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/IPackage.hack:7:2
@@ -4,7 +4,7 @@
   /**
    * Returns the asset version for an asset.
    */
-  public function getVersion(string $asset): Awaitable<string>;
+  public function getVersionAsync(string $asset): Awaitable<string>;
 
   /**
    * Returns an absolute or root-relative public path.
Method "getUrl()" in class "IPackage" does not match conventions; consider renaming to "getUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/IPackage.hack:12:2
@@ -9,5 +9,5 @@
   /**
    * Returns an absolute or root-relative public path.
    */
-  public function getUrl(string $path): Awaitable<string>;
+  public function getUrlAsync(string $path): Awaitable<string>;
 }
Method "getVersion()" in class "Packages" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/Packages.hack:58:2
@@ -55,7 +55,7 @@
   /**
    * Gets the version to add to public URL.
    */
-  public async function getVersion(
+  public async function getVersionAsync(
     string $path,
     ?string $packageName = null,
   ): Awaitable<string> {
Method "getUrl()" in class "Packages" does not match conventions; consider renaming to "getUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/Packages.hack:73:2
@@ -70,7 +70,7 @@
    * @param string $path        A public path
    * @param string $packageName The name of the asset package to use
    */
-  public async function getUrl(
+  public async function getUrlAsync(
     string $path,
     ?string $packageName = null,
   ): Awaitable<string> {
Method "getUrl()" in class "PathPackage" does not match conventions; consider renaming to "getUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/PathPackage.hack:44:2
@@ -41,7 +41,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function getUrl(string $path): Awaitable<string> {
+  public async function getUrlAsync(string $path): Awaitable<string> {
     if ($this->isAbsoluteUrl($path)) {
       return $path;
     }
Method "getUrl()" in class "UrlPackage" does not match conventions; consider renaming to "getUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/UrlPackage.hack:55:2
@@ -52,7 +52,7 @@
    * {@inheritdoc}
    */
   <<__Override>>
-  public async function getUrl(string $path): Awaitable<string> {
+  public async function getUrlAsync(string $path): Awaitable<string> {
     if ($this->isAbsoluteUrl($path)) {
       return $path;
     }
Method "getBaseUrl()" in class "UrlPackage" does not match conventions; consider renaming to "getBaseUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/UrlPackage.hack:80:2
@@ -77,7 +77,7 @@
   /**
    * Returns the base URL for a path.
    */
-  public async function getBaseUrl(string $path): Awaitable<string> {
+  public async function getBaseUrlAsync(string $path): Awaitable<string> {
     if (1 === C\count($this->baseUrls)) {
       return $this->baseUrls[0];
     }
Method "chooseBaseUrl()" in class "UrlPackage" does not match conventions; consider renaming to "chooseBaseUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/UrlPackage.hack:96:2
@@ -93,7 +93,7 @@
    *
    * @return int The base URL index for the given path
    */
-  protected async function chooseBaseUrl(string $path): Awaitable<int> {
+  protected async function chooseBaseUrlAsync(string $path): Awaitable<int> {
     return (int)\fmod(
       (float)\hexdec(Str\slice(\hash('sha256', $path), 0, 10)),
       (float)C\count($this->baseUrls),
Method "getVersion()" in class "StaticVersionStrategy" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/StaticVersionStrategy.hack:20:2
@@ -17,7 +17,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function getVersion(string $_path): Awaitable<string> {
+  public async function getVersionAsync(string $_path): Awaitable<string> {
     return $this->version;
   }
 
Method "applyVersion()" in class "StaticVersionStrategy" does not match conventions; consider renaming to "applyVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/StaticVersionStrategy.hack:27:2
@@ -24,7 +24,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function applyVersion(string $path): Awaitable<string> {
+  public async function applyVersionAsync(string $path): Awaitable<string> {
     $versionized = Str\format(
       /* HH_IGNORE_ERROR[4027] */
       /* HH_IGNORE_ERROR[4110] */
Method "getVersion()" in class "IVersionStrategy" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/IVersionStrategy.hack:7:2
@@ -4,7 +4,7 @@
   /**
    * Returns the asset version for an asset.
    */
-  public function getVersion(string $asset): Awaitable<string>;
+  public function getVersionAsync(string $asset): Awaitable<string>;
 
   /**
    * Applies version to the supplied path.
Method "applyVersion()" in class "IVersionStrategy" does not match conventions; consider renaming to "applyVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/IVersionStrategy.hack:12:2
@@ -9,5 +9,5 @@
   /**
    * Applies version to the supplied path.
    */
-  public function applyVersion(string $path): Awaitable<string>;
+  public function applyVersionAsync(string $path): Awaitable<string>;
 }
Method "getVersion()" in class "EmptyVersionStrategy" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/EmptyVersionStrategy.hack:10:2
@@ -7,7 +7,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function getVersion(string $_asset): Awaitable<string> {
+  public async function getVersionAsync(string $_asset): Awaitable<string> {
     return '';
   }
 
Method "applyVersion()" in class "EmptyVersionStrategy" does not match conventions; consider renaming to "applyVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/EmptyVersionStrategy.hack:17:2
@@ -14,7 +14,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function applyVersion(string $path): Awaitable<string> {
+  public async function applyVersionAsync(string $path): Awaitable<string> {
     return $path;
   }
 }
Method "getVersion()" in class "JsonManifestVersionStrategy" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/JsonManifestVersionStrategy.hack:30:2
@@ -27,7 +27,7 @@
    * the version is. Instead, this returns the path to the
    * versioned file.
    */
-  public async function getVersion(string $path): Awaitable<string> {
+  public async function getVersionAsync(string $path): Awaitable<string> {
     return await $this->applyVersion($path);
   }
 
Method "applyVersion()" in class "JsonManifestVersionStrategy" does not match conventions; consider renaming to "applyVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/JsonManifestVersionStrategy.hack:34:2
@@ -31,7 +31,7 @@
     return await $this->applyVersion($path);
   }
 
-  public async function applyVersion(string $path): Awaitable<string> {
+  public async function applyVersionAsync(string $path): Awaitable<string> {
     $output = await $this->getManifestPath($path);
 
     return $output ?? $path;
Method "getManifestPath()" in class "JsonManifestVersionStrategy" does not match conventions; consider renaming to "getManifestPathAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/VersionStrategy/JsonManifestVersionStrategy.hack:40:2
@@ -37,7 +37,7 @@
     return $output ?? $path;
   }
 
-  private async function getManifestPath(string $path): Awaitable<?string> {
+  private async function getManifestPathAsync(string $path): Awaitable<?string> {
     if ($this->manifestData is null) {
       $manifest = new Filesystem\File($this->manifest);
       if (!$manifest->exists()) {
Method "getVersion()" in class "Package" does not match conventions; consider renaming to "getVersionAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/Package.hack:21:2
@@ -18,7 +18,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function getVersion(string $asset): Awaitable<string> {
+  public async function getVersionAsync(string $asset): Awaitable<string> {
     return await $this->versionStrategy->getVersion($asset);
   }
 
Method "getUrl()" in class "Package" does not match conventions; consider renaming to "getUrlAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/src/Nuxed/Asset/Package.hack:28:2
@@ -25,7 +25,7 @@
   /**
    * {@inheritdoc}
    */
-  public async function getUrl(string $path): Awaitable<string> {
+  public async function getUrlAsync(string $path): Awaitable<string> {
     if ($this->isAbsoluteUrl($path)) {
       return $path;
     }
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/tests/Nuxed/Asset/UrlPackageTest.hack:1:0
@@ -1,8 +1,7 @@
 namespace Nuxed\Test\Asset;
 
 use namespace Nuxed\Asset;
-use type Facebook\HackTest\HackTest;
-use type Facebook\HackTest\DataProvider;
+use type Facebook\HackTest\{DataProvider, HackTest};
 use function Facebook\FBExpect\expect;
 
 class UrlPackageTest extends HackTest {
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/tests/Nuxed/Asset/PackageTest.hack:31:4
@@ -28,7 +28,7 @@
     ?string $version,
     string $format,
     string $path,
-    string $expected,
+    string $_expected,
   ): Awaitable<void> {
     $package = new Asset\Package(
       $version is nonnull
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/tests/Nuxed/Asset/PackageTest.hack:1:0
@@ -1,8 +1,7 @@
 namespace Nuxed\Test\Asset;
 
 use namespace Nuxed\Asset;
-use type Facebook\HackTest\HackTest;
-use type Facebook\HackTest\DataProvider;
+use type Facebook\HackTest\{DataProvider, HackTest};
 use function Facebook\FBExpect\expect;
 
 class PackageTest extends HackTest {
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/nuxed/asset/tests/Nuxed/Asset/PathPackageTest.hack:1:0
@@ -1,8 +1,7 @@
 namespace Nuxed\Test\Asset;
 
 use namespace Nuxed\Asset;
-use type Facebook\HackTest\HackTest;
-use type Facebook\HackTest\DataProvider;
+use type Facebook\HackTest\{DataProvider, HackTest};
 use function Facebook\FBExpect\expect;
 
 class PathPackageTest extends HackTest {
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/str/utf8/select.php:1:0
@@ -10,8 +10,7 @@
 
 namespace HH\Lib\Experimental\Str\Utf8;
 
-use namespace HH\Lib\_Private;
-use namespace HH\Lib\Str;
+use namespace HH\Lib\{Str, _Private};
 use type HH\Lib\Experimental\Str\Encoding;
 
 /**
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/str/utf8/transform.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\Experimental\Str\Utf8;
 
-use namespace HH\Lib\{_Private, Keyset, Str, Dict};
+use namespace HH\Lib\{Dict, Keyset, Str, _Private};
 use type HH\Lib\Experimental\Str\Encoding;
 
 /**
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/str/grapheme/introspect.php:14:0
@@ -11,7 +11,6 @@
 namespace HH\Lib\Experimental\Str\Grapheme;
 
 use namespace HH\Lib\_Private;
-use namespace HH\Lib\Str;
 
 /**
  * Returns the length of the given string in grapheme units.
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/str/grapheme/introspect.php:1:0
@@ -10,8 +10,7 @@
 
 namespace HH\Lib\Experimental\Str\Grapheme;
 
-use namespace HH\Lib\_Private;
-use namespace HH\Lib\Str;
+use namespace HH\Lib\{Str, _Private};
 
 /**
  * Returns the length of the given string in grapheme units.
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/unix/Socket.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\Unix;
 
-use namespace HH\Lib\{IO, Network};
+use namespace HH\Lib\Network;
 
 /** A Unix socket for a server or client connection.
  *
`Network` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/unix/connect.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\Unix;
 
-use namespace HH\Lib\Network;
 use namespace HH\Lib\_Private\{_Network, _Unix};
 
 /** Asynchronously connect to the specified unix socket, returning a
`Network` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/unix/_Private/CloseableSocket.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_Unix;
 
-use namespace HH\Lib\{IO, Network, Unix};
+use namespace HH\Lib\{IO, Unix};
 use namespace HH\Lib\_Private\{_IO, _Network};
 
 final class CloseableSocket
Static method "_getValidErrnos()" in class "BlockingIOException" does not match conventions; consider renaming to "getValidErrnos"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:66:2
@@ -63,7 +63,7 @@
   use _OS\ErrnoExceptionWithMultipleErrnosTrait;
 
   <<__Override>>
-  public static function _getValidErrnos(): keyset<Errno> {
+  public static function getValidErrnos(): keyset<Errno> {
     return keyset[
       Errno::EAGAIN,
       Errno::EALREADY,
Static method "_getValidErrno()" in class "ChildProcessException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:79:2
@@ -76,7 +76,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ECHILD;
   }
 }
Static method "_getValidErrnos()" in class "BrokenPipeException" does not match conventions; consider renaming to "getValidErrnos"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:91:2
@@ -88,7 +88,7 @@
   use _OS\ErrnoExceptionWithMultipleErrnosTrait;
 
   <<__Override>>
-  public static function _getValidErrnos(): keyset<Errno> {
+  public static function getValidErrnos(): keyset<Errno> {
     return keyset[Errno::EPIPE, Errno::ESHUTDOWN];
   }
 }
Static method "_getValidErrno()" in class "ConnectionAbortedException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:100:2
@@ -97,7 +97,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ECONNABORTED;
   }
 }
Static method "_getValidErrno()" in class "ConnectionRefusedException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:109:2
@@ -106,7 +106,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ECONNREFUSED;
   }
 }
Static method "_getValidErrno()" in class "ConnectionResetException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:118:2
@@ -115,7 +115,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ECONNRESET;
   }
 }
Static method "_getValidErrno()" in class "AlreadyExistsException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:127:2
@@ -124,7 +124,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::EEXIST;
   }
 }
Static method "_getValidErrno()" in class "NotFoundException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:136:2
@@ -133,7 +133,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ENOENT;
   }
 }
Static method "_getValidErrno()" in class "IsADirectoryException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:145:2
@@ -142,7 +142,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::EISDIR;
   }
 }
Static method "_getValidErrno()" in class "IsNotADirectoryException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:154:2
@@ -151,7 +151,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ENOTDIR;
   }
 }
Static method "_getValidErrnos()" in class "PermissionException" does not match conventions; consider renaming to "getValidErrnos"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:163:2
@@ -160,7 +160,7 @@
   use _OS\ErrnoExceptionWithMultipleErrnosTrait;
 
   <<__Override>>
-  public static function _getValidErrnos(): keyset<Errno> {
+  public static function getValidErrnos(): keyset<Errno> {
     return keyset[
       Errno::EACCES,
       Errno::EPERM,
Static method "_getValidErrno()" in class "ProcessLookupException" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:175:2
@@ -172,7 +172,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ESRCH;
   }
 }
Static method "_getValidErrno()" in class "TimeoutError" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:184:2
@@ -181,7 +181,7 @@
   use _OS\ErrnoExceptionWithSingleErrnoTrait;
 
   <<__Override>>
-  public static function _getValidErrno(): Errno {
+  public static function getValidErrno(): Errno {
     return Errno::ETIMEDOUT;
   }
 }
`C` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/ErrnoException.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\OS;
 
-use namespace HH\Lib\C;
 use namespace HH\Lib\_Private\_OS;
 
 
`C` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/HErrnoException.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\OS;
 
-use namespace HH\Lib\C;
 use namespace HH\Lib\_Private\_OS;
 
 
`_OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/HErrnoException.php:14:0
@@ -11,7 +11,6 @@
 namespace HH\Lib\OS;
 
 use namespace HH\Lib\C;
-use namespace HH\Lib\_Private\_OS;
 
 
 /**
Method getHErrno is final in the class HErrnoException, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/HErrnoException.php:25:2
@@ -22,7 +22,7 @@
     parent::__construct($message);
   }
 
-  final public function getHErrno(): HErrno{
+  public function getHErrno(): HErrno{
     return $this->errno;
   }
 }
Static method "_getValidErrnos()" in class "ErrnoExceptionWithMultipleErrnosTrait" does not match conventions; consider renaming to "getValidErrnos"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/ErrnoExceptionWithMultipleErrnosTrait.php:28:2
@@ -25,5 +25,5 @@
     parent::__construct($code, $message);
   }
 
-  abstract public static function _getValidErrnos(): keyset<OS\Errno>;
+  abstract public static function getValidErrnos(): keyset<OS\Errno>;
 }
Files should end with a single trailing newline
  Linter: Facebook\HHAST\NewlineAtEndOfFileLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/HError.php:31:0
@@ -28,4 +28,3 @@
   NO_DATA        = 4;
 }
 
-
`OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/HError.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\_Private\_OS;
 
-use namespace HH\Lib\OS;
 
 // hackfmt-ignore
 /** OS-level host error number constants from `netdb.h`.
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/Errno.php:73:4
@@ -70,7 +70,7 @@
 function throw_errno(OS\Errno $errno, string $message): noreturn {
   invariant(
     $errno !== 0,
-    "Asked to throw an errno after %s(), but errno indicates success",
+    'Asked to throw an errno after %s(), but errno indicates success',
     $message,
   );
   $name = C\firstx(get_errno_names()[$errno]);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/Errno.php:78:27
@@ -75,5 +75,5 @@
   );
   $name = C\firstx(get_errno_names()[$errno]);
   $impl = get_throw_errno_impl();
-  $impl($errno, Str\format("%s(%d): %s", $name, $errno, $message));
+  $impl($errno, Str\format('%s(%d): %s', $name, $errno, $message));
 }
`OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/constants.php:13:0
@@ -10,6 +10,5 @@
 
 namespace HH\Lib\_Private\_OS;
 
-use namespace HH\Lib\OS;
 
 const bool IS_MACOS = \PHP_OS === 'Darwin';
Static method "_getValidErrno()" in class "ErrnoExceptionWithSingleErrnoTrait" does not match conventions; consider renaming to "getValidErrno"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/os/_Private/ErrnoExceptionWithSingleErrnoTrait.php:23:2
@@ -20,5 +20,5 @@
     parent::__construct(static::_getValidErrno(), $message);
   }
 
-  abstract public static function _getValidErrno(): OS\Errno;
+  abstract public static function getValidErrno(): OS\Errno;
 }
`IO`, `Network`, `Str` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/network/_Private/throw_socket_error.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_Network;
 
-use namespace HH\Lib\{IO, Network, OS, Str};
+use namespace HH\Lib\OS;
 use namespace HH\Lib\_Private\_OS;
 
 const int PHP_HERROR_OFFSET = 10000;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/network/_Private/throw_socket_error.php:19:37
@@ -16,7 +16,7 @@
 const int PHP_HERROR_OFFSET = 10000;
 
 function throw_socket_error(int $php_socket_error, string $message): noreturn {
-  invariant($php_socket_error !== 0, "%s should not be called on success", __FUNCTION__);
+  invariant($php_socket_error !== 0, '%s should not be called on success', __FUNCTION__);
   if ($php_socket_error < 0) {
     $herror = (-($php_socket_error + PHP_HERROR_OFFSET)) as OS\HErrno;
     throw new OS\HErrnoException($herror, OS\HErrno::getNames()[$herror]);
`_OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/network/_Private/socket_create_bind_listen_async.php:14:0
@@ -11,7 +11,6 @@
 namespace HH\Lib\_Private\_Network;
 
 use namespace HH\Lib\{Network, OS};
-use namespace HH\Lib\_Private\_OS;
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
 async function socket_create_bind_listen_async(
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/network/_Private/socket_create_bind_listen_async.php:34:29
@@ -31,7 +31,7 @@
     /* HH_IGNORE_ERROR[4107] PHPStdLib */
     $err = \socket_last_error($sock) as int;
     // using POSIX function naming instead of PHP
-    throw_socket_error($err, "socket() failed");
+    throw_socket_error($err, 'socket() failed');
   }
   set_socket_options($sock, $socket_options);
   /* HH_IGNORE_ERROR[2049] PHPStdLib */
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/network/_Private/socket_accept_async.php:40:4
  Code:
  >Line 20:   while (true) {
  >Line 40:     await \stream_await($server, \STREAM_AWAIT_READ);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/network/_Private/socket_accept_async.php:35:31
@@ -32,7 +32,7 @@
     /* HH_IGNORE_ERROR[4107] PHP stdlib */
     $err = \socket_last_error($server) as int;
     if ($retry === false || ($err !== 0 && $err !== OS\Errno::EAGAIN)) {
-      throw_socket_error($err, "accept() failed");
+      throw_socket_error($err, 'accept() failed');
     }
     // accept (3P) defines select() as indicating the FD ready for read when there's a connection
     /* HH_IGNORE_ERROR[2049] PHP stdlib */
`IO`, `OS` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/Lock.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\File;
 
-use namespace HH\Lib\{IO, OS};
 
 /**
  * A File Lock, which is unlocked as a disposable. To acquire one, call `lock`
Method __dispose is final in the class Lock, which is also final. This is redundant.
  Linter: Facebook\HHAST\NoFinalMethodInFinalClassLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/Lock.php:28:2
@@ -25,7 +25,7 @@
   public function __construct(private resource $handle) {
   }
 
-  final public function __dispose(): void {
+  public function __dispose(): void {
     $_wouldblock = null;
     /* HH_IGNORE_ERROR[2049] __PHPStdLib */
     /* HH_IGNORE_ERROR[4107] __PHPStdLib */
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/DisposableFileReadHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class DisposableFileReadHandle
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableReadWriteHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class CloseableReadWriteHandle
HH\Lib\_Private\_File\TemporaryFile::__disposeAsync() overrides HH\Lib\_Private\_IO\DisposableHandleWrapper::__disposeAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/TemporaryFile.php:22:2
@@ -19,6 +19,7 @@
   use _IO\DisposableReadHandleWrapperTrait<File\CloseableReadWriteHandle>;
   use _IO\DisposableWriteHandleWrapperTrait<File\CloseableReadWriteHandle>;
 
+  <<__Override>>
   public async function __disposeAsync(): Awaitable<void> {
     await parent::__disposeAsync();
     /* HH_IGNORE_ERROR[2049] __PHPStdLib */
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/TemporaryFile.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class TemporaryFile
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableFileHandle.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\Str;
 use namespace HH\Lib\_Private\{_IO, _OS};
 use namespace HH\Lib\{IO, File, OS};
 use type HH\Lib\_Private\PHPWarningSuppressor;
`OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableFileHandle.php:15:0
@@ -12,7 +12,7 @@
 
 use namespace HH\Lib\Str;
 use namespace HH\Lib\_Private\{_IO, _OS};
-use namespace HH\Lib\{IO, File, OS};
+use namespace HH\Lib\{IO, File};
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
 <<__ConsistentConstruct>>
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableFileHandle.php:1:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\Str;
+use namespace HH\Lib\{File, IO, OS, Str};
 use namespace HH\Lib\_Private\{_IO, _OS};
-use namespace HH\Lib\{IO, File, OS};
 use type HH\Lib\_Private\PHPWarningSuppressor;
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableFileHandle.php:15:0
@@ -12,7 +12,7 @@
 
 use namespace HH\Lib\Str;
 use namespace HH\Lib\_Private\{_IO, _OS};
-use namespace HH\Lib\{IO, File, OS};
+use namespace HH\Lib\{File, IO, OS};
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
 <<__ConsistentConstruct>>
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableReadHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class CloseableReadHandle
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/DisposableFileReadWriteHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class DisposableFileReadWriteHandle
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/DisposableFileHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 <<__ConsistentConstruct>>
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/CloseableWriteHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class CloseableWriteHandle
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/file/_Private/DisposableFileWriteHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_File;
 
-use namespace HH\Lib\{File, IO};
+use namespace HH\Lib\File;
 use namespace HH\Lib\_Private\_IO;
 
 final class DisposableFileWriteHandle
`Fileystem` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/ReadHandle.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\Fileystem;
 use namespace HH\Lib\_Private;
 
 /** An `IO\Handle` that is readable. */
`_Private` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/ReadHandle.php:14:0
@@ -11,7 +11,6 @@
 namespace HH\Lib\IO;
 
 use namespace HH\Lib\Fileystem;
-use namespace HH\Lib\_Private;
 
 /** An `IO\Handle` that is readable. */
 interface ReadHandle extends Handle {
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/ReadHandle.php:1:0
@@ -10,8 +10,7 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\Fileystem;
-use namespace HH\Lib\_Private;
+use namespace HH\Lib\{Fileystem, _Private};
 
 /** An `IO\Handle` that is readable. */
 interface ReadHandle extends Handle {
`Fileystem` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/WriteHandle.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\Fileystem;
 use namespace HH\Lib\_Private;
 
 /** An interface for a writable Handle.
`_Private` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/WriteHandle.php:14:0
@@ -11,7 +11,6 @@
 namespace HH\Lib\IO;
 
 use namespace HH\Lib\Fileystem;
-use namespace HH\Lib\_Private;
 
 /** An interface for a writable Handle.
  *
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/WriteHandle.php:1:0
@@ -10,8 +10,7 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\Fileystem;
-use namespace HH\Lib\_Private;
+use namespace HH\Lib\{Fileystem, _Private};
 
 /** An interface for a writable Handle.
  *
`File`, `Network` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/Handle.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\{File, Network};
 
 /** An interface for an IO stream.
  *
`OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/pipe.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\{_Private\_IO, OS};
+use namespace HH\Lib\_Private\_IO;
 
 /** Create a pair of handles, where writes to the `WriteHandle` can be
  * read from the `ReadHandle`.
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/pipe.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\IO;
 
-use namespace HH\Lib\{_Private\_IO, OS};
+use namespace HH\Lib\{OS, _Private\_IO};
 
 /** Create a pair of handles, where writes to the `WriteHandle` can be
  * read from the `ReadHandle`.
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/stdio.php:49:27
@@ -46,7 +46,7 @@
   // the php://stdout for interactive usage (e.g. repls)
   /* HH_IGNORE_ERROR[2049] __PHPStdLib */
   /* HH_IGNORE_ERROR[4107] __PHPStdLib */
-  if (\php_sapi_name() === "cli") {
+  if (\php_sapi_name() === 'cli') {
     return server_output() as CloseableWriteHandle;
   }
   return new _IO\StdioWriteHandle('php://output');
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/stdio.php:85:27
@@ -82,7 +82,7 @@
 function request_errorx(): CloseableWriteHandle {
   /* HH_IGNORE_ERROR[2049] __PHPStdLib */
   /* HH_IGNORE_ERROR[4107] __PHPStdLib */
-  if (\php_sapi_name() !== "cli") {
+  if (\php_sapi_name() !== 'cli') {
     _OS\throw_errno(
       OS\Errno::ENOENT,
       "There is no request_error() handle",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/stdio.php:88:6
@@ -85,7 +85,7 @@
   if (\php_sapi_name() !== "cli") {
     _OS\throw_errno(
       OS\Errno::ENOENT,
-      "There is no request_error() handle",
+      'There is no request_error() handle',
     );
   }
   return server_error() as CloseableWriteHandle;
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/stdio.php:105:27
@@ -102,7 +102,7 @@
   // the php://stdin for interactive usage (e.g. repls)
   /* HH_IGNORE_ERROR[2049] __PHPStdLib */
   /* HH_IGNORE_ERROR[4107] __PHPStdLib */
-  if (\php_sapi_name() === "cli") {
+  if (\php_sapi_name() === 'cli') {
     return new _IO\StdioReadHandle('php://stdin');
   }
   return new _IO\StdioReadHandle('php://input');
`Fileystem`, `Str` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/DisposableReadHandleWrapperTrait.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{Fileystem, IO, Str};
+use namespace HH\Lib\IO;
 
 trait DisposableReadHandleWrapperTrait<T as IO\CloseableReadHandle>
   implements IO\DisposableReadHandle {
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceWriteHandleTrait.php:59:8
  Code:
  >Line 43:       while (true) {
  >Line 59:         await $this->selectAsync(\STREAM_AWAIT_WRITE, $timeout_seconds);
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceWriteHandleTrait.php:1:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\Str;
+use namespace HH\Lib\{IO, OS, Str};
 use namespace HH\Lib\_Private\_OS;
-use namespace HH\Lib\{IO, OS};
 use type HH\Lib\_Private\PHPWarningSuppressor;
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/FileDescriptorHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{IO, OS, Str};
+use namespace HH\Lib\{IO, OS};
 use namespace HH\Lib\_Private\_OS;
 
 abstract class FileDescriptorHandle implements IO\CloseableHandle {
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceSeekableHandleTrait.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{IO, Str};
+use namespace HH\Lib\IO;
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
 trait LegacyPHPResourceSeekableHandleTrait implements IO\SeekableHandle {
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceReadHandleTrait.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\Str;
 use namespace HH\Lib\{IO, OS};
 use namespace HH\Lib\_Private\_OS;
 use type HH\Lib\_Private\PHPWarningSuppressor;
`OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceReadHandleTrait.php:14:0
@@ -11,7 +11,7 @@
 namespace HH\Lib\_Private\_IO;
 
 use namespace HH\Lib\Str;
-use namespace HH\Lib\{IO, OS};
+use namespace HH\Lib\IO;
 use namespace HH\Lib\_Private\_OS;
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceReadHandleTrait.php:1:0
@@ -10,8 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\Str;
-use namespace HH\Lib\{IO, OS};
+use namespace HH\Lib\{IO, OS, Str};
 use namespace HH\Lib\_Private\_OS;
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
`Str`, `Math` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/FileDescriptorReadHandleTrait.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{IO, Str, OS, Math};
+use namespace HH\Lib\{IO, OS};
 use namespace HH\Lib\_Private\_OS;
 
 trait FileDescriptorReadHandleTrait implements IO\ReadHandle {
`_OS` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/FileDescriptorReadHandleTrait.php:14:0
@@ -11,7 +11,6 @@
 namespace HH\Lib\_Private\_IO;
 
 use namespace HH\Lib\{IO, Str, OS, Math};
-use namespace HH\Lib\_Private\_OS;
 
 trait FileDescriptorReadHandleTrait implements IO\ReadHandle {
   require extends FileDescriptorHandle;
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/FileDescriptorReadHandleTrait.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{IO, Str, OS, Math};
+use namespace HH\Lib\{IO, Math, OS, Str};
 use namespace HH\Lib\_Private\_OS;
 
 trait FileDescriptorReadHandleTrait implements IO\ReadHandle {
`Fileystem`, `Str` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/DisposableHandleWrapper.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{Fileystem, IO, Str};
+use namespace HH\Lib\IO;
 
 abstract class DisposableHandleWrapper<T as IO\CloseableHandle>
   implements IO\Handle, \IAsyncDisposable {
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/FileDescriptorWriteHandleTrait.php:50:8
  Code:
  >Line 34:       while (true) {
  >Line 50:         await $this->selectAsync(\STREAM_AWAIT_WRITE, $timeout_nanos);
`Fileystem`, `Str` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/DisposableWriteHandleWrapperTrait.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{Fileystem, IO, Str};
+use namespace HH\Lib\IO;
 
 trait DisposableWriteHandleWrapperTrait<T as IO\CloseableWriteHandle>
   implements IO\DisposableWriteHandle {
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceHandle.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_IO;
 
-use namespace HH\Lib\{IO, OS, Str};
+use namespace HH\Lib\{IO, OS};
 use namespace HH\Lib\_Private\_OS;
 use type HH\Lib\_Private\PHPWarningSuppressor;
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceHandle.php:63:10
@@ -60,7 +60,7 @@
       if ($res === \STREAM_AWAIT_ERROR) {
         _OS\throw_errno(
           OS\Errno::EBADF,
-          "Awaiting resource failed"
+          'Awaiting resource failed'
         );
       }
     } catch (\InvalidOperationException $_) {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/io/_Private/LegacyPHPResourceHandle.php:76:39
@@ -73,7 +73,7 @@
     /* HH_FIXME[2049] PHP StdLib */
     /* HH_FIXME[4107] PHP StdLib */
     if (!\is_resource($this->impl)) {
-      _OS\throw_errno(OS\Errno::EBADF, "Resource is not valid (already closed?)");
+      _OS\throw_errno(OS\Errno::EBADF, 'Resource is not valid (already closed?)');
     }
   }
 
`IO` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/tcp/Socket.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\TCP;
 
-use namespace HH\Lib\{IO, Network};
+use namespace HH\Lib\Network;
 
 /**
  * A TCP client or server socket.
Don't use await in a loop
  Linter: Facebook\HHAST\DontAwaitInALoopLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/tcp/connect.php:63:13
  Code:
  >Line 49:   foreach ($afs as $af) {
  >Line 63:       $err = await _Network\socket_connect_async($sock, $host, $port, $timeout);
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/tcp/connect.php:61:19
@@ -58,7 +58,7 @@
     /* HH_IGNORE_ERROR[2049] PHP STDLib */
     /* HH_IGNORE_ERROR[4107] PHP STDLib */
     $err = \socket_last_error();
-    $err_message = "socket() failed";
+    $err_message = 'socket() failed';
     if ($sock is resource) {
       $err = await _Network\socket_connect_async($sock, $host, $port, $timeout);
       if ($err === 0) {
`Network` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/src/tcp/_Private/CloseableTCPSocket.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\_Private\_TCP;
 
-use namespace HH\Lib\{IO, Network, TCP};
+use namespace HH\Lib\{IO, TCP};
 use namespace HH\Lib\_Private\{_IO, _Network};
 
 final class CloseableTCPSocket
`Network` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/unix/HSLUnixSocketTest.php:11:0
@@ -8,7 +8,7 @@
  *
  */
 
-use namespace HH\Lib\{Network, Unix};
+use namespace HH\Lib\Unix;
 use namespace HH\Lib\{Math, PseudoRandom};
 
 use function Facebook\FBExpect\expect; // @oss-enable
`DataProvider` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/unix/HSLUnixSocketTest.php:16:0
@@ -13,7 +13,6 @@
 
 use function Facebook\FBExpect\expect; // @oss-enable
 use type Facebook\HackTest\HackTest; // @oss-enable
-use type Facebook\HackTest\DataProvider; // @oss-enable
 // @oss-disable: use type HackTest;
 use type HH\Lib\Network\{IPProtocolBehavior, IPProtocolVersion};
 use type \HH\Lib\Ref;
`IPProtocolBehavior`, `IPProtocolVersion` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/unix/HSLUnixSocketTest.php:18:0
@@ -15,7 +15,6 @@
 use type Facebook\HackTest\HackTest; // @oss-enable
 use type Facebook\HackTest\DataProvider; // @oss-enable
 // @oss-disable: use type HackTest;
-use type HH\Lib\Network\{IPProtocolBehavior, IPProtocolVersion};
 use type \HH\Lib\Ref;
 
 // @oss-disable: <<Oncalls('hf')>>
Leading backslashes on `use` statements do nothing
  Linter: Facebook\HHAST\UseStatementWithLeadingBackslashLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/unix/HSLUnixSocketTest.php:19:0
@@ -16,7 +16,7 @@
 use type Facebook\HackTest\DataProvider; // @oss-enable
 // @oss-disable: use type HackTest;
 use type HH\Lib\Network\{IPProtocolBehavior, IPProtocolVersion};
-use type \HH\Lib\Ref;
+use type HH\Lib\Ref;
 
 // @oss-disable: <<Oncalls('hf')>>
 final class HSLUnixSocketTest extends HackTest {
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/unix/HSLUnixSocketTest.php:1:0
@@ -8,8 +8,6 @@
  *
  */
 
-use namespace HH\Lib\{Network, Unix};
-use namespace HH\Lib\{Math, PseudoRandom};
+use namespace HH\Lib\{Math, Network, PseudoRandom, Unix};
 
 use function Facebook\FBExpect\expect; // @oss-enable
-use type Facebook\HackTest\HackTest; // @oss-enable
@@ -16,5 +16,5 @@
-use type Facebook\HackTest\DataProvider; // @oss-enable
+use type Facebook\HackTest\{DataProvider, HackTest}; // @oss-enable
 // @oss-disable: use type HackTest;
 use type HH\Lib\Network\{IPProtocolBehavior, IPProtocolVersion};
 use type \HH\Lib\Ref;
 
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/file/FileTest.php:1:0
@@ -8,8 +8,7 @@
  *
  */
 
-use namespace HH\Lib\Str;
-use namespace HH\Lib\{File, OS};
+use namespace HH\Lib\{File, OS, Str};
 
 use function Facebook\FBExpect\expect; // @oss-enable
 use type Facebook\HackTest\HackTest; // @oss-enable
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/file/PathTest.php:1:0
@@ -12,8 +12,7 @@
 use namespace HH\Lib\File;
 
 use function Facebook\FBExpect\expect; // @oss-enable
-use type Facebook\HackTest\HackTest; // @oss-enable
-use type Facebook\HackTest\DataProvider; // @oss-enable
+use type Facebook\HackTest\{DataProvider, HackTest}; // @oss-enable
 // @oss-disable: use type HackTest;
 
 // @oss-disable: <<Oncalls('hack')>>
`Vec` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/tcp/HSLTCPTest.php:11:0
@@ -8,7 +8,6 @@
  *
  */
 
-use namespace HH\Lib\Vec;
 use namespace HH\Lib\{IO, Network, OS, TCP};
 
 use function Facebook\FBExpect\expect; // @oss-enable
`IO`, `Network` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/tcp/HSLTCPTest.php:12:0
@@ -9,7 +9,7 @@
  */
 
 use namespace HH\Lib\Vec;
-use namespace HH\Lib\{IO, Network, OS, TCP};
+use namespace HH\Lib\{OS, TCP};
 
 use function Facebook\FBExpect\expect; // @oss-enable
 use type Facebook\HackTest\HackTest; // @oss-enable
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/tcp/HSLTCPTest.php:1:0
@@ -8,8 +8,6 @@
  *
  */
 
-use namespace HH\Lib\Vec;
-use namespace HH\Lib\{IO, Network, OS, TCP};
+use namespace HH\Lib\{IO, Network, OS, TCP, Vec};
 
 use function Facebook\FBExpect\expect; // @oss-enable
-use type Facebook\HackTest\HackTest; // @oss-enable
@@ -16,5 +16,5 @@
-use type Facebook\HackTest\DataProvider; // @oss-enable
+use type Facebook\HackTest\{DataProvider, HackTest}; // @oss-enable
 // @oss-disable: use type HackTest;
 use type HH\Lib\Network\{IPProtocolBehavior, IPProtocolVersion};
 use type HH\Lib\Ref;
 
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl-experimental/tests/tcp/HSLTCPTest.php:81:28
@@ -78,7 +78,7 @@
     } catch (OS\ErrnoException $e) {
       expect($e->getErrno())->toEqual(OS\Errno::EADDRNOTAVAIL);
       expect($server_protocol)->toEqual(IPProtocolVersion::IPV6);
-      self::markTestSkipped("IPv6 not supported on this host");
+      self::markTestSkipped('IPv6 not supported on this host');
       return;
     }
     list($host, $port) = $server->getLocalAddress();
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/ConfigurationLoader.hack:46:4
@@ -43,7 +43,7 @@
    */
   public static function fromData(
     KeyedContainer<arraykey, mixed> $data,
-    string $path,
+    string $_path,
   ): Config {
     $failure_handler = TypeAssert\is_nullable_string(
       $data['failureHandler'] ?? null,
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/ConfigurationLoader.hack:12:0
@@ -9,7 +9,7 @@
 
 namespace Facebook\AutoloadMap;
 
-use Facebook\AutoloadMap\__Private\TypeAssert;
+use namespace Facebook\AutoloadMap\__Private\TypeAssert;
 
 /** Load configuration from JSON */
 abstract final class ConfigurationLoader {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/Writer.hack:163:8
@@ -160,7 +160,7 @@
         "  \$map['failure'] = inst_meth(\$handler, 'handleFailure');\n".
         "  \HH\autoload_set_paths(/* HH_FIXME[4110] incorrect hhi */ \$map, Generated\\root());\n".
         "  \$handler->initialize();\n".
-        "}",
+        '}',
         $failure_handler,
         $failure_handler,
       );
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/Writer.hack:266:24
@@ -263,6 +263,6 @@
     if (Str\starts_with($path, $root)) {
       return Str\slice($path, Str\length($root) + 1);
     }
-    throw new Exception("%s is outside root %s", $path, $root);
+    throw new Exception('%s is outside root %s', $path, $root);
   }
 }
Do not use string interpolation - consider concatenation or Str\format() instead 
  Linter: Facebook\HHAST\NoStringInterpolationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/Writer.hack:194:12
  Code:
  ><<<EOF
  >/// Generated file, do not edit by hand ///
  >
  >namespace Facebook\AutoloadMap\Generated {
  >
  >function build_id(): string {
  >  return $build_id;
  >}
  >
  >function root(): string {
  >  return $root;
  >}
  >
  ><<__Memoize>>
  >function is_dev(): bool {
  >  \$override = \getenv('HH_FORCE_IS_DEV');
  >  if (\$override === false) {
  >    return $is_dev;
  >  }
  >  return (bool) \$override;
  >}
  >
  >function map(): \Facebook\AutoloadMap\AutoloadMap {
  >  /* HH_IGNORE_ERROR[4110] invalid return type */
  >  return $map;
  >}
  >
  >} // Generated\
  >
  >namespace Facebook\AutoloadMap\_Private {
  >  final class GlobalState {
  >    public static bool \$initialized = false;
  >  }
  >
  >  function bootstrap(): void {
  >    require_once($autoload_map_typedef);
  >    $requires
  >  }
  >}
  >
  >namespace Facebook\AutoloadMap {
  >
  >function initialize(): void {
  >  if (_Private\GlobalState::\$initialized) {
  >    return;
  >  }
  >  _Private\GlobalState::\$initialized = true;
  >  _Private\bootstrap();
  >  \$map = Generated\\map();
  >
  >  \HH\autoload_set_paths(/* HH_FIXME[4110] incorrect hhi */ \$map, Generated\\root());
  >
  >  $add_failure_handler
  >}
  >
  >}
  >EOF
Use `use type` or `use namespace`
  Linter: Facebook\HHAST\UseStatementWithoutKindLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/builders/FactParseScanner.hack:12:0
@@ -9,7 +9,7 @@
 
 namespace Facebook\AutoloadMap;
 
-use Facebook\AutoloadMap\__Private\TypeAssert;
+use namespace Facebook\AutoloadMap\__Private\TypeAssert;
 
 /** Create an autoload map from a directory using `ext_factparse`. */
 final class FactParseScanner implements Builder {
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/src/HHClientFallbackHandler.hack:251:4
@@ -248,6 +248,6 @@
   }
 
   private function requireFile(string $path): void {
-    require $path;
+    require_once $path;
   }
 }
Do not use PHP equality - use "===" instead.
  Linter: Facebook\HHAST\NoPHPEqualityLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/bin/hh-autoload.hack:167:10
@@ -164,7 +164,7 @@
       if (!$file_info->isFile()) {
         continue;
       }
-      if (($extensions[$file_info->getExtension()] ?? false) == false) {
+      if (($extensions[$file_info->getExtension()] ?? false) === false) {
         continue;
       }
       $out[] = $file_info->getPathname();
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/bin/hh-autoload.hack:38:23
@@ -35,7 +35,7 @@
       |> $$['name'] ?? null
       |> $$ === 'hhvm/hsl';
     if (!$have_hsl) {
-      \fwrite(\STDERR, "Unable to find the Hack Standard Library");
+      \fwrite(\STDERR, 'Unable to find the Hack Standard Library');
       exit(1);
     }
     $roots = vec[
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/bin/hh-autoload.hack:121:8
@@ -118,7 +118,7 @@
     if (!\file_exists('hh_autoload.json')) {
       \fwrite(
         \STDERR,
-        "This executable must be ran from a directory containing an ".
+        'This executable must be ran from a directory containing an '.
         "hh_autoload.json\n",
       );
       exit(1);
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/testdata/MixedCaseType.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Function "MixedCaseFunction()" does not match conventions; consider renaming to "mixed_case_function"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/testdata/MixedCaseFunction.php:13:0
@@ -10,6 +10,6 @@
 
 namespace Facebook\AutoloadMap\TestData;
 
-function MixedCaseFunction(): string {
+function mixed_case_function(): string {
   return __FILE__;
 }
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/testdata/MixedCaseFunction.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/testdata/MixedCaseClass.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/testdata/MixedCaseConstant.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Facebook\AutoloadMap\FallbackHandlerTest::beforeEachTestAsync() overrides Facebook\HackTest\HackTest::beforeEachTestAsync() without <<__Override>>
  Linter: Facebook\HHAST\MustUseOverrideAttributeLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/FallbackHandlerTest.hack:15:2
@@ -12,6 +12,7 @@
 use function Facebook\FBExpect\expect;
 
 final class FallbackHandlerTest extends \Facebook\HackTest\HackTest {
+  <<__Override>>
   public async function beforeEachTestAsync(): Awaitable<void> {
     if (!\function_exists('Facebook\\AutoloadMap\\Generated\\build_id')) {
       static::markTestSkipped("Does not work with composer's autoloader");
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/FallbackHandlerTest.hack:20:30
@@ -17,7 +17,7 @@
       static::markTestSkipped("Does not work with composer's autoloader");
     }
     if (!HHClientFallbackHandler::isEnabled()) {
-      static::markTestSkipped("Fallback handler is not enabled");
+      static::markTestSkipped('Fallback handler is not enabled');
     }
   }
 
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-prod.php:13:62
@@ -10,7 +10,7 @@
 
 namespace Facebook\AutoloadMap\TestFixtures;
 
-/* HH_FIXME[1002] HHAST: move to <<__EntryPoint>> function */ require($argv[1]);
+/* HH_FIXME[1002] HHAST: move to <<__EntryPoint>> function */ require_once($argv[1]);
 \var_dump($argv[1]);
 \var_dump(\file_get_contents($argv[1]));
 \Facebook\AutoloadMap\initialize();
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-prod.php:27:2
@@ -24,7 +24,7 @@
 
 invariant(
   \class_exists(VendorHHExampleClass::class),
-  "Should be able to load class from vendor hh_autoload.json",
+  'Should be able to load class from vendor hh_autoload.json',
 );
 invariant(
   !\class_exists(VendorComposerExampleClass::class),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-prod.php:32:2
@@ -29,7 +29,7 @@
 invariant(
   !\class_exists(VendorComposerExampleClass::class),
   "Should *not* be able to load class from vendor composer.json if there's also ".
-  "an hh_autoload.json",
+  'an hh_autoload.json',
 );
 invariant(
   !\class_exists(MyExampleTest::class),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-prod.php:36:2
@@ -33,6 +33,6 @@
 );
 invariant(
   !\class_exists(MyExampleTest::class),
-  "Should *not* be able to load class from dev root in prod mode",
+  'Should *not* be able to load class from dev root in prod mode',
 );
 print("OK!");
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-prod.php:38:6
@@ -35,4 +35,4 @@
   !\class_exists(MyExampleTest::class),
   "Should *not* be able to load class from dev root in prod mode",
 );
-print("OK!");
+print('OK!');
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-prod.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Prefer "require_once" over "include(_once)" and "require"
  Linter: Facebook\HHAST\PreferRequireOnceLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-dev.php:13:62
@@ -10,7 +10,7 @@
 
 namespace Facebook\AutoloadMap\TestFixtures;
 
-/* HH_FIXME[1002] HHAST: move to <<__EntryPoint>> function */ require($argv[1]);
+/* HH_FIXME[1002] HHAST: move to <<__EntryPoint>> function */ require_once($argv[1]);
 \Facebook\AutoloadMap\initialize();
 
 $x = new ExampleClass();
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-dev.php:25:2
@@ -22,7 +22,7 @@
 
 invariant(
   \class_exists(VendorHHExampleClass::class),
-  "Should be able to load class from vendor hh_autoload.json",
+  'Should be able to load class from vendor hh_autoload.json',
 );
 invariant(
   !\class_exists(VendorComposerExampleClass::class),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-dev.php:30:2
@@ -27,7 +27,7 @@
 invariant(
   !\class_exists(VendorComposerExampleClass::class),
   "Should *not* be able to load class from vendor composer.json if there's also ".
-  "an hh_autoload.json",
+  'an hh_autoload.json',
 );
 invariant(
   \class_exists(MyExampleTest::class),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-dev.php:34:2
@@ -31,6 +31,6 @@
 );
 invariant(
   \class_exists(MyExampleTest::class),
-  "Should be able to load class from dev root in prod mode",
+  'Should be able to load class from dev root in prod mode',
 );
 print("OK!");
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-dev.php:36:6
@@ -33,4 +33,4 @@
   \class_exists(MyExampleTest::class),
   "Should be able to load class from dev root in prod mode",
 );
-print("OK!");
+print('OK!');
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/test-dev.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Use `<?hh` (default)
  Linter: Facebook\HHAST\StrictModeOnlyLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhvm-autoload/tests/fixtures/hh-only/extrafile.php:1:0
@@ -1,5 +1,5 @@
-<?hh // partial
+<?hh
 /*
  *  Copyright (c) 2015-present, Facebook, Inc.
  *  All rights reserved.
  *
Function "wrap_IExpression()" does not match conventions; consider renaming to "wrap_iexpression"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhast/src/__Private/Wrap/wrap_IExpression.hack:15:0
@@ -12,7 +12,7 @@
 use type Facebook\HHAST\{IExpression, INameishNode, NameExpression, Node};
 use namespace HH\Lib\{C, Str};
 
-function wrap_IExpression(Node $node): IExpression {
+function wrap_iexpression(Node $node): IExpression {
   if ($node is IExpression) {
     return $node;
   }
Function "wrap_ITypeSpecifier()" does not match conventions; consider renaming to "wrap_itype_specifier"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhast/src/__Private/Wrap/wrap_ITypeSpecifier.hack:19:0
@@ -16,7 +16,7 @@
   __Private\IWrappableWithSimpleTypeSpecifier,
 };
 
-function wrap_ITypeSpecifier(Node $node): ITypeSpecifier {
+function wrap_itype_specifier(Node $node): ITypeSpecifier {
   if ($node is ITypeSpecifier) {
     return $node;
   }
`TypeAssert` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhast/codegen/syntax/SimpleTypeSpecifier.hack:7:0
@@ -4,7 +4,6 @@
  * @generated SignedSource<<a0082c64f5d1bb0d3533784c4e42c3f3>>
  */
 namespace Facebook\HHAST;
-use namespace Facebook\TypeAssert;
 use namespace HH\Lib\Dict;
 
 <<__ConsistentConstruct>>
`TypeAssert` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhast/codegen/syntax/RecordDeclaration.hack:7:0
@@ -4,7 +4,6 @@
  * @generated SignedSource<<4c830ae26bcaa4102826c068c299f089>>
  */
 namespace Facebook\HHAST;
-use namespace Facebook\TypeAssert;
 use namespace HH\Lib\Dict;
 
 <<__ConsistentConstruct>>
`TypeAssert` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhast/codegen/syntax/RecordField.hack:7:0
@@ -4,7 +4,6 @@
  * @generated SignedSource<<0a56d225e5aefb7883ede1901e95f3ca>>
  */
 namespace Facebook\HHAST;
-use namespace Facebook\TypeAssert;
 use namespace HH\Lib\Dict;
 
 <<__ConsistentConstruct>>
`TypeAssert` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hhast/codegen/syntax/ReifiedTypeArgument.hack:7:0
@@ -4,7 +4,6 @@
  * @generated SignedSource<<0f1a49ff60c7b9c4be60112063ffe4d2>>
  */
 namespace Facebook\HHAST;
-use namespace Facebook\TypeAssert;
 use namespace HH\Lib\Dict;
 
 <<__ConsistentConstruct>>
`C` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/math/compute.php:12:0
@@ -9,7 +9,7 @@
  */
 
 namespace HH\Lib\Math;
-use namespace HH\Lib\{C, Str};
+use namespace HH\Lib\Str;
 use const HH\Lib\_Private\ALPHABET_ALPHANUMERIC;
 
 /**
`Math` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/keyset/transform.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\Keyset;
 
-use namespace HH\Lib\Math;
 
 /**
  * Returns a vec containing the given Traversable split into chunks of the
Do not use PHP equality - use "===" instead.
  Linter: Facebook\HHAST\NoPHPEqualityLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/keyset/introspect.php:27:9
@@ -24,5 +24,5 @@
   keyset<Tv> $keyset1,
   keyset<Tv> $keyset2,
 ): bool {
-  return $keyset1 == $keyset2;
+  return $keyset1 === $keyset2;
 }
`C` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/keyset/introspect.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\Keyset;
 
-use namespace HH\Lib\C;
 
 /**
  * Returns whether the two given keysets have the same elements, using strict
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/async/Semaphore.php:42:36
@@ -39,7 +39,7 @@
     private int $concurrentLimit,
     private (function(Tin): Awaitable<Tout>) $f,
   ) {
-    invariant($concurrentLimit > 0, "Concurrent limit must be greater than 0.");
+    invariant($concurrentLimit > 0, 'Concurrent limit must be greater than 0.');
     $this->activeGen = async {};
   }
 
Method "waitForThenNotify()" in class "BasePoll" does not match conventions; consider renaming to "waitForThenNotifyAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/async/BasePoll.php:126:2
@@ -123,7 +123,7 @@
     $this->notifiers = AwaitAllWaitHandle::fromVec($notifiers);
   }
 
-  private async function waitForThenNotify(
+  private async function waitForThenNotifyAsync(
     Tk $key,
     Awaitable<Tv> $awaitable,
   ): Awaitable<void> {
Method "next()" in class "BasePoll" does not match conventions; consider renaming to "nextAsync"
  Linter: Facebook\HHAST\AsyncFunctionAndMethodLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/async/BasePoll.php:142:2
@@ -139,7 +139,7 @@
     }
   }
 
-  final public async function next(): Awaitable<?(Tk, Tv)> {
+  final public async function nextAsync(): Awaitable<?(Tk, Tv)> {
     invariant(
       $this->lastAwaited !== null,
       'Unable to iterate, iteration already finished',
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/regex/exception.php:27:8
@@ -24,7 +24,7 @@
     ];
     parent::__construct(
       Str\format(
-        "%s: %s",
+        '%s: %s',
         idx($errors, $code, 'Invalid pattern'),
         /* HH_FIXME[4110] Until we have a to_string() function */
         $pattern,
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/regex/regex.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\Regex;
 
-use namespace HH\Lib\{_Private, Str};
+use namespace HH\Lib\{Str, _Private};
 
 /**
  * Returns the first match found in `$haystack` given the regex pattern `$pattern`
Method "format_d()" in class "SprintfFormat" does not match conventions; consider renaming to "formatD"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:17:2
@@ -14,7 +14,7 @@
  * This interface describes features of a valid format string for `Str\format`
  */
 interface SprintfFormat {
-  public function format_d(int $s): string;
+  public function formatD(int $s): string;
   public function format_s(string $s): string;
   public function format_u(int $s): string;
   public function format_b(int $s): string; // bit strings
Method "format_s()" in class "SprintfFormat" does not match conventions; consider renaming to "formatS"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:18:2
@@ -15,7 +15,7 @@
  */
 interface SprintfFormat {
   public function format_d(int $s): string;
-  public function format_s(string $s): string;
+  public function formatS(string $s): string;
   public function format_u(int $s): string;
   public function format_b(int $s): string; // bit strings
   // Technically %f is locale-dependent (and thus wrong)
Method "format_u()" in class "SprintfFormat" does not match conventions; consider renaming to "formatU"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:19:2
@@ -16,7 +16,7 @@
 interface SprintfFormat {
   public function format_d(int $s): string;
   public function format_s(string $s): string;
-  public function format_u(int $s): string;
+  public function formatU(int $s): string;
   public function format_b(int $s): string; // bit strings
   // Technically %f is locale-dependent (and thus wrong)
   public function format_f(float $s): string;
Method "format_b()" in class "SprintfFormat" does not match conventions; consider renaming to "formatB"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:20:2
@@ -17,7 +17,7 @@
   public function format_d(int $s): string;
   public function format_s(string $s): string;
   public function format_u(int $s): string;
-  public function format_b(int $s): string; // bit strings
+  public function formatB(int $s): string; // bit strings
   // Technically %f is locale-dependent (and thus wrong)
   public function format_f(float $s): string;
   public function format_g(float $s): string;
Method "format_f()" in class "SprintfFormat" does not match conventions; consider renaming to "formatF"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:22:2
@@ -19,7 +19,7 @@
   public function format_u(int $s): string;
   public function format_b(int $s): string; // bit strings
   // Technically %f is locale-dependent (and thus wrong)
-  public function format_f(float $s): string;
+  public function formatF(float $s): string;
   public function format_g(float $s): string;
   public function format_upcase_f(float $s): string;
   public function format_e(float $s): string;
Method "format_g()" in class "SprintfFormat" does not match conventions; consider renaming to "formatG"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:23:2
@@ -20,7 +20,7 @@
   public function format_b(int $s): string; // bit strings
   // Technically %f is locale-dependent (and thus wrong)
   public function format_f(float $s): string;
-  public function format_g(float $s): string;
+  public function formatG(float $s): string;
   public function format_upcase_f(float $s): string;
   public function format_e(float $s): string;
   public function format_upcase_e(float $s): string;
Method "format_upcase_f()" in class "SprintfFormat" does not match conventions; consider renaming to "formatUpcaseF"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:24:2
@@ -21,7 +21,7 @@
   // Technically %f is locale-dependent (and thus wrong)
   public function format_f(float $s): string;
   public function format_g(float $s): string;
-  public function format_upcase_f(float $s): string;
+  public function formatUpcaseF(float $s): string;
   public function format_e(float $s): string;
   public function format_upcase_e(float $s): string;
   public function format_x(int $s): string;
Method "format_e()" in class "SprintfFormat" does not match conventions; consider renaming to "formatE"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:25:2
@@ -22,7 +22,7 @@
   public function format_f(float $s): string;
   public function format_g(float $s): string;
   public function format_upcase_f(float $s): string;
-  public function format_e(float $s): string;
+  public function formatE(float $s): string;
   public function format_upcase_e(float $s): string;
   public function format_x(int $s): string;
   public function format_o(int $s): string;
Method "format_upcase_e()" in class "SprintfFormat" does not match conventions; consider renaming to "formatUpcaseE"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:26:2
@@ -23,7 +23,7 @@
   public function format_g(float $s): string;
   public function format_upcase_f(float $s): string;
   public function format_e(float $s): string;
-  public function format_upcase_e(float $s): string;
+  public function formatUpcaseE(float $s): string;
   public function format_x(int $s): string;
   public function format_o(int $s): string;
   public function format_c(int $s): string;
Method "format_x()" in class "SprintfFormat" does not match conventions; consider renaming to "formatX"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:27:2
@@ -24,7 +24,7 @@
   public function format_upcase_f(float $s): string;
   public function format_e(float $s): string;
   public function format_upcase_e(float $s): string;
-  public function format_x(int $s): string;
+  public function formatX(int $s): string;
   public function format_o(int $s): string;
   public function format_c(int $s): string;
   public function format_upcase_x(int $s): string;
Method "format_o()" in class "SprintfFormat" does not match conventions; consider renaming to "formatO"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:28:2
@@ -25,7 +25,7 @@
   public function format_e(float $s): string;
   public function format_upcase_e(float $s): string;
   public function format_x(int $s): string;
-  public function format_o(int $s): string;
+  public function formatO(int $s): string;
   public function format_c(int $s): string;
   public function format_upcase_x(int $s): string;
   // %% takes no arguments
Method "format_c()" in class "SprintfFormat" does not match conventions; consider renaming to "formatC"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:29:2
@@ -26,7 +26,7 @@
   public function format_upcase_e(float $s): string;
   public function format_x(int $s): string;
   public function format_o(int $s): string;
-  public function format_c(int $s): string;
+  public function formatC(int $s): string;
   public function format_upcase_x(int $s): string;
   // %% takes no arguments
   public function format_0x25(): string;
Method "format_upcase_x()" in class "SprintfFormat" does not match conventions; consider renaming to "formatUpcaseX"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:30:2
@@ -27,7 +27,7 @@
   public function format_x(int $s): string;
   public function format_o(int $s): string;
   public function format_c(int $s): string;
-  public function format_upcase_x(int $s): string;
+  public function formatUpcaseX(int $s): string;
   // %% takes no arguments
   public function format_0x25(): string;
   // Modifiers that don't change the type
Method "format_l()" in class "SprintfFormat" does not match conventions; consider renaming to "formatL"
  Linter: Facebook\HHAST\CamelCasedMethodsUnderscoredFunctionsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/str/format.php:34:2
@@ -31,7 +31,7 @@
   // %% takes no arguments
   public function format_0x25(): string;
   // Modifiers that don't change the type
-  public function format_l(): SprintfFormat;
+  public function formatL(): SprintfFormat;
   public function format_0x20(): SprintfFormat; // ' '
   public function format_0x2b(): SprintfFormat; // '+'
   public function format_0x2d(): SprintfFormat; // '-'
`Math` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/dict/transform.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\Dict;
 
-use namespace HH\Lib\Math;
 
 /**
  * Returns a vec containing the original dict split into chunks of the given
`C` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/dict/async.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\Dict;
 
-use namespace HH\Lib\{C, Dict};
+use namespace HH\Lib\Dict;
 
 /**
  * Returns a new dict with each value `await`ed in parallel.
`Math` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/vec/transform.php:13:0
@@ -10,7 +10,6 @@
 
 namespace HH\Lib\Vec;
 
-use namespace HH\Lib\Math;
 
 /**
  * Returns a vec containing the original vec split into chunks of the given
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/vec/order.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\Vec;
 
-use namespace HH\Lib\{C, Dict, Math, Str};
+use namespace HH\Lib\{C, Dict, Math};
 
 /**
  * Returns a new vec containing the range of numbers from `$start` to `$end`
`Str` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/random/secure.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\SecureRandom;
 
-use namespace HH\Lib\{_Private, Math, Str};
+use namespace HH\Lib\{_Private, Math};
 
 /**
  * Returns a cryptographically secure random float in the range from 0.0 to 1.0,
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/random/secure.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\SecureRandom;
 
-use namespace HH\Lib\{_Private, Math, Str};
+use namespace HH\Lib\{Math, Str, _Private};
 
 /**
  * Returns a cryptographically secure random float in the range from 0.0 to 1.0,
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/random/pseudo.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\PseudoRandom;
 
-use namespace HH\Lib\{_Private, Math, SecureRandom};
+use namespace HH\Lib\{Math, SecureRandom, _Private};
 
 /**
  * Returns a pseudorandom float in the range from 0.0 to 1.0, inclusive. This is
Group use statements should be sorted alphabetically
  Linter: Facebook\HHAST\GroupUseStatementAlphabetizationLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/src/c/select.php:13:0
@@ -10,7 +10,7 @@
 
 namespace HH\Lib\C;
 
-use namespace HH\Lib\{_Private, Str};
+use namespace HH\Lib\{Str, _Private};
 
 /**
  * Returns the first value of the given Traversable for which the predicate
`non_crypto_md5` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/math/MathComputeTest.php:19:0
@@ -16,7 +16,6 @@
 
 // FB likes to be explicit about md5() being unsuitable for crypto, and
 // our usual trivial wrapper isn't available in open source.
-use function md5 as non_crypto_md5;
 
 // @oss-disable: <<Oncalls('hack')>>
 final class MathComputeTest extends HackTest {
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/math/MathComputeTest.php:314:26
@@ -311,7 +311,7 @@
     // overflow (PHP_INT_MAX + 1) in all bases
     for ($n = 2; $n < 36; $n++) {
       $tuples[] = tuple(
-        Math\base_convert("9223372036854775808", 10, $n),
+        Math\base_convert('9223372036854775808', 10, $n),
         $n,
       );
     }
Don't use `as` in `use` statements: it makes code less readable and less greppable.
  Linter: Facebook\HHAST\UseStatementWithAsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/math/MathComputeTest.php:19:13
  Code:
  >md5 as non_crypto_md5
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/keyset/KeysetAsyncTest.php:54:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Keyset\from_async($awaitables);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/keyset/KeysetAsyncTest.php:87:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Keyset\map_async($traversable, $async_func);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/keyset/KeysetAsyncTest.php:130:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Keyset\filter_async($traversable, $async_predicate);
  >      expect($actual)->toEqual($expected);
  >    })
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/async/PollTest.php:20:43
@@ -17,7 +17,7 @@
 // @oss-disable: <<Oncalls('hphp_hphpi')>>
 final class PollTest extends HackTest {
   public async function testEmpty(): Awaitable<void> {
-    foreach (Async\Poll::create() await as $value) {
+    foreach (Async\Poll::create() await as $_value) {
       throw new Exception('expected to be empty');
     }
   }
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/async/PollTest.php:26:48
@@ -23,7 +23,7 @@
   }
 
   public async function testEmptyKeyed(): Awaitable<void> {
-    foreach (Async\KeyedPoll::create() await as $value) {
+    foreach (Async\KeyedPoll::create() await as $_value) {
       throw new Exception('expected to be empty');
     }
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/async/PollTest.php:128:30
@@ -125,7 +125,7 @@
           expect($value)->toBePHPEqual(3);
           break;
         default:
-          invariant_violation("unexpected key: %s", $key);
+          invariant_violation('unexpected key: %s', $key);
       }
     }
     expect($count)->toBePHPEqual(3);
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/async/ConditionTest.php:33:6
  Code:
  >      $result 
Variable is unused
  Linter: Facebook\HHAST\UnusedVariableLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/async/ConditionTest.php:60:6
  Code:
  >      $result 
Use statements should be groupped
  Linter: Facebook\HHAST\GroupUseStatementsLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/async/SemaphoreTest.php:1:0
@@ -8,8 +8,7 @@
  *
  */
 
-use namespace HH\Lib\Vec;
-use namespace HH\Lib\Async;
+use namespace HH\Lib\{Async, Vec};
 use type HH\Lib\Ref;
 
 use function Facebook\FBExpect\expect; // @oss-enable
Parameter is unused
  Linter: Facebook\HHAST\UnusedParameterLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:95:4
@@ -92,7 +92,7 @@
   public function testFirstMatch(
     string $haystack,
     Regex\Pattern<shape(...)> $pattern,
-    int $offset,
+    int $_offset,
     darray<arraykey, string> $expected,
   ): void {
     $captures = Regex\first_match($haystack, $pattern);
`C`, `Vec` are not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:12:0
@@ -9,7 +9,7 @@
  */
 
 
-use namespace HH\Lib\{C, Regex, Str, Vec};
+use namespace HH\Lib\{Regex, Str};
 
 use function Facebook\FBExpect\expect; // @oss-enable
 use type Facebook\HackTest\{DataProvider, HackTest}; // @oss-enable
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:222:12
@@ -219,7 +219,7 @@
         darray[0 => 'o'],
         darray[0 => ''],
       ]),
-      tuple("<b>bold text</b><a href=howdy.html>click me</a>", re"/(<([\\w]+)[^>]*>)(.*)(<\\/\\2>)/",
+      tuple('<b>bold text</b><a href=howdy.html>click me</a>', re"/(<([\\w]+)[^>]*>)(.*)(<\\/\\2>)/",
         0, vec[
           darray[
             0 => "<b>bold text</b>",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:225:17
@@ -222,7 +222,7 @@
       tuple("<b>bold text</b><a href=howdy.html>click me</a>", re"/(<([\\w]+)[^>]*>)(.*)(<\\/\\2>)/",
         0, vec[
           darray[
-            0 => "<b>bold text</b>",
+            0 => '<b>bold text</b>',
             1 => "<b>",
             2 => "b",
             3 => "bold text",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:226:17
@@ -223,7 +223,7 @@
         0, vec[
           darray[
             0 => "<b>bold text</b>",
-            1 => "<b>",
+            1 => '<b>',
             2 => "b",
             3 => "bold text",
             4 => "</b>",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:227:17
@@ -224,7 +224,7 @@
           darray[
             0 => "<b>bold text</b>",
             1 => "<b>",
-            2 => "b",
+            2 => 'b',
             3 => "bold text",
             4 => "</b>",
           ],
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:228:17
@@ -225,7 +225,7 @@
             0 => "<b>bold text</b>",
             1 => "<b>",
             2 => "b",
-            3 => "bold text",
+            3 => 'bold text',
             4 => "</b>",
           ],
           darray[
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:229:17
@@ -226,7 +226,7 @@
             1 => "<b>",
             2 => "b",
             3 => "bold text",
-            4 => "</b>",
+            4 => '</b>',
           ],
           darray[
             0 => "<a href=howdy.html>click me</a>",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:232:17
@@ -229,7 +229,7 @@
             4 => "</b>",
           ],
           darray[
-            0 => "<a href=howdy.html>click me</a>",
+            0 => '<a href=howdy.html>click me</a>',
             1 => "<a href=howdy.html>",
             2 => "a",
             3 => "click me",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:233:17
@@ -230,7 +230,7 @@
           ],
           darray[
             0 => "<a href=howdy.html>click me</a>",
-            1 => "<a href=howdy.html>",
+            1 => '<a href=howdy.html>',
             2 => "a",
             3 => "click me",
             4 => "</a>",
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:234:17
@@ -231,7 +231,7 @@
           darray[
             0 => "<a href=howdy.html>click me</a>",
             1 => "<a href=howdy.html>",
-            2 => "a",
+            2 => 'a',
             3 => "click me",
             4 => "</a>",
           ],
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:235:17
@@ -232,7 +232,7 @@
             0 => "<a href=howdy.html>click me</a>",
             1 => "<a href=howdy.html>",
             2 => "a",
-            3 => "click me",
+            3 => 'click me',
             4 => "</a>",
           ],
       ]),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:236:17
@@ -233,7 +233,7 @@
             1 => "<a href=howdy.html>",
             2 => "a",
             3 => "click me",
-            4 => "</a>",
+            4 => '</a>',
           ],
       ]),
     ];
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:285:10
@@ -282,7 +282,7 @@
       ),
       tuple(
         Regex\replace(
-          "{startDate} = 1999-5-27",
+          '{startDate} = 1999-5-27',
           re"/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/",
           "\\3/\\4/\\1\\2",
           0,
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:369:12
@@ -366,7 +366,7 @@
       tuple('  hello world  ', re"/\s+/", 3, vec['', 'hello', 'world  ']),
       tuple('', re"/(.?)/", null, vec['', '']),
       tuple('', re"//", null, vec['', '']),
-      tuple("string", re"/(.?)/", null, vec['', '', '', '', '', '', '', '']),
+      tuple('string', re"/(.?)/", null, vec['', '', '', '', '', '', '', '']),
       tuple("string", re"//", null, vec['', 's', 't', 'r', 'i', 'n', 'g', '']),
       tuple("string", re"/(.?)/", 3, vec['', '', 'ring']),
       tuple("string", re"//", 3, vec['', 's', 'tring']),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:370:12
@@ -367,7 +367,7 @@
       tuple('', re"/(.?)/", null, vec['', '']),
       tuple('', re"//", null, vec['', '']),
       tuple("string", re"/(.?)/", null, vec['', '', '', '', '', '', '', '']),
-      tuple("string", re"//", null, vec['', 's', 't', 'r', 'i', 'n', 'g', '']),
+      tuple('string', re"//", null, vec['', 's', 't', 'r', 'i', 'n', 'g', '']),
       tuple("string", re"/(.?)/", 3, vec['', '', 'ring']),
       tuple("string", re"//", 3, vec['', 's', 'tring']),
     ];
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:371:12
@@ -368,7 +368,7 @@
       tuple('', re"//", null, vec['', '']),
       tuple("string", re"/(.?)/", null, vec['', '', '', '', '', '', '', '']),
       tuple("string", re"//", null, vec['', 's', 't', 'r', 'i', 'n', 'g', '']),
-      tuple("string", re"/(.?)/", 3, vec['', '', 'ring']),
+      tuple('string', re"/(.?)/", 3, vec['', '', 'ring']),
       tuple("string", re"//", 3, vec['', 's', 'tring']),
     ];
   }
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/regex/RegexTest.php:372:12
@@ -369,7 +369,7 @@
       tuple("string", re"/(.?)/", null, vec['', '', '', '', '', '', '', '']),
       tuple("string", re"//", null, vec['', 's', 't', 'r', 'i', 'n', 'g', '']),
       tuple("string", re"/(.?)/", 3, vec['', '', 'ring']),
-      tuple("string", re"//", 3, vec['', 's', 'tring']),
+      tuple('string', re"//", 3, vec['', 's', 'tring']),
     ];
   }
 
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/dict/DictAsyncTest.php:63:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Dict\from_async($awaitables);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/dict/DictAsyncTest.php:103:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Dict\from_keys_async($keys, $async_func);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/dict/DictAsyncTest.php:111:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      // Like Ref<int>, but not a flibism
  >      $run_cnt = Map { 'value' => 0 };
  >      $actual = await Dict\from_keys_async(
  >        vec[1, 1, 2],
  >        async ($k) ==> {
  >          ++$run_cnt['value'];
  >          return $k;
  >        },
  >      );
  >      expect($actual)->toEqual(dict[1 => 1, 2 => 2]);
  >      expect($run_cnt['value'])->toEqual(2);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/dict/DictAsyncTest.php:174:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Dict\filter_async($traversable, $value_predicate);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/dict/DictAsyncTest.php:284:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Dict\map_async($traversable, $value_func);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/dict/DictAsyncTest.php:333:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $result = await Dict\map_with_key_async($traversable, $value_func);
  >      expect($result)->toEqual($expected);
  >    })
`Math` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecOrderTest.php:11:0
@@ -8,7 +8,7 @@
  *
  */
 
-use namespace HH\Lib\{C, Math, Str, Vec};
+use namespace HH\Lib\{C, Str, Vec};
 use function \Facebook\FBExpect\expect; // @oss-enable
 use type Facebook\HackTest\{DataProvider, HackTest}; // @oss-enable
 // @oss-disable: use InvariantViolationException as InvariantException;
Leading backslashes on `use` statements do nothing
  Linter: Facebook\HHAST\UseStatementWithLeadingBackslashLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecOrderTest.php:12:0
@@ -9,7 +9,7 @@
  */
 
 use namespace HH\Lib\{C, Math, Str, Vec};
-use function \Facebook\FBExpect\expect; // @oss-enable
+use function Facebook\FBExpect\expect; // @oss-enable
 use type Facebook\HackTest\{DataProvider, HackTest}; // @oss-enable
 // @oss-disable: use InvariantViolationException as InvariantException;
 
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecAsyncTest.php:54:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Vec\from_async($awaitables);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecAsyncTest.php:87:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Vec\filter_async($container, $value_predicate);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecAsyncTest.php:117:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await Vec\map_async($keys, $async_func);
  >      expect($actual)->toEqual($expected);
  >    })
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecCombineTest.php:58:6
@@ -55,7 +55,7 @@
     (Traversable<mixed>, Traversable<mixed>, Traversable<(mixed, mixed)>),
   > {
     return dict[
-      "Should return empty by zipping 2 empty vecs" =>
+      'Should return empty by zipping 2 empty vecs' =>
         tuple(vec[], vec[], vec[]),
       "Should return empty if any of the vecs is empty" =>
         tuple(vec[], vec[1, 2, 3], vec[]),
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecCombineTest.php:60:6
@@ -57,7 +57,7 @@
     return dict[
       "Should return empty by zipping 2 empty vecs" =>
         tuple(vec[], vec[], vec[]),
-      "Should return empty if any of the vecs is empty" =>
+      'Should return empty if any of the vecs is empty' =>
         tuple(vec[], vec[1, 2, 3], vec[]),
       "Should zip all elements if vecs are of the same size" => tuple(
         vec[1, 2, 3],
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecCombineTest.php:62:6
@@ -59,7 +59,7 @@
         tuple(vec[], vec[], vec[]),
       "Should return empty if any of the vecs is empty" =>
         tuple(vec[], vec[1, 2, 3], vec[]),
-      "Should zip all elements if vecs are of the same size" => tuple(
+      'Should zip all elements if vecs are of the same size' => tuple(
         vec[1, 2, 3],
         vec[4, 5, 6],
         vec[tuple(1, 4), tuple(2, 5), tuple(3, 6)],
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecCombineTest.php:67:6
@@ -64,7 +64,7 @@
         vec[4, 5, 6],
         vec[tuple(1, 4), tuple(2, 5), tuple(3, 6)],
       ),
-      "We can zip vecs of different types" => tuple(
+      'We can zip vecs of different types' => tuple(
         vec[1, 2, 3],
         vec['a', 'b', 'c'],
         vec[tuple(1, 'a'), tuple(2, 'b'), tuple(3, 'c')],
Prefer a single-quoted string when possible
  Linter: Facebook\HHAST\PreferSingleQuotedStringLiteralLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/vec/VecCombineTest.php:72:6
@@ -69,7 +69,7 @@
         vec['a', 'b', 'c'],
         vec[tuple(1, 'a'), tuple(2, 'b'), tuple(3, 'c')],
       ),
-      "The inputs can be any traversables, but keys are discarded." => tuple(
+      'The inputs can be any traversables, but keys are discarded.' => tuple(
         darray['a' => 1, 'b' => 2, 'c' => 3],
         Map {10 => 'd', 20 => 'e', 30 => 'f'},
         vec[tuple(1, 'd'), tuple(2, 'e'), tuple(3, 'f')],
`expect` is not used
  Linter: Facebook\HHAST\UnusedUseClauseLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/random/PseudoRandomTest.php:13:0
@@ -10,7 +10,6 @@
 
 
 use namespace HH\Lib\PseudoRandom;
-use function Facebook\FBExpect\expect;
 use type Facebook\HackTest\HackTest; // @oss-enable
 
 // @oss-disable: <<Oncalls('hack')>>
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/c/CAsyncTest.php:52:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await C\first_async($awaitable);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/c/CAsyncTest.php:85:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      $actual = await C\firstx_async($awaitable);
  >      expect($actual)->toEqual($expected);
  >    })
Don't use HH\Asio\join
  Linter: Facebook\HHAST\DontUseAsioJoinLinter
  Location: /opt/lampp/htdocs/hhvm_repos/lexidor/hh_client_options/vendor/hhvm/hsl/tests/c/CAsyncTest.php:109:4
  Code:
  >    /* @lint-ignore HackLint5542 open source */
  >    \HH\Asio\join(async {
  >      expect(
  >        async () ==> await C\firstx_async($awaitable),
  >      )->toThrow($expected);
  >    })
